{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Digital River API Reference",
    "description" : "If you have a commerce technology in place, the Digital River API allows you to integrate our back-end payments, tax, fraud, and compliance services.\n\nThe Digital River API is a RESTful API. That means Digital River designed this API to allow you to retrieve, create, update, and delete objects with the HTTP verbs GET, POST, and DELETE. \n\nYou can use the Digital River API in a test environment when you do not want to interact with financial institutions. The API key you use to authenticate a request determines whether the request is in the production environment or test environment.\n\nThe Digital River API speaks exclusively in JSON. You should always set the content-type header to `application/json` to ensure the API accepts and processes your requests.\n\nAll Digital River API requests are sent to https://<span></span>api.digitalriver.com.\n\n# Explore Digital River Products  \n\n<table>\n<tr>\n    <td><b>Product</b></td>\n    <td><b>Description</b></td>\n</tr>\n<tr>\n    <td><a href=\"https://docs.digitalriver.com/digital-river-api/\">Digital River API</a></td>\n    <td>Explore Digital River&apos;s API suite for Global Seller Services.</td>\n</tr>\n<tr>\n    <td><a href=\"https://docs.digitalriver.com/digital-river-api/payments/payment-integrations-1\">Payment Integrations</a></td>\n    <td>Explore our payment integration options that allow you to enable payment methods and checkout flows.</td>\n</tr>\n</table>\n\n\n<a name=\"obtaining-credentials\"></a>\n# Obtaining Digital River API credentials\n\nBefore you can start making Digital River API requests, you&apos;ll need to create a test account in the [Dashboard](https://dashboard.digitalriver.com/login). Check out our [Quick Start Guide](https://docs.digitalriver.com/digital-river-api/quick-start-guide) for additional information.     \n\n<a name=\"authentication\"></a>\n# Authentication\n\nThe Digital River API authenticates requests using API keys.  \n\nDigital River provides secret keys (tokens) for production and test environment in the Digital River API. Each secret key uses a prefix. Use the `sk_test_ prefix` for test environment secret keys and the `sk_ prefix` for production environment secret keys. If you want to apply additional restrictions to access and permissions, you can use restricted API keys.\n\n**Important**&colon; Limit access to your API keys to those who need them. Do not store them in a version control system.\n\nThe Java library automatically sends your API key in each request when you assign the API key to `DigitalRiver.apiKey`.\n\nYou must send all API requests over HTTPS. Calls sent over plain HTTP will fail. Sending an API request without authentication automatically fails.\n\n<a name=\"api-keys\"></a>\n# API keys\n\nDigital River uses your account&apos;s API keys to authenticate your API requests. If you do not include your key when you send an API request or use an incorrect or outdated key, Digital River returns an error. See [API keys](https://docs.digitalriver.com/digital-river-api/administration/dashboard/developers/api-keys) in the [Dashboard documentation](https://docs.digitalriver.com/digital-river-api/administration/dashboard) for more information.\n\n## Get your API keys\n\nTo [get your keys](https://docs.digitalriver.com/digital-river-api/getting-started-1#step-1-create-a-test-account), sign in to [Digital River Dashboard](https://dashboard.digitalriver.com/). The API keys page displays your public key and secret key. \n\n# Webhooks\nWebhooks allow developers to be notified, in near real-time, when specific events occur.\n\nWhen you register your webhook URLs with Digital River, Digital River creates an Event object and sends webhook events that notify your application any time an event occurs.\n\nThe Event object includes the event type and the data associated with that event. Digital River sends the Event object to the endpoint URLs you define in [Dashboard](https://dashboard.digitalriver.com/)&apos;s Webhook settings for your account through an HTTP POST request. You can set up multiple webhook endpoints to receive a single event.\n\nSee [Creating a webhook](https://docs.digitalriver.com/digital-river-api/order-management/events-and-webhooks-1/webhooks/creating-a-webhook) to learn how to create a webhook.\n\n## Event logs\nTo view the webhook events, sign in to [Dashboard](https://dashboard.digitalriver.com/) and click Event logs. The Event logs display the event type, event ID, and timestamp for the event.\n\n<a name=\"metadata\"></a>    \n# Metadata\nThe metadata parameter stores additional, structured information on an object. You can use the metadata parameter to attach key-value data to the following Digital River resources&colon; SKUs, Checkouts, Orders, Customers, Returns, Refunds, and Fulfillments.\n\nFor example, you can store your user&apos;s full name and ID on a Digital River Customer object. Digital River does not use the metadata. Your users will only see this data if you choose to show it to them.\n\n**Note**&colon; Do not store any data that identifies a person, their card information, and so on as metadata.\n\nThe metadata parameter supports up to 20 keys. Each key name can be up to 40 characters long&comma; and the values can be up to 500 characters long.\n\n# Pagination\nAll API resources that return lists support bulk fetches. For example, you can use the `limit`, `startingAfter`, and `endingBefore` parameters to list orders, customers, and SKUs.\n\nThe `startingBefore` and `endingAfter` parameters both use an object ID value to determine the starting point, and the objects appear in the response in reverse chronological order. To return objects listed before the named object, use the `endingBefore` parameter. To return objects listed after the named object, use the `startingAfter` parameter. If you provide both parameters, the request uses only the `endingBefore` parameter.\n\n## Parameters\n\n<table>\n<tr>\n    <td><b>Parameter</b></td>\n    <td><b>Description</b></td>\n</tr>\n<tr>\n    <td>limit</td>\n    <td>The maximum number of objects returned. You can specify a value between 1 and 100.</td>\n</tr>\n<tr>\n    <td>startingAfter</td>\n    <td>This cursor identifies the pagination starting point in the list based on the object ID. For example, if you send a list request and receive 100 customers ending with `xyz`, your subsequent calls can include `startingAfter=xyz` to fetch the next page of the list.</td>\n</tr>\n<tr>\n    <td>endingBefore</td>\n    <td>This cursor identifies the pagination starting point in the list based on the object ID. For example, if you send a list request and receive 100 objects starting with `xyz`, your subsequent call can include `endingBefore=xyz` to fetch the previous page of the list.</td>\n</tr>\n</table>\n\n## List response attributes\n\n<table>\n<tr>\n    <td><b>Attribute</b></td>\n    <td><b>Description</b></td>\n</tr>\n<tr>\n    <td>data</td>\n    <td>This array contains response elements. Any request parameter can paginate the response elements.</td>\n</tr>\n<tr>\n    <td>hasMore</td>\n    <td>When true, there are more elements available after this set. When false, this set marks the end of the list.</td>\n</tr>\n</table>\n\n# Request identifiers\n\nA request identifier is associated with each API request. It appears in the response headers under `x-dr-requestid`. Request identifiers also appear in the URLs of each request log in your [Dashboard](https://dashboard.digitalriver.com/).\n\n**Note**&colon; Contact us if you have a question about a specific request. To ensure a quick solution, include the request identifier.\n\n# Versioning\n\nYour account&apos;s API version determines the structure of events generated by API requests. All versions with breaking changes are dated.\n\nAll requests will use the version pinned to your account API settings. It only changes when you upgrade to the latest API version. \n\nSelect a version of the library to change the API version used and create a webhook endpoint with the same API version as `DigitalRiver.API_VERSION` property in the library. Use the [Changelog](https://docs.digitalriver.com/digital-river-api/general-resources/release-notes) to  find the API version you need and view all breaking changes.\n\nYou can test a single API request without upgrading your API key.  To set an API version with a specific request, send a `DigitalRiver-Version` header, for example:\n\n`digitalriver-version=2020-09-30`\n\n<a name=\"errors\"></a>\n# Response status codes\n\nDigital River uses HTTP response status codes. These codes indicate whether an API request succeeded or failed. HTTP status codes group responses into the following classes&colon;\n\n* The `2xx` range indicates success.\n\n* The `4xx` range indicates an error that failed based on the provided information provided (for example, you omitted a parameter or a charge failed).\n\n* The `5xx` range indicates an error with Digital River&apos;s servers.\n\n* You can handle some `4xx` errors programmatically to include an error code that briefly explains the error reported (for example, include an error code when you decline a card).\n\n<a name=\"error-types\"></a>\n## Error types\n\n<table>\n<tr>\n    <td><b>Type</b></td>\n    <td><b>Description</b></td>\n</tr>\n<tr>\n    <td>bad_request</td>\n    <td>The server could not process the request due to a client error (for example, malformed request syntax). Correct the problem and try again.</td>\n</tr>   \n<tr>\n    <td>not_found</td>\n    <td>The server can’t find the requested resource. No indication is given of whether the condition is temporary or permanent.</td>\n</tr>\n<tr>\n    <td>request_timeout</td>\n    <td>The client did not produce the request within the time that the server was prepared to wait. Resend the request without modifications at any later time.</td>\n</tr>\n<tr>\n    <td>internal_server_error</td>\n    <td>The server encountered an unexpected problem that prevented it from fulfilling the request.</td>\n</tr>    \n<tr>\n    <td>unauthorized</td>\n    <td>The request requires user authentication. Resend the request with valid user authentication.</td>\n</tr>    \n<tr>\n    <td>too_many_requests</td>\n    <td>The user sent too many requests in a given amount of time (&ldquo;rate limiting&rdquo;). The response should include details explaining the condition and may include a Retry-After header indicating how long to wait before sending a new request.</td>\n</tr>    \n<tr>\n    <td>conflict</td>\n    <td>There is a request conflict with the current state of the server.\n    \nConflicts are most likely to occur in response to a PUT request. For example, you may get a 409 response when uploading a file that is older than the one already on the server resulting in a version control conflict.\n</td>\n</tr>    \n<tr>\n    <td>validation_error</td>\n    <td>Errors triggered by our client-side libraries when failing to validate fields (for example, when a card number or expiration date is invalid or incomplete).\n\nUsed by&colon; DigitalRiver.js</td>\n</tr>    \n<tr>\n    <td>no_network</td>\n    <td>There is no network coverage or cellular data connection.</td>\n</tr>    \n</table>\n\n<a name=\"error-codes\"></a>\n## Error codes\n\nThe following table contains a list of API error codes.\n\n**Note**&colon; Do not share the error's <code>code</code> with customers. Doing so may aid fradulent and malicious actors.\n\n<table>\n<tr>\n    <td><b>Code</b></td>\n    <td><b>Description</b></td>\n</tr>\n<tr>\n    <td>account_closed</td>\n    <td>Stop all billing as this account is closed.</td>\n</tr>\n<tr>\n    <td>already_exists</td>\n    <td>The item you tried to create already exists.</td>\n</tr>\n<tr>\n    <td>amount_too_large</td>\n    <td>The given amount is too large. Provide a smaller amount and try again.</td>\n</tr>\n<tr>\n    <td>api_key_expired</td>\n    <td>The API key has expired.</td>\n</tr>    \n<tr>\n    <td>card_expired</td>\n    <td>The card has expired. Provide valid card information and try again.</td>\n</tr>    \n<tr>\n    <td>card_limit_exceeded</td>\n    <td>The transaction exceeds the card limit amount.</td>\n</tr>\n<tr>\n    <td>card_type_block</td>\n    <td>The merchant has blocked this card type.</td>\n</tr>    \n<tr>\n    <td>card_velocity_exceeded</td>\n    <td>The transaction exceeds the card velocity amount.</td>\n</tr>\n<tr>\n    <td>charge_expired</td>\n    <td>The charge has expired. Provide valid charge information and try again.</td>\n</tr>    \n<tr>\n    <td>charge_not_capturable</td>\n    <td>The charge could not be captured.</td>\n</tr>\n<tr>\n    <td>country_restricted</td>\n    <td>A user provided a restricted country. Make sure that users can only sign up from supported countries.</td>\n</tr> \n<tr>\n    <td>create-order-failed</td>\n    <td>The order is missing required details and could not be completed.</td>\n</tr>     \n<tr>\n    <td>currency_unsupported</td>\n    <td>The currency provided is not supported. Provide a supported currency and try again.</td>\n</tr>\n<tr>\n    <td>declined</td>\n    <td>The card has been declined for an unknown reason.</td>\n</tr>    \n<tr>\n    <td>do_not_honor</td>\n    <td>The card issuing bank has declined this payment.</td>\n</tr>\n<tr>\n    <td>email_invalid</td>\n    <td>The email address is invalid. Provide a valid email address and try again.</td>\n</tr>\n<tr>\n    <td>failed-request</td>\n    <td>Failed to charge source.</td>\n</tr>\n<tr>\n    <td>fraud</td>\n    <td>The transaction has been identified by the issuing bank as fraudulent.</td>\n</tr>\n<tr>\n    <td>fraud_block</td>\n    <td>The transaction has been identified by Digital River as fraudulent.</td>\n</tr>    \n<tr>\n    <td>invalid_address</td>\n    <td>The address does not match the card network's records.</td>\n</tr>\n<tr>\n    <td>invalid_amount</td>\n    <td>The amount is not accepted by the card network.</td>\n</tr>    \n<tr>\n    <td>invalid_boolean</td>\n    <td>The boolean value is invalid. Provide a valid boolean value and try again.</td>\n</tr>\n<tr>\n    <td>invalid_card_bin</td>\n    <td>The card bin is invalid.</td>\n</tr>    \n<tr>\n    <td>invalid_card_number</td>\n    <td>The card number entered is invalid.</td>\n</tr>\n<tr>\n    <td>invalid_currency</td>\n    <td>This currency is not supported.</td>\n</tr>    \n<tr>\n    <td>invalid_empty</td>\n    <td>The empty value is invalid. Provide a valid value and try again.</td>\n</tr>\n<tr>\n    <td>invalid_expiration_date</td>\n    <td>The card is expired, or the expiration date is invalid. This validation message indicates the expiration date did not meet basic validation requirements (for example, the date is in the past, incorrect month, missing year, and so on).</td>\n</tr>  \n<tr>\n    <td>invalid_format</td>\n    <td>The format of your request is invalid.</td>\n</tr>     \n<tr>\n    <td>invalid_integer</td>\n    <td>The integer value is valid. Provide a value integer value and try again.</td>\n</tr>\n<tr>\n    <td>invalid_metadata_key</td>\n    <td>The metadata key is invalid. Provide a value metadata key and try again.</td>\n</tr>      \n<tr>\n    <td>invalid_metadata_value</td>\n    <td>The value provided for the metadata was invalid.</td>\n</tr>\n<tr>\n    <td>invalid_parameter</td>\n    <td>The parameter is invalid. Check our API Reference to see which values are valid and try again.</td>\n</tr>      \n<tr>\n    <td>invalid_pin</td>\n    <td>The PIN provided is invalid or incorrect.invalid_quantity_amount</td>\n</tr>\n<tr>\n    <td>invalid_quantity_amount</td>\n    <td>The quantity provided in the request was invalid. Check our API Reference to see what is a valid quantity and try again.</td>\n</tr>      \n<tr>\n    <td>invalid_security_code</td>\n    <td>The security code provided is invalid or incorrect.</td>\n</tr>\n<tr>\n    <td>invalid_shipping_choice</td>\n    <td>The shipping choice is invalid. Provide a valid shipping choice and try again.</td>\n</tr>      \n<tr>\n    <td>invalid_string_blank</td>\n    <td>The string value is blank. Provide a valid string value and try again.</td>\n</tr>\n<tr>\n    <td>invalid_string_empty</td>\n    <td>The string value is empty. Provide a valid string value and try again.</td>\n</tr>      \n<tr>\n    <td>invalid_transaction_type</td>\n    <td>The transaction type is invalid.</td>\n</tr>\n<tr>\n    <td>issuer_invalid_card</td>\n    <td>The card does not exist with the issuer.</td>\n</tr>      \n<tr>\n    <td>issuer_not_found</td>\n    <td>The card issuer does not exist.</td>\n</tr>\n<tr>\n    <td>issuer_unavailable</td>\n    <td>The card issuing bank could not be reached.</td>\n</tr>      \n<tr>\n    <td>insufficient_funds</td>\n    <td>The card has insufficient funds to complete the purchase.</td>\n</tr>\n<tr>\n    <td>limit_exceeded</td>\n    <td>The transaction amount exceeds your assigned limit.</td>\n</tr>      \n<tr>\n    <td>lost_stolen_card</td>\n    <td>The issuing bank has marked this card lost or stolen.</td>\n</tr>\n<tr>\n    <td>method_not_allowed</td>\n    <td>The method is not allowed. Provide a valid method value and try again.</td>\n</tr>    \n<tr>\n    <td>mid_limit_exceeded</td>\n    <td>The transaction amount exceeds the limit assigned for this MID.</td>\n</tr>      \n<tr>\n    <td>missing_parameter</td>\n    <td>A parameter is missing. Check our API Reference to see which values are required and try again.</td>\n</tr>\n<tr>\n    <td>no_response</td>\n    <td>The payment processor did not respond.</td>\n</tr>      \n<tr>\n    <td>not_found</td>\n    <td>The item requested was not found.</td>\n</tr>  \n<tr>\n    <td>order_already_complete</td>\n    <td>The specified orderId is already complete.</td>\n</tr>  \n<tr>\n    <td>order_submit_failed</td>\n    <td>The payment session status is invalid.</td>\n</tr>  \n<tr>\n    <td>out_of_inventory</td>\n    <td>The item is not in inventory.</td>\n</tr> \n<tr>\n  <td>payment_authorization_failed</td>\n  <td>The payment authorization failed</td>\n</tr>\n<tr>\n    <td>pin_try_exceeded</td>\n    <td>The bank's allowable number of PIN tries has been exceeded.</td>\n</tr>    \n<tr>\n    <td>plan_not_active</td>\n    <td>The plan is not in an active state.</td>\n</tr>\n<tr>\n    <td>postal_code_invalid</td>\n    <td>The postal code is invalid. Enter a valid postal code and try again.</td>\n</tr>      \n<tr>\n    <td>restricted_card</td>\n    <td>Restricted by the card network.</td>\n</tr>\n<tr>\n    <td>restricted_update</td>\n    <td>Additional data cannot be included in the update request</td>\n</tr>  \n<tr>\n    <td>sku_inactive</td>\n    <td>The given SKU is inactive. Provide an active SKU and try again.</td>\n</tr>      \n<tr>\n    <td>source_expired</td>\n    <td>The source provided has expired. Check Sources to see which sources have not expired and try again.\n    </td>\n</tr>\n<tr>\n    <td>source_not_chargeable</td>\n    <td>The source provided is not chargeable. Check Sources to see which sources are chargeable and try again.</td>\n</tr>      \n<tr>\n    <td>source_not_found</td>\n    <td>The source you have requested was not found.</td>\n</tr>\n<tr>\n    <td>source_status_invalid_for_session</td>\n    <td>The source status is invalid for this session.</td>\n</tr> \n<tr>\n    <td>stop_recurring</td>\n    <td>The cardholder has requested all recurring and / or installment charges to be stopped.</td>\n</tr>    \n<tr>\n    <td>tax_id_invalid</td>\n    <td>The tax identifier is not valid. Correct the tax identifier and try again.</td>\n</tr>      \n<tr>\n    <td>too_many_metadata_pairs</td>\n    <td>The request contained too many metadata pairs.</td>\n</tr>\n<tr>\n    <td>unknown_error</td>\n    <td>An unknown error has occurred.</td>\n</tr>     \n<tr>\n    <td>unknown_parameter</td>\n    <td>The request contains an unknown parameter. Check our API Reference to see which values are required and try again.</td>\n</tr>  \n<tr>\n    <td>voice_authorization_required</td>\n    <td>The request request requires voice authorization before it can be authorized.</td>\n</tr>    \n</table> \n<br><br>Updated at 2023-01-25T14:24:50.445984Z.",
    "version" : "2023",
    "x-generate-timestamp" : "2023-01-25T14:24:50.445984Z",
    "x-logo" : {
      "url" : "https://www.digitalriver.com/wp-content/uploads/sites/8/Digital-River-Logo_160x70.png",
      "backgroundColor" : "#FFFFFF",
      "altText" : "Digital River logo"
    }
  },
  "servers" : [ {
    "url" : "https://api.digitalriver.com"
  }, {
    "url" : "https://api.digitalriver.com"
  }, {
    "url" : "https://github.digitalriverws.net/"
  }, {
    "url" : "https://api.digitalriver.com"
  }, {
    "url" : "https://api.digitalriver.com"
  }, {
    "url" : "https://api.digitalriver.com"
  }, {
    "url" : "https://api.digitalriver.com"
  }, {
    "url" : "https://api.digitalriver.com"
  }, {
    "url" : "https://api.digitalriver.com"
  }, {
    "url" : "https://api.digitalriver.com"
  }, {
    "url" : "https://virtserver.swaggerhub.com/pwehr/FulfillmentCancellations/1.0.0",
    "description" : "SwaggerHub API Auto Mocking"
  }, {
    "url" : "https://virtserver.swaggerhub.com/DigitalRiverX/GlobalFulfillmentOrders/master",
    "description" : "SwaggerHub API Auto Mocking"
  }, {
    "url" : "https://virtserver.swaggerhub.com/DigitalRiverX/Shipments/1.0.0",
    "description" : "SwaggerHub API Auto Mocking"
  }, {
    "url" : "https://api.digitalriver.com"
  }, {
    "url" : "https://virtserver.swaggerhub.com/DigitalRiverX/InventoryItems/master",
    "description" : "SwaggerHub API Auto Mocking"
  }, {
    "url" : "https://virtserver.swaggerhub.com/DigitalRiverX/InventoryLevels/master",
    "description" : "SwaggerHub API Auto Mocking"
  }, {
    "url" : "https://api.digitalriver.com"
  }, {
    "url" : "https://github.digitalriverws.net/"
  }, {
    "url" : "https://api.digitalriver.com"
  }, {
    "url" : "https://api.digitalriver.com"
  }, {
    "url" : "https://virtserver.swaggerhub.com/DigitalRiverX/Plans/master",
    "description" : "SwaggerHub API Auto Mocking"
  }, {
    "url" : "https://www.digitalriver.com/docs/digital-river-api-reference/"
  }, {
    "url" : "https://api.digitalriver.com"
  }, {
    "url" : "https://virtserver.swaggerhub.com/DigitalRiverX/Reservations/master",
    "description" : "SwaggerHub API Auto Mocking"
  }, {
    "url" : "https://api.digitalriver.com"
  }, {
    "url" : "https://api.digitalriver.com"
  }, {
    "url" : "https://api.digitalriver.com"
  }, {
    "url" : "https://virtserver.swaggerhub.com/DigitalRiverX/Shipments/master",
    "description" : "SwaggerHub API Auto Mocking"
  }, {
    "url" : "https://github.digitalriverws.net/"
  }, {
    "url" : "https://virtserver.swaggerhub.com/DigitalRiverX/ShippingQuotes/master",
    "description" : "SwaggerHub API Auto Mocking"
  }, {
    "url" : "https://github.digitalriverws.net/"
  }, {
    "url" : "https://virtserver.swaggerhub.com/DigitalRiverX/SkuGroups/1.0.1"
  }, {
    "url" : "https://api.digitalriver.com"
  }, {
    "url" : "https://api.digitalriver.com"
  }, {
    "url" : "https://virtserver.swaggerhub.com/DigitalRiverX/Subscriptions/master",
    "description" : "SwaggerHub API Auto Mocking"
  }, {
    "url" : "https://virtserver.swaggerhub.com/DigitalRiverX/Subscriptions/1.0.2",
    "description" : "SwaggerHub API Auto Mocking"
  }, {
    "url" : "https://api.digitalriver.com"
  }, {
    "url" : "https://virtserver.swaggerhub.com/DigitalRiverX/TaxIdentifiers/1.0.0",
    "description" : "SwaggerHub API Auto Mocking"
  }, {
    "url" : "https://virtserver.swaggerhub.com/DigitalRiverX/TaxIdentifiers/1.0.2",
    "description" : "SwaggerHub API Auto Mocking"
  }, {
    "url" : "https://virtserver.swaggerhub.com/DigitalRiverX",
    "description" : "SwaggerHub API Auto Mocking"
  }, {
    "url" : "https://api.digitalriver.com"
  } ],
  "tags" : [ {
    "name" : "Charges",
    "description" : "The [Charge](https://docs.digitalriver.com/digital-river-api/order-management/orders/payment-charges) object contains the details of a charge.\n<a name=\"charge-object\"></a>       \n<br><br>Version:master"
  }, {
    "name" : "Checkouts",
    "description" : "[Checkouts](https://docs.digitalriver.com/digital-river-api/integration-options/checkouts/creating-checkouts) handle an end customers' checkout flow. You can create, retrieve, update and delete individual checkouts, as well as list all checkouts. \n<br><br>Version:master"
  }, {
    "name" : "Country specifications",
    "description" : "[Country specifications](https://docs.digitalriver.com/digital-river-api/integration-options/checkouts/creating-checkouts/country-specs) contain schemas based on the [selling entity](https://docs.digitalriver.com/digital-river-api/integration-options/checkouts/creating-checkouts/selling-entities) and country combination you provide. You can then use these schemas to determine whether an address component or tax identifier is required and also whether it is properly formatted. \n<br><br>Version:master"
  }, {
    "name" : "Customers",
    "description" : "Create, retrieve, list, update and delete customers.  \n<br><br>Version:master"
  }, {
    "name" : "Events",
    "description" : "[Events](https://docs.digitalriver.com/digital-river-api/order-management/events-and-webhooks-1/events-1) notify you when something noteworthy happens in your account. \n<br><br>Version:master"
  }, {
    "name" : "Fees",
    "description" : "The Fee resource represents a [regulatory fee](https://docs.digitalriver.com/digital-river-api/product-management/regulatory-fees). \n<br><br>Version:master"
  }, {
    "name" : "FileLinks",
    "description" : "You can create a [FileLink](https://docs.digitalriver.com/digital-river-api/order-management/files-and-file-links-1/file-links) to share the contents of a File object with your customers. FileLinks contain a URL that can be used to retrieve the contents of the file without authentication. \n    \n<br><br>Version:master"
  }, {
    "name" : "Files",
    "description" : "The [File](https://docs.digitalriver.com/digital-river-api/order-management/files-and-file-links-1/files) resource represents a file hosted on Digital River's servers. The file may have been uploaded by you using the create file request (for example, when uploading a customer tax certificate) or it may have been created by Digital River (for example, a customer invoice).<br><br>Version:master"
  }, {
    "name" : "Fulfillment Cancellations",
    "description" : "When Digital River coordinates a physical fulfillment, you can use the Fulfillment Cancellations API to cancel the delivery of inventory items.<br><br>Version:master"
  }, {
    "name" : "Fulfillment Orders",
    "description" : "When Digital River coordinates an order's physical fulfillment, the Fulfillment Orders API is used to manage the process.<br><br>Version:master"
  }, {
    "name" : "Fulfillment Returns",
    "description" : "When Digital River coordinates an order's physical fulfillment, you can use the Fulfillment Returns API to manage the return process.<br><br>Version:master"
  }, {
    "name" : "Fulfillments",
    "description" : "A [Fulfillment](https://docs.digitalriver.com/digital-river-api/order-management/informing-digital-river-of-a-fulfillment) represents the full or partial fulfillment of a physical or digital order.\n<br><br>Version:master"
  }, {
    "name" : "Inventory items",
    "description" : "An inventory item represents a physical good whose fulfillment Digital River coordinates.<br><br>Version:master"
  }, {
    "name" : "Inventory levels",
    "description" : "An inventory level represents the available quantity of an inventory item at a specific location. Each inventory level belongs to one inventory item and has one location.<br><br>Version:master"
  }, {
    "name" : "Invoices",
    "description" : "An [Invoice](https://docs.digitalriver.com/digital-river-api/integration-options/checkouts/subscriptions/invoices) represents a statement of the amount owed by a customer. They are either generated one-off or periodically from a subscription. You can create, retrieve, update, open, void and delete invoices, as well as list invoices.\n<br><br>Version:master"
  }, {
    "name" : "Logistics Returns",
    "description" : "null<br><br>Version:master"
  }, {
    "name" : "Orders",
    "description" : "[Orders](https://docs.digitalriver.com/digital-river-api/order-management/orders) handle the purchases of end customers. You can create, retrieve, update and list all orders.\n\n<a name=\"order-object\"></a>    \n<br><br>Version:master"
  }, {
    "name" : "Payouts",
    "description" : "A [Payout](https://docs.digitalriver.com/digital-river-api/financial-reporting/payouts) object is created when you receive funds from Digital River or when Digital River has initiated a payout to you. You can retrieve individual payouts, as well as list all payouts. Payouts are made on varying schedules, depending on your country and industry.\n<br><br>Version:master"
  }, {
    "name" : "Plans",
    "description" : "The [Plans](https://docs.digitalriver.com/digital-river-api/integration-options/checkouts/subscriptions/digital-river-coordinated-subscriptions#the-plans-object) object defines the recurring billing behavior in subscriptions.<br><br>Version:master"
  }, {
    "name" : "Refunds",
    "description" : "A [refund](https://docs.digitalriver.com/digital-river-api/order-management/returns-and-refunds-1/refunds) allows you to issue customers full or partial refunds on product costs, shipping expenses, taxes, duties, and fees.<br><br>Version:master"
  }, {
    "name" : "Reservations",
    "description" : "The Reservations API allows you to place a hold on one or more inventory items.<br><br>Version:master"
  }, {
    "name" : "Returns",
    "description" : "A [Return](https://docs.digitalriver.com/digital-river-api/order-management/returns-and-refunds-1/returns) represents the full or partial return of items in an Order. \n<br><br>Version:master"
  }, {
    "name" : "SKUs",
    "description" : "A [SKU](https://docs.digitalriver.com/digital-river-api/product-management/skus#skus) represents a specific product variation. \n<br><br>Version:master"
  }, {
    "name" : "Sales summaries",
    "description" : "A [sales summary](https://docs.digitalriver.com/digital-river-api/financial-reporting/sales-summaries) is created for you daily by Digital River. You can retrieve individual sales summaries, as well as list all sales summaries.\n<br><br>Version:master"
  }, {
    "name" : "Sales transactions",
    "description" : "A [sales transaction](https://docs.digitalriver.com/digital-river-api/financial-reporting/sales-transactions) represents a costed sale. You can retrieve individual sales transactions, as well as list all sales transactions. \n<br><br>Version:master"
  }, {
    "name" : "Shipments",
    "description" : "The Shipments API describes one or more shipments in a fulfillment order.<br><br>Version:master"
  }, {
    "name" : "Shipping Labels",
    "description" : "null<br><br>Version:master"
  }, {
    "name" : "Shipping quotes",
    "description" : "The Shipping Quotes API provides shipping options.<br><br>Version:master"
  }, {
    "name" : "SkuGroups",
    "description" : "A [SKU Group](https://docs.digitalriver.com/digital-river-api/product-management/setting-up-sku-groups) represents a collection of similar SKUs.<br><br>Version:master"
  }, {
    "name" : "Sources",
    "description" : "A [Source](https://docs.digitalriver.com/digital-river-api/payments/payment-sources) represents a customer's payment method and is used by Digital River to create a charge.<br><br>Version:master"
  }, {
    "name" : "Subscriptions",
    "description" : "A [Subscription](https://docs.digitalriver.com/digital-river-api/integration-options/checkouts/subscriptions/digital-river-coordinated-subscriptions#the-subscriptions-object) defines the details of the recurring subscription order.<br><br>Version:master"
  }, {
    "name" : "Tax identifiers",
    "description" : "Tax identifier objects represent a customer's tax identifier.\n<br><br>Version:master"
  }, {
    "name" : "Webhooks",
    "description" : "Use [webhooks](https://docs.digitalriver.com/digital-river-api/order-management/events-and-webhooks-1/webhooks) to be notified about events that happen in a Digital River account.\n\n  Digital River can send webhook events that notify your application any time an event happens in your account. This is especially useful for events that are not triggered by a direct API request. This mechanism is also useful for services that are not directly responsible for making an API request, but still need to know the response from that request.\n  \n  You can register webhook URLs that we will notify any time an event happens in your account. When the event occurs Digital River creates an Event object.\n  \n  This Event object contains all the relevant information about what just happened, including the type of event and the data associated with that event. Digital River then sends the Event object, via an HTTP POST request, to any endpoint URLs that you have defined in your account’s Webhooks settings. You can have Digital River send a single event to many webhook endpoints.\n  \n<br><br>Version:master"
  } ],
  "paths" : {
    "/charges/{id}" : {
      "get" : {
        "tags" : [ "Charges" ],
        "summary" : "Gets a charge by ID",
        "description" : "Retrieves the details of a Charge by supplying its unique identifier.",
        "operationId" : "retrieveCharges",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Charge ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Charge"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/checkouts" : {
      "get" : {
        "tags" : [ "Checkouts" ],
        "summary" : "Returns a list of checkouts",
        "description" : "Get all checkouts.",
        "operationId" : "listCheckouts",
        "parameters" : [ {
          "name" : "createdTime",
          "in" : "query",
          "description" : "A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the createdTime field equals to this timestamp\n  - **gt**&mdash;return values where the createdTime field is after this timestamp\n  - **gte**&mdash;return values where the createdTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the createdTime field is before this timestamp\n  - **lte**&mdash;return values where the createdTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "createdTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "updatedTime",
          "in" : "query",
          "description" : "A filter on the list based on the **updatedTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the updatedTime field equals this timestamp\n  - **gt**&mdash;return values where the updatedTime field is after this timestamp\n  - **gte**&mdash;return values where the updatedTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the updatedTime field is before this timestamp\n  - **lte**&mdash;return values where the updatedTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "updatedTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "Only return objects with these IDs.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "upstreamIds",
          "in" : "query",
          "description" : "Only return objects with these upstreamIds.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "customerId",
          "in" : "query",
          "description" : "Only return checkouts for the given customer",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "applicationId",
          "in" : "query",
          "description" : "Only return checkouts for the given application",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "email",
          "in" : "query",
          "description" : "Only return checkouts with the given email",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "currency",
          "in" : "query",
          "description" : "Only return checkouts in the given currency",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "totalAmount",
          "in" : "query",
          "description" : "A filter on the list based on the checkout **totalAmount** field. The value can be a string or it can be a dictionary with the following options: \n  - **eq** - *return values where the totalAmount field equals to this amount*\n  - **gt** - *return values where the totalAmount field is greater than this amount*\n  - **gte** - *return values where the totalAmount field is greater than or equal to this amount*\n  - **lt** - *return values where the totalAmount field is less than this amount*\n  - **lte** - *return values where the totalAmount field is less than or equal to this amount*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "example" : "totalAmount[gt]=20.99"
        }, {
          "name" : "locale",
          "in" : "query",
          "description" : "Only return checkouts with this locale",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "chargeType",
          "in" : "query",
          "description" : "Only return checkouts with this charge type",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerType",
          "in" : "query",
          "description" : "Only return checkouts with this customer type",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "query",
          "description" : "Only return checkouts with the given subscription identifier",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "browserIp",
          "in" : "query",
          "description" : "Only return checkouts with the given browser IP",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ListCheckoutsResponse",
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Whether or not there are more elements available after this set. If false this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/Checkout"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Checkouts" ],
        "summary" : "Creates a new checkout",
        "description" : "Creates a new checkout.\n",
        "operationId" : "createCheckouts",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CheckoutRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "201 Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Checkout"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/checkouts/{id}" : {
      "get" : {
        "tags" : [ "Checkouts" ],
        "summary" : "Gets a checkout by ID.",
        "description" : "Retrieves the details of a checkout. Supply the unique identifier of the checkout.",
        "operationId" : "retrieveCheckouts",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Checkout ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Checkout"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Checkouts" ],
        "summary" : "Updates an existing checkout",
        "description" : "Updates an existing checkout.",
        "operationId" : "updateCheckouts",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Checkout ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCheckoutRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Checkout"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Checkouts" ],
        "summary" : "Deletes a checkout by ID.",
        "description" : "Permanently deletes a checkout. Supply the unique identifier of the checkout.\n",
        "operationId" : "deleteCheckouts",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Checkout ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "204 No Content"
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/checkouts/{id}/sources/{sourceId}" : {
      "post" : {
        "tags" : [ "Checkouts" ],
        "summary" : "Attach source to checkout.",
        "description" : "Attach source to checkout. Supply the unique identifier of the checkout.",
        "operationId" : "attachSourceToCheckout",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Checkout ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sourceId",
          "in" : "path",
          "description" : "Source ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Source"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Checkouts" ],
        "summary" : "Deletes a checkout association to source.",
        "description" : "Detach source from checkout.",
        "operationId" : "detachSourceToCheckout",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Checkout ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sourceId",
          "in" : "path",
          "description" : "Source ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "204 No Content"
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/country-specs" : {
      "get" : {
        "tags" : [ "Country specifications" ],
        "summary" : "Returns an array containing a country specification",
        "description" : "Gets a country specification.",
        "operationId" : "listCountrySpecifications",
        "parameters" : [ {
          "name" : "country",
          "in" : "query",
          "description" : "Represents the expected billing or ship to country of the customer.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sellingEntity",
          "in" : "query",
          "description" : "Represents the selling entity assigned to the order.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ListCountrySpecsResponse",
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "maxItems" : 1,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/CountrySpecification"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/customers" : {
      "get" : {
        "tags" : [ "Customers" ],
        "summary" : "Returns a list of customers",
        "description" : "Get all customers",
        "operationId" : "listCustomers",
        "parameters" : [ {
          "name" : "createdTime",
          "in" : "query",
          "description" : "A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the createdTime field equals to this timestamp\n  - **gt**&mdash;return values where the createdTime field is after this timestamp\n  - **gte**&mdash;return values where the createdTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the createdTime field is before this timestamp\n  - **lte**&mdash;return values where the createdTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "createdTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "updatedTime",
          "in" : "query",
          "description" : "A filter on the list based on the **updatedTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the updatedTime field equals this timestamp\n  - **gt**&mdash;return values where the updatedTime field is after this timestamp\n  - **gte**&mdash;return values where the updatedTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the updatedTime field is before this timestamp\n  - **lte**&mdash;return values where the updatedTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "updatedTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "email",
          "in" : "query",
          "description" : "Only return customers with the given email",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "Only return customers with the given IDs",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "requestToBeForgotten",
          "in" : "query",
          "description" : "Only return customers where requestToBeForgotten is true or false",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ListCustomersResponse",
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Whether or not there are more elements available after this set. If false this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/Customer"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Customers" ],
        "summary" : "Creates a new customer",
        "description" : "Creates a new customer object",
        "operationId" : "createCustomers",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "201 Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Customer"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/customers/{id}" : {
      "get" : {
        "tags" : [ "Customers" ],
        "summary" : "Gets a customer by ID",
        "description" : "Retrieves the details of a customer by supplying the unique identifier of the customer",
        "operationId" : "retrieveCustomers",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Customer ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Customer"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Customers" ],
        "summary" : "Updates an existing customer",
        "description" : "Updates an existing customer",
        "operationId" : "updateCustomers",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Customer ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCustomerRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Customer"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Customers" ],
        "summary" : "Deletes a customer by ID",
        "description" : "Permanently deletes a customer by supplying the unique identifier of the customer",
        "operationId" : "deleteCustomers",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Customer ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "204 No Content"
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/customers/{id}/sources/{sourceId}" : {
      "post" : {
        "tags" : [ "Customers" ],
        "summary" : "Attaches a source to a customer",
        "description" : "Attaches a source to a customer",
        "operationId" : "createCustomerSource",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Customer ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sourceId",
          "in" : "path",
          "description" : "Source ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Source"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Customers" ],
        "summary" : "Detaches a source from a customer",
        "description" : "Detaches a source from a customer",
        "operationId" : "deleteCustomerSource",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Customer ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sourceId",
          "in" : "path",
          "description" : "Source ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "204 No Content"
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/customers/{id}/tax-identifiers/{taxId}" : {
      "post" : {
        "tags" : [ "Customers" ],
        "summary" : "Attaches a tax identifier to a customer",
        "description" : "Attaches a tax identifier to a customer",
        "operationId" : "createCustomerTaxIdentifier",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Customer ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "taxId",
          "in" : "path",
          "description" : "Tax ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaxIdentifier"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/drop-in/checkout-links" : {
      "get" : {
        "tags" : [ "Drop-in Checkout Links" ],
        "summary" : "List Drop-in checkout links",
        "description" : "Get all checkout links.",
        "operationId" : "ListDropInCheckoutLink",
        "parameters" : [ {
          "name" : "createdTime",
          "in" : "query",
          "description" : "A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the createdTime field equals to this timestamp\n  - **gt**&mdash;return values where the createdTime field is after this timestamp\n  - **gte**&mdash;return values where the createdTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the createdTime field is before this timestamp\n  - **lte**&mdash;return values where the createdTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "createdTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "Only return objects with these IDs.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ListCheckoutLinksResponse",
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Whether or not there are more elements available after this set. If false this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/CheckoutLinkDetails"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Drop-in Checkout Links" ],
        "summary" : "Creates a new Drop-in checkout link",
        "description" : "Creates a new Drop-in checkout link\n",
        "operationId" : "createDropInCheckoutLink",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DropInCheckoutLink"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "201 Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DropInCheckoutLinkResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/drop-in/checkout-links/{id}" : {
      "delete" : {
        "tags" : [ "Drop-in Checkout Links" ],
        "summary" : "Deletes a Drop-in checkout link by ID.",
        "description" : "Deletes the checkout link so it cannot be used after this operation.",
        "operationId" : "deleteDropInCheckoutLinks",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Link ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "204 No Content"
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/drop-in/checkout-sessions" : {
      "post" : {
        "tags" : [ "Drop-in Checkout Sessions" ],
        "summary" : "Creates a new Drop-in checkout session",
        "description" : "Creates a new Drop-in checkout session\n",
        "operationId" : "createDropInCheckoutSession",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DropInCheckoutRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "201 Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateDropInCheckoutTokenResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/checkout/shipping-quotes" : {
      "post" : {
        "tags" : [ "Drop-in Shipping Quotes" ],
        "summary" : "Returns shipping method quotes",
        "description" : "Get all available shipping method quotes",
        "operationId" : "listShippingMethodQuotes",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ShippingMethodQuoteRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ShippingMethodQuoteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      }
    },
    "/checkouts/store-credits" : {
      "post" : {
        "tags" : [ "Store credit callout" ],
        "summary" : "Store credit callout",
        "description" : "Store credit callout\n",
        "operationId" : "storeCreditsCallout",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StoreCreditAuthorizationRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StoreCreditValidationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/checkouts/store-credits/{upstreamId}" : {
      "delete" : {
        "tags" : [ "Store credit callout" ],
        "summary" : "Remove store credit callout",
        "description" : "Store credit callout\n",
        "operationId" : "removeStoreCreditsCallout",
        "parameters" : [ {
          "name" : "upstreamId",
          "in" : "path",
          "description" : "The unique identifier of the store credit",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "204 No Content"
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/events" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Returns a list of events",
        "description" : "Gets events, extending back 30 days, filtered by the specified path parameter.\n",
        "operationId" : "listEvents",
        "parameters" : [ {
          "name" : "createdTime",
          "in" : "query",
          "description" : "A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **gt**&mdash;return values where the createdTime field is after this timestamp\n  - **gte**&mdash;return values where the createdTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the createdTime field is before this timestamp\n  - **lte**&mdash;return values where the createdTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "createdTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Represents a specific event name, or a group of events using * as a wildcard. The returned list is filtered to include only matching events. You may pass either <code>type</code> or <code>types</code>, but not both.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "types",
          "in" : "query",
          "description" : "An array containing less than 20 specific event names. The returned list is filtered to include only matching events. You may pass either <code>type</code> or <code>types</code>, but not both.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK. The response contains a <code>data</code> attribute that consists of an array. Each entry in the array is a separate event object.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ListEventsResponse",
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Indicates whether more elements are available. If <code>false</code> this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/Event"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/events/{id}" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Gets an event by identifier",
        "description" : "Retrieve the details of an event by supplying its unique identifier, which you may have received in a webhook.\n",
        "operationId" : "retrieveEvents",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Event identifer",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK. Returns an event object if a valid identifier was provided.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Event"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/fees" : {
      "get" : {
        "tags" : [ "Fees" ],
        "summary" : "Returns a list of fees",
        "description" : "Get all Fees.",
        "operationId" : "listFees",
        "parameters" : [ {
          "name" : "createdTime",
          "in" : "query",
          "description" : "A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the createdTime field equals to this timestamp\n  - **gt**&mdash;return values where the createdTime field is after this timestamp\n  - **gte**&mdash;return values where the createdTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the createdTime field is before this timestamp\n  - **lte**&mdash;return values where the createdTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "createdTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "updatedTime",
          "in" : "query",
          "description" : "A filter on the list based on the **updatedTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the updatedTime field equals this timestamp\n  - **gt**&mdash;return values where the updatedTime field is after this timestamp\n  - **gte**&mdash;return values where the updatedTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the updatedTime field is before this timestamp\n  - **lte**&mdash;return values where the updatedTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "updatedTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Only return fees of this type.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "skuId",
          "in" : "query",
          "description" : "Only return fees for this sku.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Only return fees in this category.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "country",
          "in" : "query",
          "description" : "Only returns fees for this country.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "Only return objects with these IDs.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ListFeesResponse",
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Indicates whether or not there are more elements available after this set. If <code>false</code> this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/Fee"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Fees" ],
        "summary" : "Creates a fee",
        "description" : "This method adds a new fee to an existing SKU.",
        "operationId" : "createFees",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FeeRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "201 Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Fee"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/fees/{id}" : {
      "get" : {
        "tags" : [ "Fees" ],
        "summary" : "Gets a Fee by identifier",
        "description" : "Retrieves the details of a fee. You must supply the unique identifier of the fee.",
        "operationId" : "retrieveFees",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Fee identifier.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Fee"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Fees" ],
        "summary" : "Updates an existing Fee",
        "description" : "Updates the specified Fee by setting the values of the parameters passed. Any parameters not provided remain unchanged.",
        "operationId" : "updateFees",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Fee identifier",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FeeUpdateRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Fee"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Fees" ],
        "summary" : "Deletes a fee by identifier",
        "description" : "Permanently deletes a fee. Supply the unique identifier of the fee.\n",
        "operationId" : "deleteFees",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Fee ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "204 No Content"
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/file-links" : {
      "get" : {
        "tags" : [ "FileLinks" ],
        "summary" : "Returns a list of file links",
        "description" : "Gets all the file links specified in the request.",
        "operationId" : "listFileLinks",
        "parameters" : [ {
          "name" : "createdTime",
          "in" : "query",
          "description" : "A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **gt**&mdash;return values where the createdTime field is after this timestamp\n  - **gte**&mdash;return values where the createdTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the createdTime field is before this timestamp\n  - **lte**&mdash;return values where the createdTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "createdTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "Only return objects with these IDs.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "fileId",
          "in" : "query",
          "description" : "Only return links with this file identifier.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expired",
          "in" : "query",
          "description" : "Filter links by expired state. By default, all links are returned.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ListFileLinksResponse",
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Indicates whether or not there are more elements available after this set. If false this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/FileLink"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "FileLinks" ],
        "summary" : "Creates a file link",
        "description" : "Creates a new file link object.\n",
        "operationId" : "createFileLinks",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FileLinkRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "201 Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileLink"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/file-links/{id}" : {
      "get" : {
        "tags" : [ "FileLinks" ],
        "summary" : "Gets a file link by identifer",
        "description" : "Retrieves the details of a file link. You must supply the unique identifier of the file link.",
        "operationId" : "retrieveFileLinks",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The identifier of the file link to be retrieved.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileLink"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "FileLinks" ],
        "summary" : "Updates a file link",
        "description" : "Updates an existing file link. Expired links can no longer be updated.",
        "operationId" : "updateFileLinks",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The identifier of the file link to be updated.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateFileLinkRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileLink"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "FileLinks" ],
        "summary" : "Deletes a file link by ID.",
        "description" : "Permanently deletes a file link. Supply the unique identifier of the file link.\n",
        "operationId" : "deleteFileLinks",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "FileLink ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "204 No Content"
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/files" : {
      "get" : {
        "tags" : [ "Files" ],
        "summary" : "Returns a list of files.",
        "description" : "Gets all files specified in the request.",
        "operationId" : "listFiles",
        "parameters" : [ {
          "name" : "createdTime",
          "in" : "query",
          "description" : "A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **gt**&mdash;return values where the createdTime field is after this timestamp\n  - **gte**&mdash;return values where the createdTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the createdTime field is before this timestamp\n  - **lte**&mdash;return values where the createdTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "createdTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "Only return objects with these IDs.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "purpose",
          "in" : "query",
          "description" : "Only return files with this purpose.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fileName",
          "in" : "query",
          "description" : "Only return files with this file name.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "title",
          "in" : "query",
          "description" : "Only return files with this title.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "A filter on the list based on the files **size** field. The value can be a string or it can be a dictionary with the following options: \n  - **gt** - *return values where the size field is greater than this value*\n  - **gte** - *return values where the size field is greater than or equal to this value*\n  - **lt** - *return values where the size field is less than this value*\n  - **lte** - *return values where the size field is less than or equal to this value*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "example" : 10
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Only return files of this type.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ListFilesResponse",
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Indicates whether or not there are more elements available after this set. If false this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/FileObject"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Files" ],
        "summary" : "Creates a file.",
        "description" : "To upload a file to Digital River, you’ll need to send a request of type <code>multipart/form-data</code>. The request should contain the file you would like to upload, as well as the parameters for creating a file. For appliation/JSON request type, a base64 encoded string may be sent in the payload.\n",
        "operationId" : "createFiles",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/FileRequest"
              }
            },
            "application/JSON" : {
              "schema" : {
                "$ref" : "#/components/schemas/FileJsonRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "201 Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileObject"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/files/{id}" : {
      "get" : {
        "tags" : [ "Files" ],
        "summary" : "Gets a file by ID.",
        "description" : "Retrieves the details of a file. You must supply the unique identifier of the file.",
        "operationId" : "retrieveFiles",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "File identifier.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileObject"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Files" ],
        "summary" : "Deletes a file by ID.",
        "description" : "Permanently deletes a file. Supply the unique identifier of the file.\n",
        "operationId" : "deleteFiles",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "File ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "204 No Content"
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/files/{id}/content" : {
      "get" : {
        "tags" : [ "Files" ],
        "summary" : "Gets file content by ID.",
        "description" : "Allows the caller to download the contents of the file associated with File resource. You must supply the unique identifier of the file.",
        "operationId" : "downloadFiles",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "File identifier.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "headers" : {
              "content-disposition" : {
                "description" : "Indicates if the content should be displayed in the browser, or as an attachment.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              },
              "content-type" : {
                "description" : "The media type the resonse is sent in.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileContent"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/fulfillment-cancellations" : {
      "get" : {
        "tags" : [ "Fulfillment Cancellations" ],
        "summary" : "Returns a list of fulfillment cancellations",
        "description" : "Get all fulfillment cancellations.",
        "operationId" : "listFulfillmentCancellations",
        "parameters" : [ {
          "name" : "createdTime",
          "in" : "query",
          "description" : "A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the createdTime field equals to this timestamp\n  - **gt**&mdash;return values where the createdTime field is after this timestamp\n  - **gte**&mdash;return values where the createdTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the createdTime field is before this timestamp\n  - **lte**&mdash;return values where the createdTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "createdTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "Only return objects with these IDs.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "upstreamIds",
          "in" : "query",
          "description" : "Only return objects with these upstreamIds.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "Only return objects in the given state",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fulfillmentOrderId",
          "in" : "query",
          "description" : "The fulfillment order to retrieve cancellations for.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inventoryItemId",
          "in" : "query",
          "description" : "The inventory item id to retrieve cancellations for.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ListGlobalFulfillmentCancellationsResponse",
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Whether or not there are more elements available after this set. If false this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/GlobalFulfillmentCancellationResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Fulfillment Cancellations" ],
        "summary" : "Creates a cancellation",
        "description" : "Cancels all or part of a previously created fulfillment order.\n",
        "operationId" : "createFulfillmentCancellations",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GlobalFulfillmentCancellationRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "201 Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlobalFulfillmentCancellationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      }
    },
    "/fulfillment-cancellations/{id}" : {
      "get" : {
        "tags" : [ "Fulfillment Cancellations" ],
        "summary" : "Gets a fulfillment cancellation by its unique identifier.",
        "description" : "Retrieves the details of a fulfillment cancellation. Supply the unique identifier of the cancellation.",
        "operationId" : "retrieveFulfillmentCancellations",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cancellation ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlobalFulfillmentCancellationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      }
    },
    "/fulfillment-orders" : {
      "get" : {
        "tags" : [ "Fulfillment Orders" ],
        "summary" : "Returns a list of Fulfillment orders.",
        "description" : "Get all Fulfillment orders.",
        "operationId" : "listFulfillmentOrders",
        "parameters" : [ {
          "name" : "createdTime",
          "in" : "query",
          "description" : "A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the createdTime field equals to this timestamp\n  - **gt**&mdash;return values where the createdTime field is after this timestamp\n  - **gte**&mdash;return values where the createdTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the createdTime field is before this timestamp\n  - **lte**&mdash;return values where the createdTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "createdTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "updatedTime",
          "in" : "query",
          "description" : "A filter on the list based on the **updatedTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the updatedTime field equals this timestamp\n  - **gt**&mdash;return values where the updatedTime field is after this timestamp\n  - **gte**&mdash;return values where the updatedTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the updatedTime field is before this timestamp\n  - **lte**&mdash;return values where the updatedTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "updatedTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "Only return objects with these IDs.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "upstreamIds",
          "in" : "query",
          "description" : "Only return objects with these upstreamIds.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/GlobalFulfillmentOrder"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Fulfillment Orders" ],
        "summary" : "Creates a new Fulfillment order",
        "description" : "Creates a new Fulfillment order.\n",
        "operationId" : "createFulfillmentOrders",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GlobalFulfillmentOrderRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "201 Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlobalFulfillmentOrder"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      }
    },
    "/fulfillment-orders/{id}" : {
      "get" : {
        "tags" : [ "Fulfillment Orders" ],
        "summary" : "Gets a Fulfillment order by ID.",
        "description" : "Retrieves the details of a Fulfillment order. You must supply the unique identifier of the Fulfillment order.",
        "operationId" : "retrieveFulfillmentOrders",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Fulfillment order identifier.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlobalFulfillmentOrder"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      }
    },
    "/fulfillment-returns" : {
      "get" : {
        "tags" : [ "Fulfillment Returns" ],
        "summary" : "Returns a list of fulfillment returns",
        "description" : "Get all returns.",
        "operationId" : "listFulfillmentReturns",
        "parameters" : [ {
          "name" : "createdTime",
          "in" : "query",
          "description" : "A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the createdTime field equals to this timestamp\n  - **gt**&mdash;return values where the createdTime field is after this timestamp\n  - **gte**&mdash;return values where the createdTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the createdTime field is before this timestamp\n  - **lte**&mdash;return values where the createdTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "createdTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "Only return objects with these IDs.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "upstreamIds",
          "in" : "query",
          "description" : "Only return objects with these upstreamIds.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "Only return objects in the given state",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fulfillmentOrderId",
          "in" : "query",
          "description" : "The fulfillment order to retrieve returns for.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inventoryItemId",
          "in" : "query",
          "description" : "The inventory item id to retrieve returns for.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ListGlobalFulfillmentReturnsResponse",
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Whether or not there are more elements available after this set. If false this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/GlobalFulfillmentReturnResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Fulfillment Returns" ],
        "summary" : "Creates a return",
        "description" : "Returns all or part of a previously created fulfillment order.",
        "operationId" : "createFulfillmentReturns",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GlobalFulfillmentReturnRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "201 Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlobalFulfillmentReturnResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      }
    },
    "/fulfillment-returns/{id}" : {
      "get" : {
        "tags" : [ "Fulfillment Returns" ],
        "summary" : "Gets a fulfillment return by its unique identifier",
        "description" : "Retrieves a fulfillment return. Supply the unique identifier of the return.",
        "operationId" : "retrieveFulfillmentReturns",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Return ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GlobalFulfillmentReturnResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      }
    },
    "/fulfillments/{id}" : {
      "get" : {
        "tags" : [ "Fulfillments" ],
        "summary" : "Gets a Fulfillment by unique identifier",
        "description" : "Retrieves the details of a Fulfillment.",
        "operationId" : "retrieveFulfillments",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of a Fulfillment.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FulfillmentOrder"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/fulfillments" : {
      "get" : {
        "tags" : [ "Fulfillments" ],
        "summary" : "Returns a list of Fulfillments.",
        "description" : "Gets all the Fulfillments specified in the request.",
        "operationId" : "listFulfillments",
        "parameters" : [ {
          "name" : "createdTime",
          "in" : "query",
          "description" : "A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **gt**&mdash;return values where the createdTime field is after this timestamp\n  - **gte**&mdash;return values where the createdTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the createdTime field is before this timestamp\n  - **lte**&mdash;return values where the createdTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "createdTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "Only return objects with these IDs.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "orderId",
          "in" : "query",
          "description" : "The identifier of the order associated with the Fulfillment you want to retrieve.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "skuId",
          "in" : "query",
          "description" : "The identifier of the SKU associated with the Fulfillments you want to retrieve.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trackingCompany",
          "in" : "query",
          "description" : "The tracking company associated with the Fulfillments you want to retrieve.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trackingNumber",
          "in" : "query",
          "description" : "The tracking number associated with the Fulfillments you want to retrieve.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ListFulfillmentsResponse",
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Whether or not there are more elements available after this set. If false this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/Fulfillment"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request  Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Fulfillments" ],
        "summary" : "Creates a Fulfillment",
        "description" : "Fulfills and/or cancels all or part of an order.",
        "operationId" : "createFulfillments",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FulfillmentRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "201 Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Fulfillment"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/inventory-items" : {
      "get" : {
        "tags" : [ "Inventory items" ],
        "summary" : "Returns a list of inventory items.",
        "description" : "Get all inventory items.",
        "operationId" : "listInventoryItems",
        "parameters" : [ {
          "name" : "createdTime",
          "in" : "query",
          "description" : "A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the createdTime field equals to this timestamp\n  - **gt**&mdash;return values where the createdTime field is after this timestamp\n  - **gte**&mdash;return values where the createdTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the createdTime field is before this timestamp\n  - **lte**&mdash;return values where the createdTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "createdTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "updatedTime",
          "in" : "query",
          "description" : "A filter on the list based on the **updatedTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the updatedTime field equals this timestamp\n  - **gt**&mdash;return values where the updatedTime field is after this timestamp\n  - **gte**&mdash;return values where the updatedTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the updatedTime field is before this timestamp\n  - **lte**&mdash;return values where the updatedTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "updatedTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "Only return objects with these IDs.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "partNumber",
          "in" : "query",
          "description" : "The partNumber associated with the inventory items you want to retrieve.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "manufacturerId",
          "in" : "query",
          "description" : "The manufacturer identifier associated with the inventory items you want to retrieve.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Indicates whether or not there are more elements available after this set. If false this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/InventoryItem"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Inventory items" ],
        "summary" : "Creates an inventory item.",
        "description" : "Creates an inventory item.\n",
        "operationId" : "createInventoryItems",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InventoryItemRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "201 Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InventoryItem"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      }
    },
    "/inventory-items/{id}" : {
      "get" : {
        "tags" : [ "Inventory items" ],
        "summary" : "Gets an inventory item by ID.",
        "description" : "Retrieves the details of an inventory item. You must supply the unique identifier of the inventory item.",
        "operationId" : "retrieveInventoryItems",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Inventory item identifier.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InventoryItem"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Inventory items" ],
        "summary" : "Updates an inventory item.",
        "description" : "Updates an inventory item.\n",
        "operationId" : "updateInventoryItems",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Inventory item identifier.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InventoryItemUpdateRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "201 Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InventoryItem"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Inventory items" ],
        "summary" : "Deletes an inventory item by ID.",
        "description" : "Permanently deletes an inventory item. Supply the unique identifier of the inventory item.\n",
        "operationId" : "deleteInventoryItems",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Inventory item identifier",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "204 No Content"
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      }
    },
    "/inventory-levels" : {
      "get" : {
        "tags" : [ "Inventory levels" ],
        "summary" : "Returns a list of inventory levels.",
        "description" : "Get all Inventory levels.",
        "operationId" : "listInventoryLevels",
        "parameters" : [ {
          "name" : "updatedTime",
          "in" : "query",
          "description" : "A filter on the list based on the **updatedTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **gt**&mdash;return values where the updatedTime field is after this timestamp\n  - **gte**&mdash;return values where the updatedTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the updatedTime field is before this timestamp\n  - **lte**&mdash;return values where the updatedTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "updatedTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "inventoryItemIds",
          "in" : "query",
          "description" : "Only return inventory levels for these inventory items.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "shipToCountry",
          "in" : "query",
          "description" : "Only return inventory levels for locations that ship to this country.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "available",
          "in" : "query",
          "description" : "Only return available (i.e. greater than zero) inventory levels.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/InventoryLevel"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      }
    },
    "/invoices" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "summary" : "Returns a list of invoices",
        "description" : "Gets all invoices.",
        "operationId" : "listInvoices",
        "parameters" : [ {
          "name" : "createdTime",
          "in" : "query",
          "description" : "A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the createdTime field equals to this timestamp\n  - **gt**&mdash;return values where the createdTime field is after this timestamp\n  - **gte**&mdash;return values where the createdTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the createdTime field is before this timestamp\n  - **lte**&mdash;return values where the createdTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "createdTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "updatedTime",
          "in" : "query",
          "description" : "A filter on the list based on the **updatedTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the updatedTime field equals this timestamp\n  - **gt**&mdash;return values where the updatedTime field is after this timestamp\n  - **gte**&mdash;return values where the updatedTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the updatedTime field is before this timestamp\n  - **lte**&mdash;return values where the updatedTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "updatedTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "Only return objects with these IDs.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "upstreamIds",
          "in" : "query",
          "description" : "Only return objects with these upstreamIds.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "totalAmount",
          "in" : "query",
          "description" : "A filter on the list based on the **totalAmount** field. The value can be a string or it can be a dictionary with the following options: \n      - **eq**-return values where the amount field equals to this amount\n      - **gt**-return values where the amount field is greater than this amount\n      - **gte**-return values where the amount field is greater than or equal to this amount\n      - **lt**-return values where the amount field is less than this amount\n      - **lte**-return values where the amount field is less than or equal to this amount\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "example" : "totalAmount[gt]=20.99"
        }, {
          "name" : "customerId",
          "in" : "query",
          "description" : "Only return invoices for this customer",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "applicationId",
          "in" : "query",
          "description" : "Only return checkouts for the given application",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "currency",
          "in" : "query",
          "description" : "Only return invoices in this currency",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "Only return invoices in this state",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "skuId",
          "in" : "query",
          "description" : "Only return invoices for this sku",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "price",
          "in" : "query",
          "description" : "A filter on the list based on the invoice item **price** field. The value can be a string or it can be a dictionary with the following options: \n  - **eq** - *return values where an invoice item price field equals to this amount*\n  - **gt** - *return values where an invoice item price field is greater than this amount*\n  - **gte** - *return values where an invoice item price field is greater than or equal to this amount*\n  - **lt** - *return values where an invoice item price field is less than this amount*\n  - **lte** - *return values where an invoice item price field is less than or equal to this amount*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "example" : 20.99
        }, {
          "name" : "attemptCount",
          "in" : "query",
          "description" : "A filter on the list based on the invoice **attemptCount** field. The value can be a string or it can be a dictionary with the following options: \n  - **eq** - *return values where the attemptCount field equals to this amount*\n  - **gt** - *return values where the attemptCount field is greater than this amount*\n  - **gte** - *return values where the attemptCount field is greater than or equal to this amount*\n  - **lt** - *return values where the attemptCount field is less than this amount*\n  - **lte** - *return values where the attemptCount field is less than or equal to this amount*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "example" : 2
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Whether or not there are more elements available after this set. If <code>false</code> this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/Invoice"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Invoices" ],
        "summary" : "Creates a new invoice",
        "description" : "This request [creates a new invoice](https://docs.digitalriver.com/digital-river-api/checkouts-and-orders/invoices#creating-an-invoice) object.",
        "operationId" : "createInvoices",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "201 Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/invoices/{id}" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "summary" : "Gets an invoice by identifier",
        "description" : "Retrieves the details of an invoice by supplying its unique identifier.",
        "operationId" : "retrieveInvoices",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the Invoice.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Invoices" ],
        "summary" : "Updates an existing invoice",
        "description" : "Updates an existing invoice.",
        "operationId" : "updateInvoices",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the Invoice.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateInvoiceRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Invoices" ],
        "summary" : "Deletes an invoice.",
        "description" : "This requrest [deletes an invoice](https://docs.digitalriver.com/digital-river-api/checkouts-and-orders/invoices#deleting-an-invoice).",
        "operationId" : "deleteInvoices",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the Invoice.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "204 No Content"
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/invoices/{id}/open" : {
      "post" : {
        "tags" : [ "Invoices" ],
        "summary" : "Opens an existing invoice",
        "description" : "This request [opens an invoice](https://docs.digitalriver.com/digital-river-api/checkouts-and-orders/invoices#opening-an-invoice).",
        "operationId" : "openInvoices",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the Invoice.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/invoices/{id}/void" : {
      "post" : {
        "tags" : [ "Invoices" ],
        "summary" : "Voids an existing invoice",
        "description" : "This request [voids an invoice](https://docs.digitalriver.com/digital-river-api/checkouts-and-orders/invoices#voiding-an-invoice).",
        "operationId" : "voidInvoices",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the invoice.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/invoices/{id}/sources/{sourceId}" : {
      "post" : {
        "tags" : [ "Invoices" ],
        "summary" : "Attach source to invoice.",
        "description" : "Attach source to invoice. Supply the unique identifier of the invoice.",
        "operationId" : "attachSourceToInvoice",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Invoice ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sourceId",
          "in" : "path",
          "description" : "Source ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Source"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Invoices" ],
        "summary" : "Deletes a invoice association to source.",
        "description" : "Detach source from invoice.",
        "operationId" : "detachSourceToInvoice",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Invoice ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sourceId",
          "in" : "path",
          "description" : "Source ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "204 No Content"
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      }
    },
    "/logistics-returns" : {
      "get" : {
        "tags" : [ "Logistics Returns" ],
        "summary" : "Returns a list of returns",
        "description" : "Get all returns.",
        "operationId" : "listLogisticsReturns",
        "parameters" : [ {
          "name" : "createdTime",
          "in" : "query",
          "description" : "A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the createdTime field equals to this timestamp\n  - **gt**&mdash;return values where the createdTime field is after this timestamp\n  - **gte**&mdash;return values where the createdTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the createdTime field is before this timestamp\n  - **lte**&mdash;return values where the createdTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "createdTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "Only return objects with these IDs.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "orderId",
          "in" : "query",
          "description" : "The order to retrieve returns for.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The type of return.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "rmaNumber",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ListReturnsResponse",
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Whether or not there are more elements available after this set. If false this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/ReturnResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Logistics Returns" ],
        "summary" : "Creates a return",
        "description" : "Returns all or part of a previously created order.\n",
        "operationId" : "createLogisticsReturns",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReturnRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "201 Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReturnResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/logistics-returns/{id}" : {
      "get" : {
        "tags" : [ "Logistics Returns" ],
        "summary" : "Gets a return by ID",
        "description" : "Retrieves the details of a return. Supply the unique identifier of the return.",
        "operationId" : "retrieveLogisticsReturns",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Return ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReturnResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/orders" : {
      "get" : {
        "tags" : [ "Orders" ],
        "summary" : "Returns a list of orders.",
        "description" : "Get all orders.",
        "operationId" : "listOrders",
        "parameters" : [ {
          "name" : "createdTime",
          "in" : "query",
          "description" : "A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the createdTime field equals to this timestamp\n  - **gt**&mdash;return values where the createdTime field is after this timestamp\n  - **gte**&mdash;return values where the createdTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the createdTime field is before this timestamp\n  - **lte**&mdash;return values where the createdTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "createdTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "updatedTime",
          "in" : "query",
          "description" : "A filter on the list based on the **updatedTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the updatedTime field equals this timestamp\n  - **gt**&mdash;return values where the updatedTime field is after this timestamp\n  - **gte**&mdash;return values where the updatedTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the updatedTime field is before this timestamp\n  - **lte**&mdash;return values where the updatedTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "updatedTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "Only return objects with these IDs.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "upstreamIds",
          "in" : "query",
          "description" : "Only return objects with these upstreamIds.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "totalAmount",
          "in" : "query",
          "description" : "A filter on the list based on the **totalAmount** field. The value can be a string or it can be a dictionary with the following options: \n      - **eq**-return values where the amount field equals to this amount\n      - **gt**-return values where the amount field is greater than this amount\n      - **gte**-return values where the amount field is greater than or equal to this amount\n      - **lt**-return values where the amount field is less than this amount\n      - **lte**-return values where the amount field is less than or equal to this amount\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "example" : "totalAmount[gt]=20.99"
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "Only return objects in the given state",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerId",
          "in" : "query",
          "description" : "Only return orders for the given customer",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "checkoutId",
          "in" : "query",
          "description" : "Only return orders for the given checkout",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "applicationId",
          "in" : "query",
          "description" : "Only return orders for the given application",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "email",
          "in" : "query",
          "description" : "Only return orders with the given email",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "currency",
          "in" : "query",
          "description" : "Only return orders in the given currency",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "skuId",
          "in" : "query",
          "description" : "Only return orders containing this sku",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "in_review",
          "in" : "query",
          "description" : "A filter on the list based on the order **stateTransitions** in_review field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq** - *return values where the stateTransitions in_review field equals to this timestamp*\n  - **gt** - *return values where the stateTransitions in_review field is after this timestamp*\n  - **gte** - *return values where the stateTransitions in_review field is after or equal to this timestamp*\n  - **lt** - *return values where the stateTransitions in_review field is before this timestamp*\n  - **lte** - *return values where the stateTransitions in_review field is before or equal to this timestamp*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "2018-03-25T20:36:00Z"
        }, {
          "name" : "pending_payment",
          "in" : "query",
          "description" : "A filter on the list based on the order **stateTransitions** pending_payment field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq** - *return values where the stateTransitions pending_payment field equals to this timestamp*\n  - **gt** - *return values where the stateTransitions pending_payment field is after this timestamp*\n  - **gte** - *return values where the stateTransitions pending_payment field is after or equal to this timestamp*\n  - **lt** - *return values where the stateTransitions pending_payment field is before this timestamp*\n  - **lte** - *return values where the stateTransitions pending_payment field is before or equal to this timestamp*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "2018-03-25T20:36:00Z"
        }, {
          "name" : "accepted",
          "in" : "query",
          "description" : "A filter on the list based on the order **stateTransitions** accepted field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq** - *return values where the stateTransitions accepted field equals to this timestamp*\n  - **gt** - *return values where the stateTransitions accepted field is after this timestamp*\n  - **gte** - *return values where the stateTransitions accepted field is after or equal to this timestamp*\n  - **lt** - *return values where the stateTransitions accepted field is before this timestamp*\n  - **lte** - *return values where the stateTransitions accepted field is before or equal to this timestamp*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "2018-03-25T20:36:00Z"
        }, {
          "name" : "blocked",
          "in" : "query",
          "description" : "A filter on the list based on the order **stateTransitions** blocked field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq** - *return values where the stateTransitions blocked field equals to this timestamp*\n  - **gt** - *return values where the stateTransitions blocked field is after this timestamp*\n  - **gte** - *return values where the stateTransitions blocked field is after or equal to this timestamp*\n  - **lt** - *return values where the stateTransitions blocked field is before this timestamp*\n  - **lte** - *return values where the stateTransitions blocked field is before or equal to this timestamp*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "2018-03-25T20:36:00Z"
        }, {
          "name" : "cancelled",
          "in" : "query",
          "description" : "A filter on the list based on the order **stateTransitions** cancelled field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq** - *return values where the stateTransitions cancelled field equals to this timestamp*\n  - **gt** - *return values where the stateTransitions cancelled field is after this timestamp*\n  - **gte** - *return values where the stateTransitions cancelled field is after or equal to this timestamp*\n  - **lt** - *return values where the stateTransitions cancelled field is before this timestamp*\n  - **lte** - *return values where the stateTransitions cancelled field is before or equal to this timestamp*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "2018-03-25T20:36:00Z"
        }, {
          "name" : "fulfilled",
          "in" : "query",
          "description" : "A filter on the list based on the order **stateTransitions** fulfilled field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq** - *return values where the stateTransitions fulfilled field equals to this timestamp*\n  - **gt** - *return values where the stateTransitions fulfilled field is after this timestamp*\n  - **gte** - *return values where the stateTransitions fulfilled field is after or equal to this timestamp*\n  - **lt** - *return values where the stateTransitions fulfilled field is before this timestamp*\n  - **lte** - *return values where the stateTransitions fulfilled field is before or equal to this timestamp*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "2018-03-25T20:36:00Z"
        }, {
          "name" : "complete",
          "in" : "query",
          "description" : "A filter on the list based on the order **stateTransitions** complete field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq** - *return values where the stateTransitions complete field equals to this timestamp*\n  - **gt** - *return values where the stateTransitions complete field is after this timestamp*\n  - **gte** - *return values where the stateTransitions complete field is after or equal to this timestamp*\n  - **lt** - *return values where the stateTransitions complete field is before this timestamp*\n  - **lte** - *return values where the stateTransitions complete field is before or equal to this timestamp*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "2018-03-25T20:36:00Z"
        }, {
          "name" : "returned",
          "in" : "query",
          "description" : "A filter on the list based on the order **stateTransitions** returned field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq** - *return values where the stateTransitions returned field equals to this timestamp*\n  - **gt** - *return values where the stateTransitions returned field is after this timestamp*\n  - **gte** - *return values where the stateTransitions returned field is after or equal to this timestamp*\n  - **lt** - *return values where the stateTransitions returned field is before this timestamp*\n  - **lte** - *return values where the stateTransitions returned field is before or equal to this timestamp*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "2018-03-25T20:36:00Z"
        }, {
          "name" : "fraudState",
          "in" : "query",
          "description" : "Only return orders in the given fraudState",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fraudStateTransitions.blocked",
          "in" : "query",
          "description" : "A filter on the list based on the order **fraudStateTransitions** blocked field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq** - *return values where the fraudStateTransitions blocked field equals to this timestamp*\n  - **gt** - *return values where the fraudStateTransitions blocked field is after this timestamp*\n  - **gte** - *return values where the fraudStateTransitions blocked field is after or equal to this timestamp*\n  - **lt** - *return values where the fraudStateTransitions blocked field is before this timestamp*\n  - **lte** - *return values where the fraudStateTransitions blocked field is before or equal to this timestamp*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "2018-03-25T20:36:00Z"
        }, {
          "name" : "fraudStateTransitions.review_opened",
          "in" : "query",
          "description" : "A filter on the list based on the order **fraudStateTransitions** review_opened field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq** - *return values where the fraudStateTransitions review_opened field equals to this timestamp*\n  - **gt** - *return values where the fraudStateTransitions review_opened field is after this timestamp*\n  - **gte** - *return values where the fraudStateTransitions review_opened field is after or equal to this timestamp*\n  - **lt** - *return values where the fraudStateTransitions review_opened field is before this timestamp*\n  - **lte** - *return values where the fraudStateTransitions review_opened field is before or equal to this timestamp*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "2018-03-25T20:36:00Z"
        }, {
          "name" : "fraudStateTransitions.passed",
          "in" : "query",
          "description" : "A filter on the list based on the order **fraudStateTransitions** passed field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq** - *return values where the fraudStateTransitions passed field equals to this timestamp*\n  - **gt** - *return values where the fraudStateTransitions passed field is after this timestamp*\n  - **gte** - *return values where the fraudStateTransitions passed field is after or equal to this timestamp*\n  - **lt** - *return values where the fraudStateTransitions passed field is before this timestamp*\n  - **lte** - *return values where the fraudStateTransitions passed field is before or equal to this timestamp*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "2018-03-25T20:36:00Z"
        }, {
          "name" : "browserIp",
          "in" : "query",
          "description" : "Only return checkouts with this browser IP",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "chargeType",
          "in" : "query",
          "description" : "Only return orders with this charge type",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriptionId",
          "in" : "query",
          "description" : "Only return orders with this subscription identifier",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "refundedAmount",
          "in" : "query",
          "description" : "Only return orders with this refunded amount",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locale",
          "in" : "query",
          "description" : "Only return checkouts with this locale",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerType",
          "in" : "query",
          "description" : "Only return checkouts with this customer type",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ListOrdersResponse",
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Whether or not there are more elements available after this set. If false this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/Order"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Orders" ],
        "summary" : "Creates a new order.",
        "description" : "Creates a new order. For more details, refer to [Converting a checkout to an order](https://docs.digitalriver.com/digital-river-api/order-management/orders/creating-and-updating-an-order#creating-an-order-with-the-checkout-identifier).\n",
        "operationId" : "createOrders",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrderRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "201 Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/orders/{id}" : {
      "get" : {
        "tags" : [ "Orders" ],
        "summary" : "Gets an order by ID.",
        "description" : "Retrieves the details of an order. Supply the unique identifier of the order you would like to retrieve.",
        "operationId" : "retrieveOrders",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Order ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Orders" ],
        "summary" : "Updates an existing order.",
        "description" : "Updates an  existing order.",
        "operationId" : "updateOrders",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Order ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateOrderRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/payouts" : {
      "get" : {
        "tags" : [ "Payouts" ],
        "summary" : "Returns a list of payouts",
        "description" : "Get all payouts.",
        "operationId" : "listPayouts",
        "parameters" : [ {
          "name" : "createdTime",
          "in" : "query",
          "description" : "A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **gt**&mdash;return values where the createdTime field is after this timestamp\n  - **gte**&mdash;return values where the createdTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the createdTime field is before this timestamp\n  - **lte**&mdash;return values where the createdTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "createdTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "Only return objects with these IDs.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 5000, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 5000,
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "payoutTime",
          "in" : "query",
          "description" : "A filter on the list based on the payout **payoutTime** field. The value can be a string with an ISO-601 UTC format datetime or it can be a dictionary with the following options: \n  - **gt** - *return values where the payoutTime field is after this timestamp*\n  - **gte** - *return values where the payoutTime field is after or equal to this timestamp*\n  - **lt** - *return values where the payoutTime field is before this timestamp*\n  - **lte** - *return values where the payoutTime field is before or equal to this timestamp*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "2018-03-25T20:36:00Z"
        }, {
          "name" : "payerId",
          "in" : "query",
          "description" : "Only return payouts with this payer identifier",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "payerName",
          "in" : "query",
          "description" : "Only return payouts with this payer name",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "payeeId",
          "in" : "query",
          "description" : "Only return payouts with this payee identifier",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "payeeName",
          "in" : "query",
          "description" : "Only return payouts with this payee name",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "currency",
          "in" : "query",
          "description" : "Only return payouts in the given currency",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "amount",
          "in" : "query",
          "description" : "A filter on the list based on the payout **amount** field. The value can be a string or it can be a dictionary with the following options: \n  - **gt** - *return values where the amount field is greater than this amount*\n  - **gte** - *return values where the amount field is greater than or equal to this amount*\n  - **lt** - *return values where the amount field is less than this amount*\n  - **lte** - *return values where the amount field is less than or equal to this amount*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "example" : 20.99
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ListPayoutsResponse",
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Whether or not there are more elements available after this set. If false this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/Payout"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/payouts/{id}" : {
      "get" : {
        "tags" : [ "Payouts" ],
        "summary" : "Gets a payout by ID.",
        "description" : "Retrieves the details of a payout. Supply the unique identifier of the payout.",
        "operationId" : "retrievePayouts",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Payout ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Payout"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/payouts/{id}/transactions" : {
      "get" : {
        "tags" : [ "Payout transactions" ],
        "summary" : "Lists the payout transactions for a payout.",
        "description" : "Retrieves the details of the payout transactions for a payout. Supply the unique identifier of the payout.",
        "operationId" : "listPayoutTransactions",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Payout ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 5000, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 5000,
            "minimum" : 1,
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ListPayoutTransactionResponse",
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Whether or not there are more elements available after this set. If false this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/PayoutTransaction"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/plans" : {
      "get" : {
        "tags" : [ "Plans" ],
        "summary" : "Returns a list of Plans",
        "description" : "Gets the Plans specified in the request.",
        "operationId" : "listPlans",
        "parameters" : [ {
          "name" : "state",
          "in" : "query",
          "description" : "The state associated with the Plans you want to retrieve.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "interval",
          "in" : "query",
          "description" : "The billing interval associated with the Plans you want to retrieve.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xzy, your subsequent calls can include endingBefore=xzy in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xzy, your subsequent calls can include startingAfter=xzy in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ListPlansResponse",
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Indicates whether or not there are more elements available after this set. If false this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/Plan"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Plans" ],
        "summary" : "Creates a Plan",
        "description" : "Submit this request to create a Plan.",
        "operationId" : "createPlans",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PlanRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "201 Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Plan"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/plans/{id}" : {
      "get" : {
        "tags" : [ "Plans" ],
        "summary" : "Gets a Plan by ID",
        "description" : "Retrieves the details of a Plan.",
        "operationId" : "retrievePlans",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Plan identifier.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Plan"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Plans" ],
        "summary" : "Updates a Plan",
        "description" : "Updates the specified Plan.",
        "operationId" : "updatePlans",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Plan identifier.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdatePlanRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Plan"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Plans" ],
        "summary" : "Deletes a Plan by ID",
        "description" : "Permanently deletes a Plan. In the request, send the plan's unique identifier as a path parameter. Only plans in a <code>draft</code> can be deleted.",
        "operationId" : "deletePlans",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Plan identifier",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "204 No Content"
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/refunds" : {
      "get" : {
        "tags" : [ "Refunds" ],
        "summary" : "Returns a list of refunds",
        "description" : "Get all refunds.",
        "operationId" : "listRefunds",
        "parameters" : [ {
          "name" : "createdTime",
          "in" : "query",
          "description" : "A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the createdTime field equals to this timestamp\n  - **gt**&mdash;return values where the createdTime field is after this timestamp\n  - **gte**&mdash;return values where the createdTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the createdTime field is before this timestamp\n  - **lte**&mdash;return values where the createdTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "createdTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "Only return objects in the given state",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "Only return refunds with the given IDs",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "orderId",
          "in" : "query",
          "description" : "The order to retrieve refunds for.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "skuId",
          "in" : "query",
          "description" : "The sku to retrieve refunds for.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reason",
          "in" : "query",
          "description" : "Retrieve refunds with this reason.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "failureReason",
          "in" : "query",
          "description" : "Retrieve refunds that failed for this reason.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "refundedAmount",
          "in" : "query",
          "description" : "A filter on the list based on the **amount** field. The value can be a string or it can be a dictionary with the following options: \n  - **eq** - *return values where the amount field equals to this amount*\n  - **gt** - *return values where the amount field is greater than this amount*\n  - **gte** - *return values where the amount field is greater than or equal to this amount*\n  - **lt** - *return values where the amount field is less than this amount*\n  - **lte** - *return values where the amount field is less than or equal to this amount*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "example" : 20.99
        }, {
          "name" : "amount",
          "in" : "query",
          "description" : "A filter on the list based on the **amount** field. The value can be a string or it can be a dictionary with the following options: \n  - **eq** - *return values where the amount field equals to this amount*\n  - **gt** - *return values where the amount field is greater than this amount*\n  - **gte** - *return values where the amount field is greater than or equal to this amount*\n  - **lt** - *return values where the amount field is less than this amount*\n  - **lte** - *return values where the amount field is less than or equal to this amount*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "example" : 20.99
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ListRefundsResponse",
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Whether or not there are more elements available after this set. If false this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/OrderRefund"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Refunds" ],
        "summary" : "Creates a refund for an order.",
        "description" : "Refunds all all or part of an order charge.\n",
        "operationId" : "createRefunds",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RefundRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "201 Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderRefund"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/refunds/{id}" : {
      "get" : {
        "tags" : [ "Refunds" ],
        "summary" : "Gets a refund by ID.",
        "description" : "Retrieves the details of a refund. Supply the unique identifier of the refund.",
        "operationId" : "retrieveRefunds",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Refund ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderRefund"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Refunds" ],
        "summary" : "Updates a refund for an order or a specific order charge.",
        "description" : "Updates the specified refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged. This request only accepts metadata as an argument.",
        "operationId" : "updateRefunds",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Refund ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateRefundRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderRefund"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/reservations/{id}" : {
      "delete" : {
        "tags" : [ "Reservations" ],
        "summary" : "Cancels a reservation by ID.",
        "description" : "Cancels a reservation. Supply the unique identifier of the reservation.\n",
        "operationId" : "deleteReservations",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Reservation identifier",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "204 No Content"
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      }
    },
    "/reservations" : {
      "post" : {
        "tags" : [ "Reservations" ],
        "summary" : "Create a reservation",
        "description" : "Create a reservation to hold inventory items in a fulfillment order.",
        "operationId" : "createReservations",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReservationRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "201 Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Reservation"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      }
    },
    "/returns" : {
      "get" : {
        "tags" : [ "Returns" ],
        "summary" : "Returns a list of returns",
        "description" : "Get all returns.",
        "operationId" : "listReturns",
        "parameters" : [ {
          "name" : "createdTime",
          "in" : "query",
          "description" : "A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the createdTime field equals to this timestamp\n  - **gt**&mdash;return values where the createdTime field is after this timestamp\n  - **gte**&mdash;return values where the createdTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the createdTime field is before this timestamp\n  - **lte**&mdash;return values where the createdTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "createdTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "Only return objects with these IDs.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "Only return objects in the given state",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderId",
          "in" : "query",
          "description" : "The order to retrieve returns for.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "skuId",
          "in" : "query",
          "description" : "The sku to retrieve returns for.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ListReturnsResponse",
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Whether or not there are more elements available after this set. If false this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/ReturnsResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Returns" ],
        "summary" : "Creates a return",
        "description" : "Returns all or part of a previously created order.\n",
        "operationId" : "createReturns",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReturnsRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "201 Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateReturnsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/returns/{id}" : {
      "get" : {
        "tags" : [ "Returns" ],
        "summary" : "Gets a return by ID",
        "description" : "Retrieves the details of a return. Supply the unique identifier of the return.",
        "operationId" : "retrieveReturns",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Return ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReturnsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Returns" ],
        "summary" : "Updates an existing return",
        "description" : "Updates an  existing return.",
        "operationId" : "updateReturns",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Return ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateReturnsRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReturnsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/sales-summaries" : {
      "get" : {
        "tags" : [ "Sales summaries" ],
        "summary" : "Returns a list of sales summaries",
        "description" : "Get all sales summaries.",
        "operationId" : "listSalesSummaries",
        "parameters" : [ {
          "name" : "createdTime",
          "in" : "query",
          "description" : "A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **gt**&mdash;return values where the createdTime field is after this timestamp\n  - **gte**&mdash;return values where the createdTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the createdTime field is before this timestamp\n  - **lte**&mdash;return values where the createdTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "createdTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "Only return objects with these IDs.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 5000, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 5000,
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "salesClosingTime",
          "in" : "query",
          "description" : "A filter on the list based on the sales summary **salesClosingTime** field. The value can be a string with an ISO-601 UTC format datetime or it can be a dictionary with the following options: \n  - **gt** - *return values where the salesClosingTime field is after this timestamp*\n  - **gte** - *return values where the salesClosingTime field is after or equal to this timestamp*\n  - **lt** - *return values where the salesClosingTime field is before this timestamp*\n  - **lte** - *return values where the salesClosingTime field is before or equal to this timestamp*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "2018-03-25T20:36:00Z"
        }, {
          "name" : "paid",
          "in" : "query",
          "description" : "Only return sales summaries which have been paid",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "payoutId",
          "in" : "query",
          "description" : "Only return sales summaries with this payout identifier",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "currency",
          "in" : "query",
          "description" : "Only return sales summaries in the given currency",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "amount",
          "in" : "query",
          "description" : "A filter on the list based on the sales summaries **amount** field. The value can be a string or it can be a dictionary with the following options: \n  - **gt** - *return values where the amount field is greater than this amount*\n  - **gte** - *return values where the amount field is greater than or equal to this amount*\n  - **lt** - *return values where the amount field is less than this amount*\n  - **lte** - *return values where the amount field is less than or equal to this amount*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "example" : 20.99
        }, {
          "name" : "payerId",
          "in" : "query",
          "description" : "Only return sales summaries with this payer identifier",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "payerName",
          "in" : "query",
          "description" : "Only return sales summaries with this payer name",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "payeeId",
          "in" : "query",
          "description" : "Only return sales summaries with this payee identifier",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "payeeName",
          "in" : "query",
          "description" : "Only return sales summaries with this payee name",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ListSalesSummariesResponse",
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Whether or not there are more elements available after this set. If false this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/SalesSummary"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/sales-summaries/{id}" : {
      "get" : {
        "tags" : [ "Sales summaries" ],
        "summary" : "Gets a sales summary by ID.",
        "description" : "Retrieves the details of a sales summary. Supply the unique identifier of the sales summary.",
        "operationId" : "retrieveSalesSummaries",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Sales summary ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SalesSummary"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/sales-transactions" : {
      "get" : {
        "tags" : [ "Sales transactions" ],
        "summary" : "Returns a list of sales transactions",
        "description" : "Get all sales transactions.",
        "operationId" : "listSalesTransactions",
        "parameters" : [ {
          "name" : "createdTime",
          "in" : "query",
          "description" : "A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **gt**&mdash;return values where the createdTime field is after this timestamp\n  - **gte**&mdash;return values where the createdTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the createdTime field is before this timestamp\n  - **lte**&mdash;return values where the createdTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "createdTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "Only return objects with these IDs.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 5000, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 5000,
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "saleTime",
          "in" : "query",
          "description" : "A filter on the list based on the sales transaction **saleTime** field. The value can be a string with an ISO-601 UTC format datetime or it can be a dictionary with the following options: \n  - **gt** - *return values where the saleTime field is after this timestamp*\n  - **gte** - *return values where the saleTime field is after or equal to this timestamp*\n  - **lt** - *return values where the saleTime field is before this timestamp*\n  - **lte** - *return values where the saleTime field is before or equal to this timestamp*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "2018-03-25T20:36:00Z"
        }, {
          "name" : "salesSummaryId",
          "in" : "query",
          "description" : "Only return sales transactions with this sales summary identifier",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderUpstreamId",
          "in" : "query",
          "description" : "Only return sales transactions with this order upstream identifier",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "paymentType",
          "in" : "query",
          "description" : "Only return sales transactions with this payment type",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Only return sales transactions of this type",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "sale", "replacement", "replacement_refund", "replacement_return", "fraud_chargeback", "non_fraud_chargeback", "refund", "return", "fraud_detection", "declined_settlement" ]
          }
        }, {
          "name" : "currency",
          "in" : "query",
          "description" : "Only return sales transactions in this currency",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderId",
          "in" : "query",
          "description" : "Only return sales transactions with this order identifier",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "skuId",
          "in" : "query",
          "description" : "Only return sales transactions with this sku identifier",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "quantity",
          "in" : "query",
          "description" : "A filter on the list based on the sales transaction **quantity** field. The value can be a string or it can be a dictionary with the following options: \n  - **gt** - *return values where the quantity field is greater than this amount*\n  - **gte** - *return values where the quantity field is greater than or equal to this amount*\n  - **lt** - *return values where the quantity field is less than this amount*\n  - **lte** - *return values where the quantity field is less than or equal to this amount*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "example" : 2
        }, {
          "name" : "amount",
          "in" : "query",
          "description" : "A filter on the list based on the sales transaction **amount** field. The value can be a string or it can be a dictionary with the following options: \n  - **gt** - *return values where the amount field is greater than this amount*\n  - **gte** - *return values where the amount field is greater than or equal to this amount*\n  - **lt** - *return values where the amount field is less than this amount*\n  - **lte** - *return values where the amount field is less than or equal to this amount*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "example" : 20.99
        }, {
          "name" : "digitalRiverShare",
          "in" : "query",
          "description" : "A filter on the list based on the sales transaction **Digital River share** field. The value can be a string or it can be a dictionary with the following options: \n  - **gt** - *return values where the Digital River share field is greater than this amount*\n  - **gte** - *return values where the Digital River share field is greater than or equal to this amount*\n  - **lt** - *return values where the Digital River share field is less than this amount*\n  - **lte** - *return values where the Digital River share field is less than or equal to this amount*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "example" : 20.99
        }, {
          "name" : "payoutAmount",
          "in" : "query",
          "description" : "A filter on the list based on the sales transaction **payoutAmount** field. The value can be a string or it can be a dictionary with the following options: \n  - **gt** - *return values where the payoutAmount field is greater than this amount*\n  - **gte** - *return values where the payoutAmount field is greater than or equal to this amount*\n  - **lt** - *return values where the payoutAmount field is less than this amount*\n  - **lte** - *return values where the payoutAmount field is less than or equal to this amount*\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "example" : 20.99
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ListSalesTransactionsResponse",
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Whether or not there are more elements available after this set. If false this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/SalesTransaction"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/sales-transactions/{id}" : {
      "get" : {
        "tags" : [ "Sales transactions" ],
        "summary" : "Gets a sales transaction by ID.",
        "description" : "Retrieves the details of a sales transaction. Supply the unique identifier of the sales transaction.",
        "operationId" : "retrieveSalesTransactions",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Sales transaction ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SalesTransaction"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/shipments" : {
      "get" : {
        "tags" : [ "Shipments" ],
        "summary" : "Returns a list of shipments",
        "description" : "Get all shipments",
        "operationId" : "listShipments",
        "parameters" : [ {
          "name" : "createdTime",
          "in" : "query",
          "description" : "A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the createdTime field equals to this timestamp\n  - **gt**&mdash;return values where the createdTime field is after this timestamp\n  - **gte**&mdash;return values where the createdTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the createdTime field is before this timestamp\n  - **lte**&mdash;return values where the createdTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "createdTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "updatedTime",
          "in" : "query",
          "description" : "A filter on the list based on the **updatedTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the updatedTime field equals this timestamp\n  - **gt**&mdash;return values where the updatedTime field is after this timestamp\n  - **gte**&mdash;return values where the updatedTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the updatedTime field is before this timestamp\n  - **lte**&mdash;return values where the updatedTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "updatedTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "Only return objects with these IDs.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Indicates whether or not there are more elements available after this set. If false this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/Shipment"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      }
    },
    "/shipments/{id}" : {
      "get" : {
        "tags" : [ "Shipments" ],
        "summary" : "Gets a shipment by ID.",
        "description" : "Retrieves the details of a shipment. You must supply the unique identifier of the shipment.",
        "operationId" : "retrieveShipments",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Shipment identifier.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Shipment"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      }
    },
    "/shipping-labels" : {
      "get" : {
        "tags" : [ "Shipping Labels" ],
        "summary" : "Returns shipping label",
        "description" : "List shipping labels",
        "operationId" : "listShippingLabel",
        "parameters" : [ {
          "name" : "createdTime",
          "in" : "query",
          "description" : "A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the createdTime field equals to this timestamp\n  - **gt**&mdash;return values where the createdTime field is after this timestamp\n  - **gte**&mdash;return values where the createdTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the createdTime field is before this timestamp\n  - **lte**&mdash;return values where the createdTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "createdTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "Only return objects with these IDs.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "orderId",
          "in" : "query",
          "description" : "The order to retrieve returns for.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ListShippingLabel",
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Whether or not there are more elements available after this set. If false this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/ShippingLabelResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Shipping Labels" ],
        "summary" : "Returns shipping label",
        "description" : "Create a shipping label",
        "operationId" : "createShippingLabel",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ShippingLabelRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ShippingLabelResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      }
    },
    "/shipping-labels/{id}" : {
      "get" : {
        "tags" : [ "Shipping Labels" ],
        "summary" : "Gets a shipping label by ID.",
        "description" : "Retrieves the details of a shipping label. Supply the unique identifier of the shipping label.",
        "operationId" : "retrieveShippingLabels",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Shipping Label ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ShippingLabelResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      }
    },
    "/shipping-quotes" : {
      "post" : {
        "tags" : [ "Shipping quotes" ],
        "summary" : "Returns shipping quotes",
        "description" : "Get all available shipping quotes",
        "operationId" : "postShippingQuotes",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ShippingQuoteRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ShippingQuoteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      }
    },
    "/sku-groups" : {
      "get" : {
        "tags" : [ "SkuGroups" ],
        "summary" : "Returns a list of SKU Groups",
        "description" : "Gets the SKU Groups specified in the request.",
        "operationId" : "listSkuGroups",
        "parameters" : [ {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "Only return objects with these IDs.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ListSkuGroupsResponse",
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Indicates whether or not there are more elements available after this set. If false this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/SkuGroup"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/skus" : {
      "get" : {
        "tags" : [ "SKUs" ],
        "summary" : "Returns a list of SKUs",
        "description" : "Gets the SKUs specified in the request.",
        "operationId" : "listSkus",
        "parameters" : [ {
          "name" : "createdTime",
          "in" : "query",
          "description" : "A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the createdTime field equals to this timestamp\n  - **gt**&mdash;return values where the createdTime field is after this timestamp\n  - **gte**&mdash;return values where the createdTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the createdTime field is before this timestamp\n  - **lte**&mdash;return values where the createdTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "createdTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "updatedTime",
          "in" : "query",
          "description" : "A filter on the list based on the **updatedTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the updatedTime field equals this timestamp\n  - **gt**&mdash;return values where the updatedTime field is after this timestamp\n  - **gte**&mdash;return values where the updatedTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the updatedTime field is before this timestamp\n  - **lte**&mdash;return values where the updatedTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "updatedTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "Only return objects with these IDs.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "eccn",
          "in" : "query",
          "description" : "The Export Control Classification Number (ECCN) associated with the SKUs you want to retrieve.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "partNumber",
          "in" : "query",
          "description" : "The partNumber associated with the SKUs you want to retrieve.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "hsCode",
          "in" : "query",
          "description" : "The hsCode associated with the SKUs you want to retrieve.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "taxCode",
          "in" : "query",
          "description" : "The taxCode associated with the SKUs you want to retrieve.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "skuGroupId",
          "in" : "query",
          "description" : "An unique identifier for the sku-group, can be client provided or DR system generated.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ListSkusResponse",
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Indicates whether or not there are more elements available after this set. If false this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/Sku"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "SKUs" ],
        "summary" : "Creates a SKU",
        "description" : "Submit this request to create a SKU.",
        "operationId" : "createSkus",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SkuRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "201 Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Sku"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/skus/{id}" : {
      "get" : {
        "tags" : [ "SKUs" ],
        "summary" : "Gets a SKU by ID",
        "description" : "Retrieves the details of a SKU. You must supply the unique identifier of the SKU.",
        "operationId" : "retrieveSkus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SKU identifier.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Sku"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "SKUs" ],
        "summary" : "Upserts a SKU",
        "description" : "Submit this request to upsert the specified SKU.",
        "operationId" : "upsertSkus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The SKU identifier.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SkuUpsertRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Sku"
                }
              }
            }
          },
          "201" : {
            "description" : "201 Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Sku"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "SKUs" ],
        "summary" : "Updates a SKU",
        "description" : "Updates the specified SKU by setting the values of the parameters passed. Any parameters not provided remain unchanged.",
        "operationId" : "updateSkus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The SKU identifier.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateSkuRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Sku"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "SKUs" ],
        "summary" : "Deletes a SKU by ID",
        "description" : "Permanently deletes a SKU. Supply the unique identifier of the SKU.\n",
        "operationId" : "deleteSkus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "SKU identifier",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "204 No Content"
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/sources/{id}" : {
      "get" : {
        "tags" : [ "Sources" ],
        "summary" : "Gets a source by identifier",
        "description" : "Retrieve the details of a source by supplying its unique identifier.",
        "operationId" : "retrieveSources",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Source identifier",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Source"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/sources" : {
      "post" : {
        "tags" : [ "Sources" ],
        "summary" : "Posts a source",
        "description" : "Create a secondary source.",
        "operationId" : "createSources",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreditSource"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Source"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/subscriptions" : {
      "get" : {
        "tags" : [ "Subscriptions" ],
        "summary" : "Returns a list of Subscriptions",
        "description" : "Gets the Subscriptions specified in the request.",
        "operationId" : "listSubscriptions",
        "parameters" : [ {
          "name" : "planId",
          "in" : "query",
          "description" : "The identifier of the plan associated with the subscriptions you want to retrieve.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "The state associated with the subscriptions you want to retrieve.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerId",
          "in" : "query",
          "description" : "The identifer of the subscribing customer of the subscriptions you want to retrieve.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xzy, your subsequent calls can include endingBefore=xzy in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xzy, your subsequent calls can include startingAfter=xzy in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ListSubscriptionsResponse",
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Indicates whether or not there are more elements available after this set. If false this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/Subscription"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/subscriptions/{id}" : {
      "get" : {
        "tags" : [ "Subscriptions" ],
        "summary" : "Gets a Subscription by ID",
        "description" : "Retrieves the details of a Subscription.",
        "operationId" : "retrieveSubscriptions",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Subscription identifier.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Subscriptions" ],
        "summary" : "Updates a Subscription",
        "description" : "Updates the specified Subscription.",
        "operationId" : "updateSubscriptions",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The Subscription identifier.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateSubscriptionRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Subscriptions" ],
        "summary" : "Deletes a Subscription by ID",
        "description" : "Permanently deletes a subscription. Supply the unique identifier of the Subscription.",
        "operationId" : "deleteSubscriptions",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Subscription identifier",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "204 No Content"
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/tax-identifiers" : {
      "get" : {
        "tags" : [ "Tax identifiers" ],
        "summary" : "Returns a list of tax identifiers",
        "description" : "Get all tax identifiers.",
        "operationId" : "listTaxIdentifiers",
        "parameters" : [ {
          "name" : "createdTime",
          "in" : "query",
          "description" : "A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the createdTime field equals to this timestamp\n  - **gt**&mdash;return values where the createdTime field is after this timestamp\n  - **gte**&mdash;return values where the createdTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the createdTime field is before this timestamp\n  - **lte**&mdash;return values where the createdTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "createdTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "updatedTime",
          "in" : "query",
          "description" : "A filter on the list based on the **updatedTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options: \n  - **eq**&mdash;return values where the updatedTime field equals this timestamp\n  - **gt**&mdash;return values where the updatedTime field is after this timestamp\n  - **gte**&mdash;return values where the updatedTime field is after or equal to this timestamp\n  - **lt**&mdash;return values where the updatedTime field is before this timestamp\n  - **lte**&mdash;return values where the updatedTime field is before or equal to this timestamp\n",
          "required" : false,
          "style" : "deepObject",
          "explode" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "example" : "updatedTime[gt]=2020-09-22T12:09:44Z"
        }, {
          "name" : "endingBefore",
          "in" : "query",
          "description" : "A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore=xyz in order to fetch the previous page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startingAfter",
          "in" : "query",
          "description" : "A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter=xyz in order to fetch the next page of the list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer"
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "Only return objects with these IDs.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "customerId",
          "in" : "query",
          "description" : "Only return tax identifiers for this customer.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Only return tax identifiers of this type.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "value",
          "in" : "query",
          "description" : "Only return tax identifiers with this value.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "Only return tax identifiers in this state.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pending",
          "in" : "query",
          "description" : "A filter on the list based on the tax identifier **stateTransitions** pending field. The value can be a string with an ISO-601 UTC format datetime or it can be a dictionary with the following options: \n  - **gt** - *return values where the stateTransitions pending field is after this timestamp*\n  - **gte** - *return values where the stateTransitions pending field is after or equal to this timestamp*\n  - **lt** - *return values where the stateTransitions pending field is before this timestamp*\n  - **lte** - *return values where the stateTransitions pending field is before or equal to this timestamp*\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "verified",
          "in" : "query",
          "description" : "A filter on the list based on the tax identifier **stateTransitions** verified field. The value can be a string with an ISO-601 UTC format datetime or it can be a dictionary with the following options: \n  - **gt** - *return values where the stateTransitions verified field is after this timestamp*\n  - **gte** - *return values where the stateTransitions verified field is after or equal to this timestamp*\n  - **lt** - *return values where the stateTransitions verified field is before this timestamp*\n  - **lte** - *return values where the stateTransitions verified field is before or equal to this timestamp*\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "not_valid",
          "in" : "query",
          "description" : "A filter on the list based on the tax identifier **stateTransitions** not_valid field. The value can be a string with an ISO-601 UTC format datetime or it can be a dictionary with the following options: \n  - **gt** - *return values where the stateTransitions not_valid field is after this timestamp*\n  - **gte** - *return values where the stateTransitions not_valid field is after or equal to this timestamp*\n  - **lt** - *return values where the stateTransitions not_valid field is before this timestamp*\n  - **lte** - *return values where the stateTransitions not_valid field is before or equal to this timestamp*\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "hasMore" : {
                      "type" : "boolean",
                      "description" : "Indicates whether or not there are more elements available after this set. If false this set represents the end of the list.",
                      "example" : true
                    },
                    "data" : {
                      "maxItems" : 100,
                      "minItems" : 0,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/CustomerTaxIdentifier"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Tax identifiers" ],
        "summary" : "Creates a new tax identifier",
        "description" : "Creates a new tax identifier object.\n",
        "operationId" : "createTaxIdentifiers",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaxIdentifierRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "201 Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerTaxIdentifier"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/tax-identifiers/{id}" : {
      "get" : {
        "tags" : [ "Tax identifiers" ],
        "summary" : "Gets a tax identifier by ID.",
        "description" : "Retrieves the details of a tax identifier. You must supply the unique identifier of the tax identifier.",
        "operationId" : "retrieveTaxIdentifiers",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Tax identifier ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerTaxIdentifier"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Tax identifiers" ],
        "summary" : "Deletes a tax identifier by ID.",
        "description" : "Permanently deletes a tax identifier. You must supply the unique identifier of the tax identifier.\n",
        "operationId" : "deleteTaxIdentifiers",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Tax identifier ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "204 No Content"
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/webhooks" : {
      "get" : {
        "tags" : [ "Webhooks" ],
        "summary" : "Returns a list of webhooks",
        "description" : "Get all webhooks.\n",
        "operationId" : "listWebhooks",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "A string containing a specific webhook endpoint name, or a group of events using * as a wildcard. The list will be filtered to include only webhooks with a matching webhook property.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "types",
          "in" : "query",
          "description" : "An array of up to 20 strings containing specific event names. The list will be filtered to include only events with a matching event property. You may pass either type or types, but not both.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK. A dictionary with a data property that contains an array of up to limit webhooks. Each entry in the array is a separate webhook object. If no more webhooks are available, the resulting array will be empty. This request should never return an error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "maxItems" : 100,
                  "minItems" : 0,
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Webhook"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Webhooks" ],
        "summary" : "Creates a new webhook",
        "description" : "Creates a new webhook\n",
        "operationId" : "createWebhooks",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WebhookRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "201 Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/webhooks/{id}" : {
      "get" : {
        "tags" : [ "Webhooks" ],
        "summary" : "Gets a webhook endpoint by ID.",
        "description" : "Retrieves the details of a webhook endpoint. Supply the unique identifier of the webhook endpoint.\n",
        "operationId" : "retrieveWebhooks",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Webhook ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 OK. Returns an event object if a valid identifier was provided. All events share a common structure. The only property that will differ is the data property. The data dictionary's values will be the same as retrieving the same object directly from the API. For example, a charge.created event will have the same information as retrieving the relevant charge would.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "404 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Webhooks" ],
        "summary" : "Deletes a webhook endpoint by ID.",
        "description" : "Permanently deletes a webhook endpoint. Supply the unique identifier of the webhook.\n",
        "operationId" : "deleteWebhooks",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Webhook ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "204 No Content"
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "Webhooks" ],
        "summary" : "Updates an existing webhook endpoint",
        "description" : "Updates a  existing webhook endpoint.\n",
        "operationId" : "updateWebhooks",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Webhook ID.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WebhookUpdateRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "200 OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400" : {
            "description" : "400 Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "401" : {
            "description" : "401 Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "403" : {
            "description" : "403 Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "404" : {
            "description" : "401 Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "405" : {
            "description" : "405 Method Not Allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "406" : {
            "description" : "406 Not Acceptable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "408" : {
            "description" : "408 Request Timeout",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "409" : {
            "description" : "409 Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "429" : {
            "description" : "429 Too Many Requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "500" : {
            "description" : "500 Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "502" : {
            "description" : "502 Bad Gateway Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "503" : {
            "description" : "503 Service Unavailable Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          },
          "504" : {
            "description" : "504 Gateway Timeout Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "Owner" : {
        "title" : "Owner",
        "required" : [ "address" ],
        "type" : "object",
        "properties" : {
          "firstName" : {
            "type" : "string",
            "example" : "John"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Smith"
          },
          "email" : {
            "type" : "string",
            "example" : "jsmith@digitalriver.com"
          },
          "organization" : {
            "type" : "string",
            "description" : "The organization of the payment source owner.",
            "nullable" : true,
            "example" : "Digital River"
          },
          "upstreamId" : {
            "type" : "string",
            "example" : "55129-54673"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "additionalAddressInfo" : {
            "$ref" : "#/components/schemas/AdditionalAddressInfo"
          }
        },
        "description" : "The owner of the payment source."
      },
      "ReturnItem" : {
        "title" : "ReturnItem",
        "required" : [ "quantity" ],
        "type" : "object",
        "properties" : {
          "itemId" : {
            "type" : "string",
            "description" : "The identifier of the item.",
            "example" : "99341140336"
          },
          "productDetails" : {
            "$ref" : "#/components/schemas/ProductDetails"
          },
          "quantity" : {
            "type" : "integer",
            "description" : "The number of items.",
            "example" : 1
          },
          "condition" : {
            "type" : "string",
            "description" : "Condition of the returned goods.",
            "example" : "broken"
          }
        }
      },
      "Customer" : {
        "title" : "Customer",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the customer.",
            "example" : "5823594809"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "The time at which the customer was created.",
            "format" : "date-time",
            "example" : "2018-04-25T20:36:00Z"
          },
          "email" : {
            "type" : "string",
            "description" : "The customer email address.",
            "format" : "email",
            "example" : "jsmith@digitalriver.com"
          },
          "shipping" : {
            "$ref" : "#/components/schemas/Shipping"
          },
          "defaultSourceId" : {
            "type" : "string",
            "description" : "The identifier of the default payment source attached to this customer.",
            "format" : "uuid"
          },
          "sources" : {
            "type" : "array",
            "description" : "An array of Source objects attached to this Customer.",
            "items" : {
              "$ref" : "#/components/schemas/Source"
            }
          },
          "taxIdentifiers" : {
            "type" : "array",
            "description" : "A list of [tax identifiers](https://docs.digitalriver.com/digital-river-api/checkouts-and-orders/customers/setting-tax-related-attributes#tax-identifiers) for this customer.",
            "items" : {
              "$ref" : "#/components/schemas/CustomerTaxIdentifier"
            }
          },
          "taxCertificates" : {
            "type" : "array",
            "description" : "A list of tax certificates for this customer.",
            "items" : {
              "$ref" : "#/components/schemas/TaxCertificate"
            }
          },
          "requestToBeForgotten" : {
            "type" : "boolean",
            "description" : "If true, indicates this customer has requested to be forgotten.",
            "example" : true,
            "default" : false
          },
          "type" : {
            "$ref" : "#/components/schemas/CustomerType_1"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "locale" : {
            "type" : "string",
            "description" : "A locale designator that combines the two-letter ISO 639-1 language code with the ISO 3166-1 alpha-2 country code.",
            "example" : "en_US"
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "Usually used to disable the customer. The default is <code>true</code>. If <code>false</code>, attempts to create orders for the customer will fail.",
            "nullable" : true,
            "example" : true
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value <code>true</code> if the object exists in live mode or the value <code>false</code> if the object exists in test mode.",
            "example" : false
          },
          "updatedTime" : {
            "type" : "string",
            "description" : "Time at which the customer was last updated.",
            "format" : "date-time",
            "example" : "2018-04-25T20:36:00Z"
          }
        }
      },
      "Ideal" : {
        "title" : "Ideal",
        "type" : "object"
      },
      "GlobalFulfillmentAddress" : {
        "title" : "GlobalFulfillmentAddress",
        "required" : [ "city", "country", "line1", "postalCode", "state" ],
        "type" : "object",
        "properties" : {
          "line1" : {
            "type" : "string",
            "nullable" : true,
            "example" : "10380 Bren Rd W"
          },
          "line2" : {
            "type" : "string"
          },
          "city" : {
            "type" : "string",
            "nullable" : true,
            "example" : "Minnetonka"
          },
          "postalCode" : {
            "type" : "string",
            "nullable" : true,
            "example" : "55129"
          },
          "state" : {
            "type" : "string",
            "nullable" : true,
            "example" : "MN"
          },
          "country" : {
            "type" : "string",
            "example" : "US"
          }
        }
      },
      "SkuRequest" : {
        "title" : "SkuRequest",
        "required" : [ "countryOfOrigin", "eccn", "name", "taxCode" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of a SKU.",
            "example" : "5823594809"
          },
          "eccn" : {
            "type" : "string",
            "description" : "The export control classification number.",
            "example" : "EAR99"
          },
          "hsCode" : {
            "type" : "string",
            "description" : "The international and US Harmonized System code (sometimes referred to as the Harmonized Tariff Schedule).",
            "example" : "6404.20"
          },
          "skuGroupId" : {
            "type" : "string",
            "description" : "The unique identifier of the Sku Group.",
            "example" : "5823594809"
          },
          "partNumber" : {
            "type" : "string",
            "description" : "The manufacturer's part number.",
            "example" : "SWG1224J10L"
          },
          "manufacturerId" : {
            "type" : "string",
            "description" : "The unique identifier",
            "example" : "654123"
          },
          "managedFulfillment" : {
            "type" : "string",
            "description" : "Signifies the product is physically fulfilled by Digital River.",
            "enum" : [ "DRGlobalFulfillment" ]
          },
          "taxCode" : {
            "type" : "string",
            "description" : "The designated tax code.",
            "example" : "4323.310_A"
          },
          "name" : {
            "type" : "string",
            "description" : "The product’s name.",
            "example" : "Athena Womens Running Shoes"
          },
          "description" : {
            "type" : "string",
            "description" : "A description of the product.",
            "example" : "Athena Womens Running Shoes"
          },
          "image" : {
            "type" : "string",
            "description" : "An image of the product.",
            "example" : "https://imageurl.com"
          },
          "url" : {
            "type" : "string",
            "description" : "A product url.",
            "example" : "https://producturl.com"
          },
          "weight" : {
            "type" : "number",
            "description" : "The weight of the product measured in the unit specified by weightUnit.",
            "format" : "double",
            "example" : 20.5
          },
          "weightUnit" : {
            "type" : "string",
            "description" : "The unit of measurement applied to the weight.",
            "example" : "oz",
            "enum" : [ "oz", "lb", "g", "kg" ]
          },
          "countryOfOrigin" : {
            "type" : "string",
            "description" : "A two-letter Alpha-2 country code as described in the ISO 3166 international standard.",
            "example" : "US"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "ReservationInventoryItem" : {
        "title" : "ReservationInventoryItem",
        "required" : [ "inventoryItemId", "quantity" ],
        "type" : "object",
        "properties" : {
          "inventoryItemId" : {
            "type" : "string",
            "description" : "The unique identifier of an inventory item.",
            "nullable" : true,
            "example" : "9234276173"
          },
          "quantity" : {
            "type" : "integer",
            "nullable" : true,
            "example" : 1
          },
          "allowOversell" : {
            "type" : "boolean",
            "description" : "If true, customers are allowed to reserve inventory of the item when it is out of stock.",
            "nullable" : true,
            "example" : false
          }
        }
      },
      "FulfillmentRequest" : {
        "title" : "FulfillmentRequest",
        "required" : [ "items", "orderId" ],
        "type" : "object",
        "properties" : {
          "orderId" : {
            "type" : "string",
            "description" : "The identifier of the Order associated with this Fulfillment.",
            "example" : "5678901234"
          },
          "shipmentId" : {
            "type" : "string",
            "description" : "The unique identifier associated to the shipment",
            "example" : "321765"
          },
          "items" : {
            "type" : "array",
            "description" : "An array of items to fulfill and/or cancel.",
            "items" : {
              "$ref" : "#/components/schemas/FulfillmentRequestItem"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "trackingCompany" : {
            "type" : "string",
            "description" : "The name of the tracking company.",
            "example" : "Fedex"
          },
          "trackingNumber" : {
            "type" : "string",
            "description" : "The tracking number provided by the shipping company.",
            "example" : "5678901234"
          },
          "trackingUrl" : {
            "type" : "string",
            "description" : "The URL of the tracking page for the fulfillment.",
            "example" : "http://www.digitalriver.com?code=5678901234"
          }
        }
      },
      "EventData" : {
        "title" : "EventData",
        "type" : "object",
        "properties" : {
          "object" : {
            "type" : "object",
            "description" : "In most cases, contains the same values as the corresponding object. For example, a <code>charge.created</code> event contains a <code>data.object</code> that is identical to the Charge object that triggered the event."
          },
          "previousAttributes" : {
            "type" : "object",
            "description" : "Contains the names of the attributes that have changed and their previous values."
          }
        }
      },
      "DropInCheckoutLinkResponse" : {
        "title" : "DropInCheckoutLinkResponse",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The link identifier.",
            "example" : "894d4fed-1097-4d1e-991a-814069000cb1"
          },
          "sessionId" : {
            "type" : "string",
            "description" : "The session identifier.",
            "example" : "eyJjdHkiOiJKV1QiLCJlbmMiOiJBMTI4R0NNIiw"
          },
          "link" : {
            "type" : "string",
            "description" : "The domain of the hosted link",
            "example" : "https://store.digitalriver.com/dropin-checkout/v1/modal?linkId=894d4fed-1097-4d1e-991a-814069000cb1&token=pk_45971nf84m0he7792nmgmhi83mhu49sh"
          }
        }
      },
      "GlobalFulfillmentCancellationResponse" : {
        "title" : "GlobalFulfillmentCancellationResponse",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the fulfillment cancellation",
            "readOnly" : true,
            "example" : "ret_5823594809"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "The time at which the fulfillment cancellation was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "fulfillmentOrderId" : {
            "type" : "string",
            "description" : "The unique identifier of the fulfillment order associated with the fulfillment cancellation.",
            "readOnly" : true,
            "example" : "ord_6645940010"
          },
          "upstreamId" : {
            "type" : "string",
            "description" : "The unique identifier of the upstream order.",
            "readOnly" : true,
            "example" : "ord_6645940010"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GlobalFulfillmentCancellationItemResponse"
            }
          },
          "reason" : {
            "type" : "string",
            "description" : "The reason for the cancellation.",
            "example" : "requested_by_customer"
          },
          "state" : {
            "type" : "string",
            "description" : "An enumeration indicating the state of the fulfillment cancellation.",
            "example" : "pending",
            "enum" : [ "pending", "accepted", "rejected" ]
          },
          "livemode" : {
            "type" : "boolean",
            "description" : "Has the value true if the object exists in live mode or the value false if the object exists in test mode.",
            "example" : false
          }
        }
      },
      "RefundItemRequest" : {
        "title" : "RefundItemRequest",
        "required" : [ "itemId" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "The type of the refund.",
            "example" : "shipping",
            "enum" : [ "shipping", "fees", "duty" ]
          },
          "itemId" : {
            "type" : "string",
            "description" : "The identifier of the item.",
            "nullable" : true
          },
          "skuId" : {
            "type" : "string",
            "description" : "The identifier of the SKU.",
            "nullable" : true,
            "example" : "sku_5823594809"
          },
          "quantity" : {
            "type" : "integer",
            "description" : "The number of items to refund.",
            "nullable" : true,
            "example" : 1
          },
          "amount" : {
            "minimum" : 0.0,
            "type" : "number",
            "description" : "The amount to refund. You are required to provide this value or <code>items[].percent</code>.",
            "format" : "double",
            "example" : 5.95
          },
          "percent" : {
            "maximum" : 100.0,
            "minimum" : 0.01,
            "type" : "number",
            "description" : "The percent to refund. You are required to provide this value or <code>items[].amount</code>.",
            "format" : "double",
            "example" : 100.0
          }
        },
        "example" : [ {
          "type" : "sku",
          "skuId" : "sku_9234276173",
          "quantity" : 1,
          "amount" : 5.95
        } ]
      },
      "Checkout" : {
        "title" : "Checkout",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the checkout",
            "readOnly" : true,
            "example" : "5823594809"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "Time at which the checkout was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "updatedTime" : {
            "type" : "string",
            "description" : "Time at which the checkout was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "customerId" : {
            "type" : "string",
            "description" : "The identifier of the Customer associated with the Checkout.",
            "example" : "cus_5774321009"
          },
          "currency" : {
            "type" : "string",
            "description" : "A three-letter ISO currency code.",
            "example" : "USD"
          },
          "email" : {
            "type" : "string",
            "description" : "The customer's email address.",
            "format" : "email",
            "example" : "jsmith@digitalriver.com"
          },
          "locale" : {
            "type" : "string",
            "description" : "A designator that combines the two-letter ISO 639-1 language code with the ISO 3166-1 alpha-2 country code.",
            "example" : "en_US"
          },
          "browserIp" : {
            "type" : "string",
            "description" : "The IP address of the browser used by the customer when placing the order.",
            "example" : "111.111.111.111"
          },
          "applicationId" : {
            "type" : "string",
            "description" : "An arbitrary string identifier that can be used to track the application type.",
            "readOnly" : true,
            "example" : "68f72e0c-cb7d-48e1-93c8-998668ad0ff4"
          },
          "shipFrom" : {
            "$ref" : "#/components/schemas/ShipFrom"
          },
          "shipTo" : {
            "$ref" : "#/components/schemas/Shipping"
          },
          "billTo" : {
            "$ref" : "#/components/schemas/Billing"
          },
          "organization" : {
            "$ref" : "#/components/schemas/Organization"
          },
          "subtotal" : {
            "type" : "number",
            "description" : "Represents the total order amount exclusive of tax.",
            "format" : "double",
            "readOnly" : true,
            "example" : 1094.5
          },
          "totalTax" : {
            "type" : "number",
            "description" : "Represents the total tax amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 82.76
          },
          "totalImporterTax" : {
            "type" : "number",
            "description" : "Represents the total tax amount from the importer of record.",
            "format" : "double",
            "example" : 82.76
          },
          "importerOfRecordTax" : {
            "type" : "boolean",
            "description" : "If <code>true</code>, indicates that the tax amount is paid by the importer of record.",
            "nullable" : true,
            "readOnly" : true,
            "example" : true
          },
          "totalFees" : {
            "type" : "number",
            "description" : "Represents the total fee amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 0
          },
          "totalDuty" : {
            "type" : "number",
            "description" : "Represents the total duty amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 0
          },
          "totalDiscount" : {
            "type" : "number",
            "description" : "Represents the total discount amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 0
          },
          "totalShipping" : {
            "type" : "number",
            "description" : "Represents the total shipping amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 5.76
          },
          "totalAmount" : {
            "type" : "number",
            "description" : "Represents the total charge amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 1180.26
          },
          "discount" : {
            "$ref" : "#/components/schemas/Discount"
          },
          "taxIdentifiers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TaxIdentifier"
            }
          },
          "invoiceAttributes" : {
            "$ref" : "#/components/schemas/InvoiceAttributes"
          },
          "purchaseLocation" : {
            "$ref" : "#/components/schemas/PurchaseLocation"
          },
          "customerType" : {
            "$ref" : "#/components/schemas/CustomerType"
          },
          "sellingEntity" : {
            "$ref" : "#/components/schemas/SellingEntity"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SkuItem"
            }
          },
          "shippingChoice" : {
            "$ref" : "#/components/schemas/ShippingChoice"
          },
          "payment" : {
            "$ref" : "#/components/schemas/Payments"
          },
          "disclosures" : {
            "$ref" : "#/components/schemas/Disclosures"
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value <code>true</code> if the object exists in live mode or the value <code>false</code> if the object exists in test mode.",
            "example" : false
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "upstreamId" : {
            "type" : "string",
            "description" : "The upstream identifier.",
            "example" : "7765374748"
          }
        }
      },
      "Currency" : {
        "title" : "Currency",
        "type" : "string",
        "description" : "A three-letter ISO 4217 currency code.",
        "example" : "USD"
      },
      "UpdateRefundRequest" : {
        "title" : "UpdateRefundRequest",
        "type" : "object",
        "properties" : {
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "RefundItem" : {
        "title" : "RefundItem",
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "The type of refund.",
            "example" : "tax",
            "enum" : [ "shipping", "fees", "duty" ]
          },
          "itemId" : {
            "type" : "string",
            "description" : "The identifier of the item."
          },
          "skuId" : {
            "type" : "string",
            "description" : "The identifier of the SKU.",
            "example" : "sku_5823594809"
          },
          "quantity" : {
            "type" : "integer",
            "description" : "The number of returned items.",
            "example" : 1
          },
          "amount" : {
            "type" : "number",
            "description" : "The requested refund amount.",
            "format" : "double",
            "nullable" : true,
            "example" : 5.95
          },
          "percent" : {
            "type" : "number",
            "description" : "The requested refund percent.",
            "format" : "double",
            "nullable" : true,
            "example" : 10
          },
          "refundedAmount" : {
            "type" : "number",
            "description" : "The total amount refunded.",
            "format" : "double",
            "nullable" : true
          }
        },
        "example" : [ {
          "type" : "shipping",
          "skuId" : "sku_9234276173",
          "quantity" : 1,
          "amount" : 5.95
        } ]
      },
      "WebhookRequest" : {
        "title" : "WebhookRequest",
        "required" : [ "address", "type" ],
        "type" : "object",
        "properties" : {
          "types" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Each element of the array represents the name of an event type.",
              "example" : "order.created"
            }
          },
          "apiVersion" : {
            "type" : "string",
            "description" : "Indicates whether to use the current, default version of the API or the version specified by YYYY-MM-DD.",
            "example" : "default",
            "default" : "default",
            "enum" : [ "default", "<YYYY-MM-DD>" ]
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "Indicates whether the webhook is enabled and receives notifications.",
            "example" : true,
            "default" : true
          },
          "address" : {
            "type" : "string",
            "description" : "URL of the webhook endpoint on your server you have set up to receive webhook notifications. Webhook data is sent as JSON in the POST request body. The full event details are included and can be used directly, after parsing the JSON into an Event object.",
            "example" : "https://company.com"
          },
          "transportType" : {
            "type" : "string",
            "default" : "HTTP",
            "enum" : [ "HTTP", "OAUTH" ]
          },
          "oauth" : {
            "required" : [ "clientID", "clientSecret", "tokenEndPoint" ],
            "type" : "object",
            "properties" : {
              "tokenEndPoint" : {
                "type" : "string",
                "description" : "The token endpoint."
              },
              "userName" : {
                "type" : "string",
                "description" : "The user name to access the token endpoint."
              },
              "password" : {
                "type" : "string",
                "description" : "The password to access the token endpoint."
              },
              "clientID" : {
                "type" : "string",
                "description" : "The client identifier issued to the client during the [registration process](https://tools.ietf.org/html/rfc6749#section-2.3.1)."
              },
              "clientSecret" : {
                "type" : "string",
                "description" : "The [client secret](https://tools.ietf.org/html/rfc6749#section-2.3.1)."
              },
              "grantType" : {
                "type" : "string",
                "description" : "OAUTH grant type",
                "default" : "password",
                "enum" : [ "password" ]
              }
            }
          },
          "authentication" : {
            "type" : "object",
            "properties" : {
              "username" : {
                "type" : "string",
                "description" : "some_user_name"
              },
              "password" : {
                "type" : "string",
                "description" : "some_secure_password"
              }
            }
          }
        }
      },
      "ReservationShippingChoice" : {
        "title" : "ReservationShippingChoice",
        "required" : [ "amount", "currency", "serviceLevel" ],
        "type" : "object",
        "properties" : {
          "currency" : {
            "type" : "string",
            "description" : "A three-letter ISO currency code.",
            "example" : "USD"
          },
          "amount" : {
            "type" : "number",
            "description" : "The shipping amount.",
            "format" : "double",
            "example" : 5.95
          },
          "serviceLevel" : {
            "type" : "string",
            "description" : "The shipping method.",
            "example" : "SG",
            "enum" : [ "SG" ]
          }
        },
        "nullable" : true
      },
      "LineItemRequest" : {
        "title" : "LineItemRequest",
        "required" : [ "inventoryItemId", "quantity" ],
        "type" : "object",
        "properties" : {
          "upstreamId" : {
            "type" : "string",
            "description" : "The upstream line item identifier.",
            "example" : "123"
          },
          "inventoryItemId" : {
            "type" : "string",
            "description" : "The inventory item identifier.",
            "example" : "abc"
          },
          "subtotal" : {
            "type" : "number",
            "description" : ".",
            "format" : "double",
            "example" : 9.99
          },
          "total" : {
            "type" : "number",
            "description" : "The aggregate price of the product inclusive of taxes, discounts, fees, shipping, handling and duties.",
            "format" : "double",
            "example" : 9.99
          },
          "name" : {
            "type" : "string",
            "description" : "The product name.",
            "example" : "."
          },
          "quantity" : {
            "type" : "integer",
            "example" : 1
          },
          "giftMessage" : {
            "type" : "string",
            "description" : "The gift message on the package of the product.",
            "example" : "."
          },
          "giftWrap" : {
            "type" : "boolean",
            "description" : "Has the value true if the item should be gift wrapped.",
            "example" : false
          },
          "tax" : {
            "$ref" : "#/components/schemas/GlobalFulfillmentTax"
          }
        },
        "example" : [ {
          "upstreamId" : "123",
          "inventoryItemId" : "abc",
          "name" : ".",
          "quantity" : 1
        } ]
      },
      "Fulfillment" : {
        "title" : "Fulfillment",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the Fulfillment.",
            "readOnly" : true,
            "example" : "ful_25c651d0-8079-48d7-b22e-eb1e2f451966"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "The time when the Fulfillment was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "orderId" : {
            "type" : "string",
            "description" : "The unique identifier of the Order associated with this Fulfillment.",
            "readOnly" : true,
            "example" : "ord_5678901234"
          },
          "shipmentId" : {
            "type" : "string",
            "description" : "The unique identifier associated to the shipment",
            "example" : "321765"
          },
          "items" : {
            "type" : "array",
            "description" : "An array of line items fulfilled and/or cancelled.",
            "items" : {
              "$ref" : "#/components/schemas/FulfillmentResponseItem"
            }
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value <code>true</code> if the object exists in live mode or the value <code>false</code> if the object exists in test mode.",
            "example" : false
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "trackingCompany" : {
            "type" : "string",
            "description" : "The name of the tracking company.",
            "example" : "Fedex"
          },
          "trackingNumber" : {
            "type" : "string",
            "description" : "A tracking number provided by the shipping company.",
            "example" : "5678901234"
          },
          "trackingUrl" : {
            "type" : "string",
            "description" : "The URL of the tracking page for the Fulfillment.",
            "example" : "http://www.digitalriver.com?code=5678901234"
          }
        }
      },
      "ProductItemRequest" : {
        "title" : "ProductItemRequest",
        "required" : [ "productDetails", "quantity" ],
        "type" : "object",
        "properties" : {
          "productDetails" : {
            "$ref" : "#/components/schemas/ProductDetails"
          },
          "amount" : {
            "type" : "number",
            "description" : "The amount of the product.",
            "format" : "double",
            "example" : 9.99
          },
          "quantity" : {
            "type" : "integer",
            "example" : 1
          }
        }
      },
      "Refund" : {
        "title" : "Refund",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the refund.",
            "readOnly" : true,
            "example" : "a6809a63-e6a9-4016-abbc-f33d19fccb5b"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "The time when the refund was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "updatedTime" : {
            "type" : "string",
            "description" : "The time when the refund was updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "amount" : {
            "type" : "number",
            "description" : "An amount representing how much was refunded.",
            "format" : "double",
            "example" : 1180.26
          },
          "state" : {
            "type" : "string",
            "description" : "The state of the refund.",
            "example" : "pending",
            "enum" : [ "pending", "complete", "failed" ]
          },
          "failureCode" : {
            "type" : "string",
            "description" : "An error code that identifies the reason for the refund failure."
          },
          "failureMessage" : {
            "type" : "string",
            "description" : "An error message that describes the reason for the refund failure."
          }
        },
        "description" : "Represents the refund of all or part of the charge."
      },
      "AdditionalBillingAddressInfo" : {
        "title" : "AdditionalBillingAddressInfo",
        "type" : "object",
        "properties" : {
          "neighborhood" : {
            "type" : "string",
            "description" : "The neighborhood of the address.",
            "nullable" : true,
            "example" : "Centro"
          },
          "division" : {
            "type" : "string",
            "description" : "A division within an organization.",
            "nullable" : true,
            "example" : "営業部"
          },
          "phoneticName" : {
            "type" : "string",
            "description" : "The phonetic spelling of a name.",
            "nullable" : true,
            "example" : "ヤマダ タロ"
          },
          "title" : {
            "type" : "string",
            "nullable" : true,
            "enum" : [ "M", "Mme", "Mlle" ]
          }
        },
        "description" : "Captures any information that's not included in the basic address."
      },
      "CreditSource" : {
        "title" : "CreditSource",
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "paymentSessionId" : {
            "type" : "string",
            "description" : "Unique identifier of the session",
            "example" : "{{checkout_session-id}}"
          },
          "amount" : {
            "type" : "number",
            "description" : "The amount associated to the order",
            "format" : "double",
            "example" : 20.0
          },
          "type" : {
            "type" : "string",
            "description" : "The type of source",
            "example" : "customerCredit",
            "enum" : [ "customerCredit" ]
          },
          "upstreamId" : {
            "type" : "string",
            "description" : "Unique identifier associated to an upstream system",
            "example" : "custCredit_orderId_16008796"
          },
          "customerCredit" : {
            "$ref" : "#/components/schemas/CustomerCredit"
          },
          "owner" : {
            "$ref" : "#/components/schemas/Owner"
          }
        }
      },
      "InvoiceItemRequest" : {
        "title" : "InvoiceItemRequest",
        "required" : [ "skuId" ],
        "type" : "object",
        "properties" : {
          "skuId" : {
            "type" : "string",
            "description" : "The identifier of the stock keeping unit (SKU).",
            "nullable" : true,
            "example" : "5823594809"
          },
          "productDetails" : {
            "$ref" : "#/components/schemas/ProductDetails"
          },
          "subscriptionInfo" : {
            "$ref" : "#/components/schemas/SubscriptionInfo"
          },
          "price" : {
            "type" : "number",
            "description" : "The price of an item. You are required to provide this parameter or <code>aggregatePrice</code>.",
            "format" : "double",
            "example" : 9.99
          },
          "aggregatePrice" : {
            "type" : "number",
            "description" : "The total price of multiple items. You are required to provide this parameter or <code>price</code>.",
            "format" : "double",
            "example" : 19.98
          },
          "quantity" : {
            "type" : "integer",
            "description" : "The number of items.",
            "nullable" : true,
            "example" : 2
          },
          "discount" : {
            "$ref" : "#/components/schemas/Discount"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "Applicability" : {
        "title" : "Applicability",
        "type" : "object",
        "properties" : {
          "country" : {
            "type" : "string",
            "description" : "The applicable country for the tax id",
            "example" : "FR"
          },
          "entity" : {
            "type" : "string",
            "description" : "The applicable entity for the tax id",
            "example" : "DR_Ireland-Entity"
          },
          "customerType" : {
            "type" : "string",
            "description" : "The applicable customer type for the tax id",
            "example" : "business",
            "enum" : [ "business", "individual" ]
          }
        },
        "description" : "Indicates the applicability of a tax identifier"
      },
      "SkuId" : {
        "title" : "SkuId",
        "type" : "string",
        "description" : "The identifier of the stock keeping unit (SKU).",
        "example" : "sku_5823594809"
      },
      "CountrySpecification" : {
        "title" : "CountrySpecification",
        "type" : "object",
        "properties" : {
          "country" : {
            "type" : "string",
            "description" : "An ISO 3166-1 alpha-2 country code.",
            "example" : "US"
          },
          "sellingEntity" : {
            "type" : "string",
            "description" : "A Digital River selling entity.",
            "example" : "DR_IRELAND-ENTITY"
          },
          "billingAddressSchema" : {
            "type" : "string",
            "description" : "A billing address schema.",
            "nullable" : true
          },
          "shippingAddressSchema" : {
            "type" : "string",
            "description" : "A ship to address schema.",
            "nullable" : true
          },
          "billingAddressOnlySchema" : {
            "type" : "string",
            "description" : "A billing address only schema.",
            "nullable" : true
          },
          "individualTaxIdentifiersSchemas" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "An array of individual tax identifier schemas."
            }
          },
          "businessTaxIdentifiersSchemas" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "An array of business tax identifier schemas."
            }
          },
          "taxIdentifiersInfo" : {
            "$ref" : "#/components/schemas/TaxIdentifiersInfo"
          },
          "invoiceAttributeInfo" : {
            "$ref" : "#/components/schemas/InvoiceAttributeInfo"
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value <code>true</code> if the object exists in live mode or the value <code>false</code> if the object exists in test mode.",
            "example" : false
          }
        }
      },
      "ShipmentUnitAttributes" : {
        "title" : "ShipmentUnitAttributes",
        "type" : "object",
        "properties" : {
          "serialNumber" : {
            "type" : "string",
            "description" : ".",
            "nullable" : true,
            "readOnly" : true,
            "example" : "."
          },
          "imeiNumber" : {
            "type" : "string",
            "description" : ".",
            "nullable" : true,
            "readOnly" : true,
            "example" : "."
          },
          "simCardNumber" : {
            "type" : "string",
            "description" : ".",
            "nullable" : true,
            "readOnly" : true,
            "example" : "."
          }
        },
        "description" : "Values that help identify and track smartphones or cellphones."
      },
      "PricingFormat" : {
        "title" : "PricingFormat",
        "type" : "object",
        "properties" : {
          "currencyNumberFormat" : {
            "type" : "string",
            "description" : "The format of the currency.",
            "example" : "#,###.##"
          },
          "symbol" : {
            "type" : "string",
            "description" : "The symbol used for the display of the currency amount.",
            "example" : "$"
          },
          "decimalPlaces" : {
            "type" : "integer",
            "description" : "The amount of decimal places the currency allows.",
            "example" : 2
          },
          "currencySymbolBeforePrice" : {
            "type" : "boolean",
            "example" : true
          },
          "useCurrencySymbolSpace" : {
            "type" : "boolean",
            "example" : false
          }
        }
      },
      "Metadata" : {
        "title" : "Metadata",
        "type" : "object",
        "additionalProperties" : { },
        "description" : "Key-value pairs used to store additional data. Value can be string, boolean or integer types.",
        "example" : {
          "coupon" : "iOS"
        }
      },
      "TaxIdentifier" : {
        "title" : "TaxIdentifier",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The identifier of the tax identifier.",
            "readOnly" : true,
            "example" : "5774321009"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "The time when the tax identifier was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "customerId" : {
            "type" : "string",
            "description" : "The identifier of an existing customer.",
            "nullable" : true,
            "example" : "5774321009"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of tax identifier.",
            "readOnly" : true,
            "example" : "de"
          },
          "value" : {
            "type" : "string",
            "description" : "The tax identifier.",
            "example" : "DE123456789"
          },
          "state" : {
            "type" : "string",
            "description" : "The verification state.",
            "readOnly" : true,
            "example" : "pending",
            "enum" : [ "pending", "not_valid", "verified" ]
          },
          "stateTransitions" : {
            "$ref" : "#/components/schemas/TaxIdentifierStateTransitions"
          },
          "verifiedName" : {
            "type" : "string",
            "description" : "The registered name of the customer with this tax identifier.",
            "nullable" : true,
            "example" : "."
          },
          "verifiedAddress" : {
            "type" : "string",
            "description" : "The registered address of the customer with this tax identifier.",
            "nullable" : true,
            "example" : "."
          },
          "updatedTime" : {
            "type" : "string",
            "description" : "The time when the tax identifier was updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          }
        }
      },
      "FileLink" : {
        "title" : "FileLink",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier for the file link.",
            "example" : "link_d992b05c-31d3-485e-b1f7-7b95f06cbfe8"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "Time when the file link was created.",
            "format" : "date-time",
            "example" : "2018-04-25T20:36:00Z"
          },
          "expired" : {
            "type" : "boolean",
            "description" : "Whether this link has already expired.",
            "example" : false
          },
          "expiresTime" : {
            "type" : "string",
            "description" : "Time at which the link expires.",
            "format" : "date-time",
            "example" : "2020-04-25T20:36:00Z"
          },
          "fileId" : {
            "type" : "string",
            "description" : "The file object this link points to.",
            "example" : "file_09e2464f-9b4f-482b-ae89-732183c705be"
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value true if the object exists in live mode or the value false if the object exists in test mode.",
            "example" : false
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "url" : {
            "type" : "string",
            "description" : "The publicly accessible URL to download the file.",
            "example" : "https://files.digitalriver.com/links/fl_29a093a2-8989-4def-a50c-d8950d1436d4"
          }
        }
      },
      "InvoiceRequest" : {
        "title" : "InvoiceRequest",
        "required" : [ "currency", "customerId", "items" ],
        "type" : "object",
        "properties" : {
          "customerId" : {
            "type" : "string",
            "description" : "The identifier of the invoiced customer.",
            "example" : "5774321009"
          },
          "email" : {
            "type" : "string",
            "description" : "The email address of the invoiced customer.",
            "format" : "email",
            "example" : "jsmith@digitalriver.com"
          },
          "sourceId" : {
            "type" : "string",
            "description" : "The unique identifier of a Source.",
            "example" : "src_a78cfeae-f7ae-4719-8e1c-d05ec04e4d37"
          },
          "currency" : {
            "type" : "string",
            "description" : "A three-letter ISO 4217 currency code.",
            "example" : "USD"
          },
          "state" : {
            "type" : "string",
            "description" : "The state of the invoice.",
            "example" : "open",
            "enum" : [ "draft", "open" ]
          },
          "chargeType" : {
            "$ref" : "#/components/schemas/ChargeType"
          },
          "description" : {
            "type" : "string",
            "description" : "An arbitrary string attached to the invoice."
          },
          "locale" : {
            "$ref" : "#/components/schemas/Locale"
          },
          "customerType" : {
            "$ref" : "#/components/schemas/CustomerType"
          },
          "shipTo" : {
            "$ref" : "#/components/schemas/Shipping"
          },
          "billTo" : {
            "$ref" : "#/components/schemas/Billing"
          },
          "discount" : {
            "$ref" : "#/components/schemas/Discount"
          },
          "collectionPeriodDays" : {
            "$ref" : "#/components/schemas/CollectionPeriodDays"
          },
          "billingOptimization" : {
            "type" : "boolean",
            "description" : "Indicates whether billing is optimized. The default is <code>true</code>.",
            "example" : true
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceItemRequest"
            }
          },
          "taxInclusive" : {
            "type" : "boolean",
            "description" : "If <code>true</code>, indicates that the prices supplied are tax inclusive.",
            "example" : true
          },
          "taxIdentifiers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CheckoutTaxIdentifierRequest"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "upstreamId" : {
            "type" : "string",
            "description" : "The upstream identifier.",
            "example" : "7765374748"
          },
          "applicationId" : {
            "type" : "string",
            "description" : "The identifier of the client application that created the checkout.",
            "example" : "5774321009"
          }
        }
      },
      "ReservationShipping" : {
        "title" : "ReservationShipping",
        "required" : [ "address" ],
        "type" : "object",
        "properties" : {
          "address" : {
            "$ref" : "#/components/schemas/ReservationAddress"
          }
        },
        "description" : "The customer's shipping information."
      },
      "GlobalFulfillmentCancellationItemRequest" : {
        "title" : "GlobalFulfillmentCancellationItemRequest",
        "required" : [ "fulfillmentOrderItemId", "quantity" ],
        "type" : "object",
        "properties" : {
          "fulfillmentOrderItemId" : {
            "type" : "string",
            "description" : "The identifier of the fulfillment order item.",
            "example" : "99341140336"
          },
          "fulfillmentOrderItemUpstreamId" : {
            "type" : "string",
            "description" : "The identifier of the item in the upstream fulfillment order",
            "example" : "99341140336"
          },
          "quantity" : {
            "type" : "integer",
            "description" : "The number of items.",
            "example" : 1
          }
        }
      },
      "OrderRefund" : {
        "title" : "OrderRefund",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the refund.",
            "readOnly" : true,
            "example" : "ref_5823594809"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "Time at which the refund was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "orderId" : {
            "type" : "string",
            "description" : "The unique identifier of the order.",
            "readOnly" : true,
            "example" : "ord_6645940010"
          },
          "invoiceId" : {
            "type" : "string",
            "description" : "The unique identifier of the invoice.",
            "readOnly" : true,
            "example" : "5823594809"
          },
          "currency" : {
            "type" : "string",
            "description" : "Three-letter ISO currency code.",
            "example" : "USD"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of refund.",
            "example" : "shipping",
            "enum" : [ "shipping", "tax", "duty", "importer_tax" ]
          },
          "amount" : {
            "type" : "number",
            "description" : "The requested refund amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 9.99
          },
          "refundedAmount" : {
            "type" : "number",
            "description" : "The total amount refunded.",
            "format" : "double",
            "readOnly" : true,
            "example" : 9.99
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RefundItem"
            }
          },
          "reason" : {
            "maxLength" : 64,
            "type" : "string",
            "description" : "The reason for the refund.",
            "example" : "requested_by_customer"
          },
          "failureReason" : {
            "type" : "string",
            "description" : "The reason for the refund failure, if known.",
            "example" : "expired_or_canceled_card"
          },
          "state" : {
            "type" : "string",
            "description" : "The state of the refund.",
            "example" : "created",
            "enum" : [ "pending_information", "pending", "succeeded", "failed", "expired" ]
          },
          "tokenInformation" : {
            "$ref" : "#/components/schemas/TokenInformation"
          },
          "expiresTime" : {
            "type" : "string",
            "description" : "Time at which the information token expires.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-12-25T20:36:00Z"
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value true if the object exists in live mode or the value false if the object exists in test mode.",
            "example" : false
          },
          "charges" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Charges"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "ShippingQuoteFeesDetails" : {
        "title" : "ShippingQuoteFeesDetails",
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the fee.",
            "example" : "Fuel Surcharge"
          },
          "amount" : {
            "type" : "number",
            "description" : "The amount of the fee.",
            "format" : "double",
            "example" : 3.99
          }
        }
      },
      "InvoiceAttributes" : {
        "title" : "InvoiceAttributes",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The ID of the invoice",
            "example" : "1234"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of invoice.",
            "example" : "cn_business_general",
            "enum" : [ "cn_individual_general", "cn_business_general", "cn_business_special", "tw_individual_mobile_barcode", "tw_individual_member_carrier", "tw_individual_citizen_cert", "tw_individual_donate" ]
          },
          "customerId" : {
            "type" : "string",
            "description" : "The ID of the customer.",
            "example" : "5678"
          },
          "atttributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Attributes"
            }
          },
          "createdTime" : {
            "type" : "string",
            "description" : "The time when the invoice attribute was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "updatedTime" : {
            "type" : "string",
            "description" : "The time when the invoice attribute was updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value <code>true</code> if the object exists in live mode or the value <code>false</code> if the object exists in test mode.",
            "example" : false
          }
        }
      },
      "GlobalFulfillmentOrder" : {
        "title" : "GlobalFulfillmentOrder",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "number",
            "description" : "The unique identifier of the fulfillment order.",
            "format" : "integer",
            "readOnly" : true,
            "example" : 9292981838
          },
          "createdTime" : {
            "type" : "string",
            "description" : "The time when the fulfillment order was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "currency" : {
            "type" : "string",
            "description" : "A three-letter ISO currency code.",
            "example" : "USD"
          },
          "locale" : {
            "type" : "string",
            "description" : "A locale designator that combines a two-letter ISO 639-1 language code with a ISO 3166-1 alpha-2 country code.",
            "example" : "en_US"
          },
          "upstreamOrderTime" : {
            "type" : "string",
            "description" : "The time at which the upstream order was created.",
            "format" : "date-time",
            "example" : "2018-04-25T20:36:00Z"
          },
          "name" : {
            "type" : "string",
            "description" : "The customer's name.",
            "example" : "John Smith"
          },
          "email" : {
            "type" : "string",
            "description" : "The customer's email address.",
            "format" : "email",
            "example" : "jsmith@digitalriver.com"
          },
          "phone" : {
            "type" : "string",
            "description" : "The customer's phone number.",
            "example" : "612-258-1966"
          },
          "reservationId" : {
            "type" : "string",
            "description" : "An inventory reservation identifier.",
            "example" : "7765374748"
          },
          "upstreamId" : {
            "type" : "string",
            "description" : "The upstream order identifier.",
            "example" : "7765374748"
          },
          "shipTo" : {
            "$ref" : "#/components/schemas/Shipping"
          },
          "shippingChoice" : {
            "$ref" : "#/components/schemas/GlobalFulfillmentShippingChoice"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LineItem"
            }
          },
          "state" : {
            "type" : "string",
            "description" : "The current state of the fulfillment order.",
            "readOnly" : true,
            "example" : "pending",
            "enum" : [ "pending", "cancelled", "shipped" ]
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value true if the object exists in live mode or the value false if the object exists in test mode.",
            "example" : false
          }
        }
      },
      "ImporterTax" : {
        "title" : "ImporterTax",
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "description" : "The tax amount from the importer of record.",
            "format" : "double",
            "example" : 12.34
          }
        }
      },
      "ShippingLabelRequest" : {
        "title" : "ShippingLabelRequest",
        "required" : [ "items", "labelFormat", "orderId", "packages" ],
        "type" : "object",
        "properties" : {
          "orderId" : {
            "type" : "string",
            "description" : "The identifier of the order in Digital River's system.",
            "example" : "sdfg-r6w7-hbem-ju764"
          },
          "labelFormat" : {
            "type" : "string",
            "description" : "The format of the label's data file.",
            "example" : "PDF",
            "enum" : [ "PDF" ]
          },
          "shippingChoice" : {
            "$ref" : "#/components/schemas/ShippingRequest"
          },
          "shipFrom" : {
            "$ref" : "#/components/schemas/GLShipFrom"
          },
          "packages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PackageRequest"
            }
          }
        }
      },
      "StateTransitions" : {
        "title" : "StateTransitions",
        "type" : "object",
        "properties" : {
          "activated" : {
            "type" : "string",
            "description" : "Can be subscribed to, updates are restricted to some fields",
            "format" : "date-time",
            "nullable" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "discontinued" : {
            "type" : "string",
            "description" : "Has active subscriptions, but not accepting new ones",
            "format" : "date-time",
            "nullable" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "deactivated" : {
            "type" : "string",
            "description" : "All subscriptions will be stopped",
            "format" : "date-time",
            "nullable" : true,
            "example" : "2018-04-25T20:36:00Z"
          }
        }
      },
      "ReturnsLocation" : {
        "title" : "ReturnsLocation",
        "required" : [ "address" ],
        "type" : "object",
        "properties" : {
          "address" : {
            "$ref" : "#/components/schemas/ReturnsAddress"
          },
          "name" : {
            "type" : "string",
            "nullable" : true,
            "example" : "John Smith"
          },
          "phone" : {
            "type" : "string",
            "nullable" : true,
            "example" : "952-111-1111"
          },
          "email" : {
            "type" : "string",
            "format" : "email",
            "nullable" : true,
            "example" : "jsmith@digitalriver.com"
          }
        }
      },
      "UpdateCheckoutRequest" : {
        "title" : "UpdateCheckoutRequest",
        "type" : "object",
        "properties" : {
          "customerId" : {
            "type" : "string",
            "description" : "The identifier of the Customer associated with the Checkout.",
            "example" : "5774321008"
          },
          "sourceId" : {
            "type" : "string",
            "description" : "The unique identifier of a Source.",
            "example" : "src_a78cfeae-f7ae-4719-8e1c-d05ec04e4d37"
          },
          "currency" : {
            "type" : "string",
            "description" : "A three-letter ISO currency code.",
            "example" : "USD"
          },
          "email" : {
            "type" : "string",
            "description" : "The customer's email address.",
            "format" : "email",
            "example" : "jsmith@digitalriver.com"
          },
          "locale" : {
            "type" : "string",
            "description" : "A designator that combines the two-letter ISO 639-1 language code with the ISO 3166-1 alpha-2 country code.",
            "example" : "en_US"
          },
          "invoiceAttributeId" : {
            "type" : "string",
            "description" : "The unique identfier of the invoice attribute.",
            "example" : "95f72e0c-cb7d-48e1-93c8-998668ad0ff4"
          },
          "browserIp" : {
            "type" : "string",
            "description" : "The IP address of the browser used by the customer when placing the order.",
            "example" : "111.111.111.111"
          },
          "applicationId" : {
            "type" : "string",
            "description" : "An arbitrary string identifier that can be used to track the application type.",
            "readOnly" : true,
            "example" : "68f72e0c-cb7d-48e1-93c8-998668ad0ff4"
          },
          "taxIdentifiers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CheckoutTaxIdentifierRequest"
            }
          },
          "shipFrom" : {
            "$ref" : "#/components/schemas/ShipFrom"
          },
          "shipTo" : {
            "$ref" : "#/components/schemas/Shipping"
          },
          "billTo" : {
            "$ref" : "#/components/schemas/Billing"
          },
          "organization" : {
            "$ref" : "#/components/schemas/Organization"
          },
          "shippingDiscount" : {
            "$ref" : "#/components/schemas/Discount"
          },
          "chargeType" : {
            "$ref" : "#/components/schemas/ChargeType"
          },
          "customerType" : {
            "$ref" : "#/components/schemas/CustomerType"
          },
          "purchaseLocation" : {
            "$ref" : "#/components/schemas/PurchaseLocation"
          },
          "shippingChoice" : {
            "$ref" : "#/components/schemas/ShippingRequest"
          },
          "items" : {
            "$ref" : "#/components/schemas/SkuUpdateRequestItem"
          },
          "upstreamId" : {
            "type" : "string",
            "description" : "The upstream identifier.",
            "example" : "7765374748"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "Payco" : {
        "title" : "Payco",
        "type" : "object"
      },
      "OrderStateTransitions" : {
        "title" : "OrderStateTransitions",
        "type" : "object",
        "properties" : {
          "accepted" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "pending_payment" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "in_review" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "complete" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "dispute" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "cancelled" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "fulfilled" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "blocked" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "returned" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "description" : "Timestamps that indicate when the state transition occurred.",
        "nullable" : true,
        "readOnly" : true
      },
      "GlobalFulfillmentReturnItemRequest" : {
        "title" : "GlobalFulfillmentReturnItemRequest",
        "required" : [ "fulfillmentOrderItemId", "quantity" ],
        "type" : "object",
        "properties" : {
          "fulfillmentOrderItemId" : {
            "type" : "string",
            "description" : "The identifier of the item.",
            "example" : "99341140336"
          },
          "quantity" : {
            "type" : "integer",
            "description" : "The number of items.",
            "example" : 1
          },
          "unitAttributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UnitAttributes"
            }
          }
        }
      },
      "AdditionalAddressInfo" : {
        "title" : "AdditionalAddressInfo",
        "type" : "object",
        "properties" : {
          "neighborhood" : {
            "type" : "string",
            "description" : "The neighborhood of the address.",
            "nullable" : true,
            "example" : "Centro"
          },
          "division" : {
            "type" : "string",
            "description" : "A division within an organization.",
            "nullable" : true,
            "example" : "営業部"
          },
          "phoneticName" : {
            "type" : "string",
            "description" : "The phonetic spelling of a name.",
            "nullable" : true,
            "example" : "ヤマダ タロ"
          }
        },
        "description" : "Captures any information that's not included in the basic address."
      },
      "Redirect" : {
        "title" : "Redirect",
        "type" : "object",
        "properties" : {
          "redirectUrl" : {
            "type" : "string",
            "example" : "https://api.digitalriver.com:443/payments/redirects/e626ec65-24d6-46fb-b632-10b90f4c4912?apiKey=pk_test_6cb0fe9ce3124093a9ad906f6c589e2d"
          },
          "returnUrl" : {
            "type" : "string",
            "example" : "https://mypage.com/success"
          },
          "cancelUrl" : {
            "type" : "string",
            "example" : "https://mypage.com/cancel"
          }
        }
      },
      "ShipmentItem" : {
        "title" : "ShipmentItem",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of a shipment item.",
            "readOnly" : true,
            "example" : "8760948870"
          },
          "fulfillmentOrderItemId" : {
            "type" : "string",
            "description" : "The identifier of the line item.",
            "example" : "650398674428"
          },
          "fulfillmentOrderItemUpstreamId" : {
            "type" : "string",
            "description" : "The upstream identifier of the line item.",
            "example" : "650398674428"
          },
          "inventoryItemId" : {
            "type" : "string",
            "description" : "The identifier of the inventory item."
          },
          "partNumber" : {
            "type" : "string",
            "description" : "The manufacturer part number.",
            "example" : "SWG1224J10L"
          },
          "quantity" : {
            "type" : "number",
            "description" : "The quantity of this item.",
            "format" : "integer",
            "example" : 1
          },
          "trackingUrls" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Tracking"
            }
          },
          "unitAttributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ShipmentUnitAttributes"
            }
          }
        }
      },
      "FileContent" : {
        "title" : "FileContent",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the file.",
            "example" : "09e2464f-9b4f-482b-ae89-732183c705be"
          },
          "fileName" : {
            "type" : "string",
            "description" : "The name of the file.",
            "example" : "File Name"
          }
        }
      },
      "PackageRequest" : {
        "title" : "PackageRequest",
        "required" : [ "items", "weight", "weightUnit" ],
        "type" : "object",
        "properties" : {
          "weight" : {
            "type" : "integer",
            "description" : "The box’s weight.",
            "example" : 5
          },
          "weightUnit" : {
            "type" : "string",
            "description" : "The box’s weight unit.",
            "example" : "oz"
          },
          "height" : {
            "type" : "integer",
            "description" : "The box’s height.",
            "example" : 5
          },
          "width" : {
            "type" : "integer",
            "description" : "The box’s width.",
            "example" : 5
          },
          "length" : {
            "type" : "integer",
            "description" : "The box’s length.",
            "example" : 5
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductItemRequest"
            }
          }
        }
      },
      "ShippingMethodQuote" : {
        "title" : "ShippingMethodQuote",
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The shipping method's description.",
            "example" : "USPS: Priority (1 day delivery)"
          },
          "serviceLevel" : {
            "type" : "string",
            "example" : "Standard"
          },
          "amount" : {
            "type" : "number",
            "description" : "The shipping method's cost.",
            "format" : "double",
            "example" : 5.99
          }
        }
      },
      "ShippingQuote" : {
        "title" : "ShippingQuote",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Shipping quote identifier",
            "example" : "123-456-789"
          },
          "description" : {
            "type" : "string",
            "description" : "Shipping method description",
            "example" : "Standard"
          },
          "serviceLevel" : {
            "type" : "string",
            "example" : "Standard"
          },
          "estimatedDelivery" : {
            "type" : "string",
            "example" : "3-5 days"
          },
          "shippingTerms" : {
            "type" : "string",
            "description" : "The terms of shipping.",
            "example" : "DDP",
            "enum" : [ "DDP", "DAP" ]
          },
          "totalAmount" : {
            "type" : "number",
            "description" : "The shipping amount.",
            "format" : "double",
            "example" : 5.99
          },
          "shipFrom" : {
            "$ref" : "#/components/schemas/GLShipFrom"
          },
          "fees" : {
            "$ref" : "#/components/schemas/ShippingQuoteFees"
          }
        }
      },
      "DirectDebit" : {
        "title" : "DirectDebit",
        "type" : "object",
        "properties" : {
          "redirect" : {
            "$ref" : "#/components/schemas/DirectDebitRedirect"
          }
        }
      },
      "DropInSku" : {
        "title" : "DropInSku",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The SKU's unique identifier.",
            "example" : "sku_5823594809"
          },
          "eccn" : {
            "type" : "string",
            "description" : "The export control classification number.",
            "example" : "EAR99"
          },
          "taxCode" : {
            "type" : "string",
            "description" : "The designated tax code.",
            "example" : "4323.310_A"
          },
          "name" : {
            "type" : "string",
            "description" : "The product’s name.",
            "example" : "Athena Womens Running Shoes"
          },
          "image" : {
            "type" : "string",
            "description" : "An image of the product.",
            "example" : "https://imageurl.com"
          },
          "url" : {
            "type" : "string",
            "description" : "A product url.",
            "example" : "https://producturl.com"
          },
          "physical" : {
            "type" : "boolean",
            "description" : "Identifies whether or not a product is physical, so that the appropriate data requirements are enforced.",
            "example" : true
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "RefundRequest" : {
        "title" : "RefundRequest",
        "required" : [ "currency" ],
        "type" : "object",
        "properties" : {
          "orderId" : {
            "type" : "string",
            "description" : "The unique identifier of the order. You are required to provide this parameter or <code>invoiceId</code>.",
            "example" : "ord_5823594809"
          },
          "invoiceId" : {
            "type" : "string",
            "description" : "The unique identifier of the invoice. You are required to provide this parameter or <code>orderId</code>.",
            "example" : "5823594809"
          },
          "currency" : {
            "type" : "string",
            "description" : "Three-letter ISO currency code.",
            "example" : "USD"
          },
          "amount" : {
            "type" : "number",
            "description" : "The amount to refund. You are required to provide this value, <code>percent</code>, or <code>items</code>.",
            "format" : "double",
            "nullable" : true,
            "example" : 9.99
          },
          "percent" : {
            "maximum" : 100.0,
            "minimum" : 0.01,
            "type" : "number",
            "description" : "The percent to refund. You are required to provide this value, <code>amount</code>, or <code>items</code>.",
            "format" : "double",
            "nullable" : true,
            "example" : 100.0
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the refund.",
            "example" : "shipping",
            "enum" : [ "shipping", "duty", "tax", "importer_tax" ]
          },
          "items" : {
            "type" : "array",
            "description" : "The items to refund.",
            "items" : {
              "$ref" : "#/components/schemas/RefundItemRequest"
            }
          },
          "reason" : {
            "maxLength" : 64,
            "type" : "string",
            "description" : "The reason for the refund.",
            "example" : "requested_by_customer"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "TaxCertificate" : {
        "title" : "TaxCertificate",
        "required" : [ "companyName", "endDate", "fileId", "startDate", "taxAuthority" ],
        "type" : "object",
        "properties" : {
          "companyName" : {
            "type" : "string",
            "description" : "The name of the company that holds the certificate.",
            "example" : "Digital River Inc."
          },
          "taxAuthority" : {
            "type" : "string",
            "description" : "The issuing state.",
            "example" : "MN"
          },
          "startDate" : {
            "type" : "string",
            "description" : "Tax certificate start date.",
            "format" : "date-time",
            "example" : "2019-04-25T20:36:00Z"
          },
          "endDate" : {
            "type" : "string",
            "description" : "Tax certificate end date.",
            "format" : "date-time",
            "example" : "2020-04-25T20:36:00Z"
          },
          "fileId" : {
            "type" : "string",
            "description" : "The identifier of the file that contains the tax certificate.",
            "example" : "file_8fd2f808-bbb4-49bc-aa41-c960a1447331"
          }
        }
      },
      "FeeUpdateRequest" : {
        "title" : "FeeUpdateRequest",
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "The type of fee.",
            "example" : "weee",
            "enum" : [ "battery", "weee", "copyright", "e_waste", "packaging" ]
          },
          "skuId" : {
            "type" : "string",
            "description" : "The unique identifer of the stock keeping unit associated with the fee.",
            "example" : "sku_7834561209"
          },
          "category" : {
            "type" : "string",
            "description" : "The category of the fee as defined by regulatory law.",
            "example" : "3. IT and Telecommunication Equipment"
          },
          "value" : {
            "type" : "string",
            "description" : "The value of the product.",
            "example" : "85\" Class Q900 QLED Smart 8K UHD TV."
          },
          "amount" : {
            "type" : "number",
            "description" : "The fee amount.",
            "format" : "double",
            "example" : 0.5
          },
          "battery" : {
            "$ref" : "#/components/schemas/Battery"
          },
          "complianceAgency" : {
            "type" : "string",
            "description" : "The unique identifier of the recycling agency associated with the product's jurisdiction."
          },
          "feeExemption" : {
            "type" : "string",
            "description" : "Indicates whether business to business sales are exempt from paying the fee.",
            "example" : "exempt"
          },
          "brandName" : {
            "type" : "string",
            "description" : "The product's brand name.",
            "example" : "Samsung"
          },
          "weee" : {
            "$ref" : "#/components/schemas/WEEE"
          },
          "weightAndUnits" : {
            "type" : "string",
            "description" : "The weight of the unit, minus packaging or batteries, and the unit of measurement applied to the weight.",
            "example" : "3.00 kg"
          },
          "currency" : {
            "type" : "string",
            "description" : "A three-letter ISO 4217 currency code.",
            "example" : "USD"
          },
          "country" : {
            "type" : "string",
            "description" : "A two-letter ISO 3166 country code.",
            "example" : "US"
          },
          "subdivisions" : {
            "type" : "array",
            "description" : "An array of ISO 3166-2 subdivision codes.",
            "example" : [ "CA" ],
            "items" : {
              "type" : "string"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "StoreCreditAuthorizationRequest" : {
        "title" : "StoreCreditAuthorizationRequest",
        "type" : "object",
        "properties" : {
          "sessionId" : {
            "type" : "string",
            "description" : "The identifier of the checkout session associated with the store credit request.",
            "example" : "7765374748"
          },
          "sessionUpstreamId" : {
            "type" : "string",
            "description" : "The upstream identifier of the checkout session associated with the store credit request.",
            "example" : "8234373746"
          },
          "amount" : {
            "type" : "number",
            "description" : "The store credit amount.",
            "format" : "double",
            "example" : 5
          },
          "name" : {
            "type" : "string",
            "description" : "The store credit name.",
            "example" : "Gift card"
          },
          "upstreamId" : {
            "type" : "string",
            "description" : "The upstream store credit identifier.",
            "example" : "7654-2345-0987-123456"
          },
          "iconUrl" : {
            "type" : "string",
            "description" : "The store credit image url.",
            "example" : "https://test.com/logo.png"
          },
          "lastFour" : {
            "type" : "string",
            "description" : "The last four digits of the store credit.",
            "example" : "7831"
          }
        }
      },
      "Event" : {
        "title" : "Event",
        "required" : [ "data", "digitalriverVersion", "id", "liveMode", "pendingWebhooks", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the event.",
            "format" : "uuid"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "The time when the event was created.",
            "format" : "date-time",
            "example" : "2018-08-29T09:12:33Z"
          },
          "digitalRiverVersion" : {
            "type" : "string",
            "format" : "date",
            "example" : "2018-04-19"
          },
          "data" : {
            "$ref" : "#/components/schemas/EventData"
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value <code>true</code> if the object exists in live mode or the value false if the object exists in test mode.",
            "example" : true
          },
          "type" : {
            "type" : "string",
            "description" : "The type of event.",
            "example" : "charge.succeeded"
          }
        }
      },
      "ItemShipping" : {
        "title" : "ItemShipping",
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "description" : "The shipping amount for the item.",
            "format" : "double",
            "example" : 5.99
          },
          "taxAmount" : {
            "type" : "number",
            "description" : "The tax amount associated to the item level shipping cost.",
            "format" : "double",
            "example" : 1.99
          }
        }
      },
      "Webhook" : {
        "title" : "Webhook",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "Time at which the webhook was created",
            "format" : "date-time",
            "example" : "2018-08-29T09:12:33.001Z"
          },
          "updatedTime" : {
            "type" : "string",
            "description" : "Time at which the webhook was updated",
            "format" : "date-time",
            "example" : "2018-08-29T09:12:33.001Z"
          },
          "types" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "The name of the event type.",
              "example" : "order.created"
            }
          },
          "apiVersion" : {
            "type" : "string",
            "description" : "Indicates whether the webhook is configured for the current, default version of the API or the version specified by YYYY-MM-DD.",
            "example" : "default",
            "enum" : [ "default", "<YYYY-MM-DD>" ]
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "Indicate that webhook is enabled and receives notifications or is not enabled and does not receive notifications",
            "example" : true
          },
          "address" : {
            "type" : "string",
            "description" : "URL of the webhook endpoint on your server you have set up to receive webhook notifications. Webhook data is sent as JSON in the POST request body. The full event details are included and can be used directly, after parsing the JSON into an Event object.",
            "example" : "https://company.com"
          },
          "transportType" : {
            "type" : "string",
            "default" : "HTTP",
            "enum" : [ "HTTP", "OAUTH" ]
          },
          "oauth" : {
            "required" : [ "clientID", "clientSecret", "tokenEndPoint" ],
            "type" : "object",
            "properties" : {
              "tokenEndPoint" : {
                "type" : "string",
                "description" : "The token endpoint"
              },
              "userName" : {
                "type" : "string",
                "description" : "The user name to access token endpoint."
              },
              "password" : {
                "type" : "string",
                "description" : "The password to access token endpoint."
              },
              "clientID" : {
                "type" : "string",
                "description" : "The client identifier issued to the client during the [registration process](https://tools.ietf.org/html/rfc6749#section-2.3.1)."
              },
              "clientSecret" : {
                "type" : "string",
                "description" : "The [client secret](https://tools.ietf.org/html/rfc6749#section-2.3.1)."
              },
              "grantType" : {
                "type" : "string",
                "description" : "OAUTH grant type",
                "default" : "password",
                "enum" : [ "password" ]
              }
            }
          },
          "authentication" : {
            "type" : "object",
            "properties" : {
              "username" : {
                "type" : "string",
                "description" : "some_user_name"
              },
              "password" : {
                "type" : "string",
                "description" : "some_secure_password"
              }
            }
          }
        }
      },
      "SkuItemRequest" : {
        "title" : "SkuItemRequest",
        "type" : "object",
        "properties" : {
          "skuId" : {
            "$ref" : "#/components/schemas/SkuId"
          },
          "productDetails" : {
            "$ref" : "#/components/schemas/ProductDetails"
          },
          "subscriptionInfo" : {
            "$ref" : "#/components/schemas/SubscriptionInfo"
          },
          "price" : {
            "type" : "number",
            "description" : "The price of an item.",
            "format" : "double",
            "example" : 9.99
          },
          "aggregatePrice" : {
            "type" : "number",
            "description" : "The aggregate price of an item.",
            "format" : "double",
            "example" : 9.99
          },
          "quantity" : {
            "type" : "integer",
            "description" : "The number of items.",
            "nullable" : true,
            "example" : 2
          },
          "discount" : {
            "$ref" : "#/components/schemas/SkuDiscount"
          },
          "shipFrom" : {
            "$ref" : "#/components/schemas/ShipFrom"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "SkuItem" : {
        "title" : "SkuItem",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The identifier of the item.",
            "example" : "100067660336"
          },
          "skuId" : {
            "type" : "string",
            "description" : "The identifier of the [stock keeping unit (SKU)](https://docs.digitalriver.com/digital-river-api/checkouts-and-orders/skus).",
            "example" : "sku_5823594809"
          },
          "productDetails" : {
            "$ref" : "#/components/schemas/ProductDetails"
          },
          "subscriptionInfo" : {
            "$ref" : "#/components/schemas/SubscriptionInfo"
          },
          "fees" : {
            "$ref" : "#/components/schemas/Fees"
          },
          "quantity" : {
            "type" : "integer",
            "description" : "The number of items.",
            "example" : 2
          },
          "amount" : {
            "type" : "number",
            "description" : "The cost of the items.",
            "format" : "double",
            "example" : 18.58
          },
          "sellerTaxIdentifier" : {
            "type" : "string",
            "description" : "The tax identifier of the seller.",
            "example" : "IE6426071C"
          },
          "tax" : {
            "$ref" : "#/components/schemas/Tax"
          },
          "importerTax" : {
            "$ref" : "#/components/schemas/ImporterTax"
          },
          "duties" : {
            "$ref" : "#/components/schemas/Duties"
          },
          "discount" : {
            "$ref" : "#/components/schemas/SkuDiscount"
          },
          "shipFrom" : {
            "$ref" : "#/components/schemas/ShipFrom"
          },
          "shipping" : {
            "$ref" : "#/components/schemas/ItemShipping"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "ShippingQuoteFees" : {
        "title" : "ShippingQuoteFees",
        "type" : "object",
        "properties" : {
          "details" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ShippingQuoteFeesDetails"
            }
          },
          "amount" : {
            "type" : "number",
            "description" : "The aggregated amount of assessed fees.",
            "format" : "double",
            "example" : 4.99
          }
        }
      },
      "CheckoutTaxIdentifierRequest" : {
        "title" : "CheckoutTaxIdentifierRequest",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of a tax identifier.",
            "example" : "028af316-2d82-4113-8c5d-72eb82d5d025"
          }
        }
      },
      "MSTS" : {
        "title" : "MSTS",
        "type" : "object"
      },
      "TaxIdentifierId" : {
        "title" : "TaxIdentifierId",
        "type" : "string",
        "description" : "The unique identifier of the tax identifier.",
        "example" : "a6809a63-e6a9-4016-abbc-f33d19fccb5b"
      },
      "ShippingMethod" : {
        "title" : "ShippingMethod",
        "required" : [ "amount", "description", "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "9292981838"
          },
          "amount" : {
            "type" : "number",
            "format" : "double",
            "example" : 5.95
          },
          "description" : {
            "type" : "string",
            "example" : "USPS: Priority (1 day delivery)"
          },
          "serviceLevel" : {
            "type" : "string",
            "example" : "Standard Ground"
          }
        },
        "nullable" : true
      },
      "DropInCheckoutRequest" : {
        "title" : "DropInCheckoutRequest",
        "type" : "object",
        "properties" : {
          "upstreamId" : {
            "type" : "string",
            "description" : "The upstream checkout identifier if it is different from the Digital River checkout identifier.",
            "example" : "7765374748"
          },
          "currency" : {
            "type" : "string",
            "description" : "A three-letter ISO currency code.",
            "example" : "USD"
          },
          "customerId" : {
            "type" : "string",
            "description" : "The identifier of a registered customer.",
            "example" : "354276756332"
          },
          "language" : {
            "type" : "string",
            "description" : "Language to be used by library.",
            "example" : "en",
            "enum" : [ "ar", "cs", "da", "de", "el", "en-gb", "en", "en-us", "es", "es-419", "fi", "fr-ca", "fr", "hu", "it", "ja", "ko", "nl", "no", "pl", "pt-br", "pt", "ru", "sk", "sv", "th", "tr", "zh", "zh-hk", "zh-tw" ]
          },
          "email" : {
            "type" : "string",
            "description" : "The customer's email address.",
            "format" : "email",
            "example" : "jsmith@digitalriver.com"
          },
          "taxInclusive" : {
            "type" : "boolean",
            "example" : true
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SkuItemRequest"
            }
          },
          "shipTo" : {
            "$ref" : "#/components/schemas/IntegrationAddress"
          },
          "billTo" : {
            "$ref" : "#/components/schemas/IntegrationAddress"
          },
          "shipFrom" : {
            "$ref" : "#/components/schemas/ShipFrom"
          },
          "discount" : {
            "$ref" : "#/components/schemas/Discount"
          },
          "shippingDiscount" : {
            "$ref" : "#/components/schemas/Discount"
          },
          "browserIp" : {
            "type" : "string",
            "description" : "The IP address of the browser used by the customer when checking out.",
            "example" : "111.111.111.111"
          },
          "applicationId" : {
            "type" : "string",
            "description" : "An arbitrary identifier that can be used to track the application type.",
            "readOnly" : true,
            "example" : "68f72e0c-cb7d-48e1-93c8-998668ad0ff4"
          },
          "locale" : {
            "type" : "string",
            "description" : "A designator that combines the two-letter ISO 639-1 language code with the ISO 3166-1 alpha-2 country code.",
            "example" : "en_US"
          },
          "customerType" : {
            "$ref" : "#/components/schemas/CustomerType"
          },
          "chargeType" : {
            "$ref" : "#/components/schemas/ChargeType"
          },
          "taxIdentifiers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CheckoutTaxIdentifierRequest"
            }
          },
          "disclosures" : {
            "$ref" : "#/components/schemas/Disclosures"
          },
          "style" : {
            "type" : "object",
            "description" : "Style for drop-in",
            "example" : {
              "modal" : {
                "borderRadius" : "8px",
                "fontFamily" : "Montserrat, sans-serif",
                "fontVariant" : "normal",
                "letterSpacing" : "1px",
                "logo" : "https://drh.img.digitalriver.com/DRHM/Storefront/Site/drdod15/cm/images/DR-Demo-Store_New.png",
                "themeColor" : {
                  "headerBackground" : "#fff",
                  "highlight" : "#002f57",
                  "mainBackground" : "#fff",
                  "primary" : "#00a7e1",
                  "stepperBorder" : "#00a7e1"
                }
              },
              "textField" : {
                "base" : {
                  "color" : "#000",
                  "fontFamily" : "Arial, Helvetica, sans-serif",
                  "fontSize" : "20px",
                  "fontVariant" : "normal",
                  "letterSpacing" : "1px"
                }
              }
            }
          },
          "options" : {
            "$ref" : "#/components/schemas/DropInOptionsRequest"
          },
          "redirects" : {
            "$ref" : "#/components/schemas/Redirects"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "WebhookUpdateRequest" : {
        "title" : "WebhookUpdateRequest",
        "type" : "object",
        "properties" : {
          "types" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "The name of the event type.",
              "example" : "order.created"
            }
          },
          "apiVersion" : {
            "type" : "string",
            "description" : "Indicates whether to use the current, default version of the API or the version specified by YYYY-MM-DD.",
            "example" : "default",
            "default" : "default",
            "enum" : [ "default", "<YYYY-MM-DD>" ]
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "Indicate that webhook is enabled and receives notifications or is not enabled and does not receive notifications",
            "example" : true,
            "default" : true
          },
          "address" : {
            "type" : "string",
            "description" : "URL of the webhook endpoint on your server you have set up to receive webhook notifications. Webhook data is sent as JSON in the POST request body. The full event details are included and can be used directly, after parsing the JSON into an Event object.",
            "example" : "https://company.com"
          },
          "transportType" : {
            "type" : "string",
            "default" : "HTTP",
            "enum" : [ "HTTP", "OAUTH" ]
          },
          "oauth" : {
            "required" : [ "clientID", "clientSecret", "tokenEndPoint" ],
            "type" : "object",
            "properties" : {
              "tokenEndPoint" : {
                "type" : "string",
                "description" : "The token endpoint."
              },
              "userName" : {
                "type" : "string",
                "description" : "The user name to access token endpoint."
              },
              "password" : {
                "type" : "string",
                "description" : "The password to access token endpoint."
              },
              "clientID" : {
                "type" : "string",
                "description" : "The client identifier issued to the client during the [registration process](https://tools.ietf.org/html/rfc6749#section-2.3.1)."
              },
              "clientSecret" : {
                "type" : "string",
                "description" : "The [client secret](https://tools.ietf.org/html/rfc6749#section-2.3.1)."
              },
              "grantType" : {
                "type" : "string",
                "description" : "OAUTH grant type",
                "default" : "password",
                "enum" : [ "password" ]
              }
            }
          },
          "authentication" : {
            "type" : "object",
            "properties" : {
              "username" : {
                "type" : "string",
                "description" : "some_user_name"
              },
              "password" : {
                "type" : "string",
                "description" : "some_secure_password"
              }
            }
          }
        }
      },
      "OrderDetails" : {
        "title" : "OrderDetails",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the order.",
            "readOnly" : true,
            "example" : "ord_5823594809"
          },
          "checkoutId" : {
            "type" : "string",
            "description" : "The unique identifier of the checkout submitted to create the order.",
            "example" : "5823594809"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "Time at which the order was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "customerId" : {
            "type" : "string",
            "description" : "The identifier of the customer associated with this order.",
            "example" : "cus_5774321009"
          },
          "currency" : {
            "type" : "string",
            "description" : "A three-letter ISO currency code.",
            "example" : "usd"
          },
          "email" : {
            "type" : "string",
            "description" : "The customer's email address.",
            "format" : "email",
            "example" : "jsmith@digitalriver.com"
          },
          "locale" : {
            "type" : "string",
            "description" : "A designator that combines the two-letter ISO 639-1 language code with the ISO 3166-1 alpha-2 country code.",
            "example" : "en_US"
          },
          "browserIp" : {
            "type" : "string",
            "description" : "The IP address of the browser used by the customer when placing the order.",
            "example" : "111.111.111.111"
          },
          "applicationId" : {
            "type" : "string",
            "description" : "An arbitrary string identifier that can be used to track the application type.",
            "readOnly" : true,
            "example" : "68f72e0c-cb7d-48e1-93c8-998668ad0ff4"
          },
          "taxIdentifiers" : {
            "type" : "array",
            "description" : "A list of the tax identifiers applied to this order.",
            "items" : {
              "$ref" : "#/components/schemas/TaxIdentifier"
            }
          },
          "invoiceAttributes" : {
            "$ref" : "#/components/schemas/InvoiceAttributes"
          },
          "shipFrom" : {
            "$ref" : "#/components/schemas/ShipFrom"
          },
          "shipTo" : {
            "$ref" : "#/components/schemas/Shipping"
          },
          "billTo" : {
            "$ref" : "#/components/schemas/Billing"
          },
          "organization" : {
            "$ref" : "#/components/schemas/Organization"
          },
          "subtotal" : {
            "type" : "number",
            "description" : "Represents the total order amount exclusive of tax.",
            "format" : "double",
            "readOnly" : true,
            "example" : 1094.5
          },
          "totalTax" : {
            "type" : "number",
            "description" : "Represents the total tax amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 82.76
          },
          "totalImporterTax" : {
            "type" : "number",
            "description" : "Represents the total tax amount from the importer of record.",
            "format" : "double",
            "example" : 82.76
          },
          "importerOfRecordTax" : {
            "type" : "boolean",
            "description" : "If <code>true</code>, indicates that the tax amount is paid by the importer of record.",
            "nullable" : true,
            "readOnly" : true,
            "example" : true
          },
          "totalFees" : {
            "type" : "number",
            "description" : "Represents the total fee amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 0
          },
          "totalDuty" : {
            "type" : "number",
            "description" : "Represents the total duty amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 0
          },
          "totalDiscount" : {
            "type" : "number",
            "description" : "Represents the total discount amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 0
          },
          "totalShipping" : {
            "type" : "number",
            "description" : "Represents the total shipping amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 5.76
          },
          "totalAmount" : {
            "type" : "number",
            "description" : "Represents the total charge amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 1180.26
          },
          "discount" : {
            "$ref" : "#/components/schemas/Discount"
          },
          "availableToRefundAmount" : {
            "type" : "number",
            "description" : "The available to refund amount at the order-level.",
            "format" : "double",
            "nullable" : true,
            "example" : 18.58
          },
          "refundedAmount" : {
            "type" : "number",
            "description" : "Represents the total payment amount refunded.",
            "format" : "double",
            "readOnly" : true
          },
          "cancelledAmount" : {
            "type" : "number",
            "description" : "Represents the total payment amount cancelled.",
            "format" : "double",
            "readOnly" : true
          },
          "capturedAmount" : {
            "type" : "number",
            "description" : "Represents the total payment amount captured.",
            "format" : "double",
            "readOnly" : true
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderItem"
            }
          },
          "invoicePDFs" : {
            "type" : "array",
            "description" : "An array of links to downloadable PDF invoices. If no invoices exist yet, the array is null.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/File"
            }
          },
          "creditMemoPDFs" : {
            "type" : "array",
            "description" : "An array of links to downloadable PDF credit memos. If no credit memos exist yet, the array is null.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/File"
            }
          },
          "requestToBeForgotten" : {
            "type" : "boolean",
            "description" : "If <code>true</code> indicates a user placing an order has requested this order be forgotten.",
            "example" : true,
            "default" : false
          },
          "shippingChoice" : {
            "$ref" : "#/components/schemas/ShippingChoice"
          },
          "state" : {
            "type" : "string",
            "description" : "The current order state.",
            "readOnly" : true,
            "example" : "created",
            "enum" : [ "accepted", "blocked", "pending_payment", "in_review", "dispute", "cancelled", "fulfilled", "complete", "returned" ]
          },
          "stateTransitions" : {
            "$ref" : "#/components/schemas/OrderStateTransitions"
          },
          "fraudState" : {
            "type" : "string",
            "description" : "The fraud review state.",
            "readOnly" : true,
            "example" : "passed",
            "enum" : [ "blocked", "review_opened", "passed" ]
          },
          "fraudStateTransitions" : {
            "$ref" : "#/components/schemas/FraudStateTransitions"
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value <code>true</code> if the object exists in live mode or the value <code>false</code> if the object exists in test mode."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "sellingEntity" : {
            "$ref" : "#/components/schemas/SellingEntity"
          },
          "purchaseLocation" : {
            "$ref" : "#/components/schemas/PurchaseLocation"
          },
          "customerType" : {
            "$ref" : "#/components/schemas/CustomerType"
          },
          "upstreamId" : {
            "type" : "string",
            "description" : "The upstream identifier.",
            "nullable" : true,
            "example" : "0916805858"
          },
          "updatedTime" : {
            "type" : "string",
            "description" : "Time at which the order was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:37:00Z"
          }
        }
      },
      "ReturnsResponse" : {
        "title" : "ReturnsResponse",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the return.",
            "readOnly" : true,
            "example" : "ret_5823594809"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "The time at which the return was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "updatedTime" : {
            "type" : "string",
            "description" : "The time at which the return was updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "orderId" : {
            "type" : "string",
            "description" : "The unique identifier of the order.",
            "readOnly" : true,
            "example" : "ord_6645940010"
          },
          "currency" : {
            "type" : "string",
            "description" : "A three-letter ISO currency code.",
            "example" : "USD"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReturnsItem"
            }
          },
          "reason" : {
            "type" : "string",
            "description" : "The reason for the return.",
            "example" : "requested_by_customer"
          },
          "failureReason" : {
            "type" : "string",
            "description" : "An enumeration indicating the reason for the return failure, if known."
          },
          "state" : {
            "type" : "string",
            "description" : "An enumeration indicating the state of the return.",
            "example" : "created",
            "enum" : [ "created", "accepted" ]
          },
          "location" : {
            "$ref" : "#/components/schemas/ReturnsLocation"
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value <code>true</code> if the object exists in live mode or the value <code>false</code> if the object exists in test mode.",
            "example" : false
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "refundIds" : {
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "type" : "string",
              "description" : "The identifier of a refund issued for this return.",
              "example" : "0848750667"
            }
          }
        }
      },
      "SubscriptionInfo" : {
        "title" : "SubscriptionInfo",
        "type" : "object",
        "properties" : {
          "freeTrial" : {
            "type" : "boolean",
            "description" : "If <code>true</code>, indicates that this is a free trial.",
            "example" : true
          },
          "autoRenewal" : {
            "type" : "boolean",
            "description" : "If <code>true</code>, indicates that renewals for this subscription are automatic rather than manual.",
            "example" : true
          },
          "terms" : {
            "type" : "string",
            "description" : "For auto renewal subscriptions, the terms displayed to the customer at acquisition.",
            "example" : "Please accept these terms."
          },
          "planId" : {
            "type" : "string",
            "description" : "The unique identifier of the plan",
            "example" : "654321"
          },
          "subscriptionId" : {
            "type" : "string",
            "description" : "The subscription identifier.",
            "example" : "665430999"
          },
          "billingAgreementId" : {
            "type" : "string",
            "description" : "The Digital River billing agreement identifier.",
            "example" : "cfeba2ac-d532-49e4-99f4-7a433507facf"
          },
          "startTime" : {
            "type" : "string",
            "description" : "The start date and time of the subscription.",
            "format" : "date-time",
            "example" : "2020-05-21T00:00:00Z"
          },
          "endTime" : {
            "type" : "string",
            "description" : "The <code>startTime</code> plus the subscription duration.",
            "format" : "date-time",
            "example" : "2021-05-20T11:59:59Z"
          }
        },
        "description" : "The subscription information of the item."
      },
      "KlarnaShipping" : {
        "title" : "KlarnaShipping",
        "type" : "object",
        "properties" : {
          "recipient" : {
            "type" : "string",
            "example" : "John Doe"
          },
          "phoneNumber" : {
            "type" : "string",
            "example" : "5559895326"
          },
          "address" : {
            "$ref" : "#/components/schemas/KlarnaAddress"
          },
          "email" : {
            "type" : "string",
            "example" : "jdoe@yahoo.com"
          }
        }
      },
      "CreateDropInCheckoutTokenResponse" : {
        "title" : "CreateDropInCheckoutTokenResponse",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique checkout session identifier.",
            "readOnly" : true,
            "example" : "028af316-2d82-4113-8c5d-123456789"
          },
          "link" : {
            "type" : "string",
            "description" : "The domain of the hosted link.",
            "example" : "https://store.digitalriver.com/dropin-checkout/v1/modal?sessionId=028af316-2d82-4113-8c5d-123456789&token=pk_45971nf84m0he7792nmgmhi83mhu49sh"
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value <code>true</code> if the object exists in live mode or the value <code>false</code> if the object exists in test mode.",
            "example" : false
          }
        }
      },
      "InventoryLevel" : {
        "title" : "InventoryLevel",
        "type" : "object",
        "properties" : {
          "locationId" : {
            "type" : "string",
            "description" : "Unique identifier of a location.",
            "example" : "afe95639-8181-4b66-86a6-1a9493d5419d"
          },
          "inventoryItemId" : {
            "type" : "string",
            "description" : "The identifier of the inventory item that the inventory level belongs to.",
            "example" : "ce4ce2de-530c-4da2-bf8a-f0f8cf059095"
          },
          "available" : {
            "type" : "boolean",
            "description" : "If true, the available quantity is greater than zero.",
            "readOnly" : true,
            "example" : true
          },
          "availableQuantity" : {
            "type" : "number",
            "description" : "The quantity of inventory items available for sale.",
            "format" : "double",
            "readOnly" : true,
            "example" : 6
          },
          "availableTime" : {
            "type" : "string",
            "description" : "Time when the inventory items will be available again.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value true if the object exists in live mode or the value false if the object exists in test mode.",
            "example" : false
          },
          "updatedTime" : {
            "type" : "string",
            "description" : "Time when the inventory level was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          }
        }
      },
      "DirectDebitRedirect" : {
        "title" : "DirectDebitRedirect",
        "type" : "object",
        "properties" : {
          "redirectUrl" : {
            "type" : "string",
            "example" : "https://api.digitalriver.com:443/payments/redirects/75743f60-1023-470e-be48-b761260317af?apiKey=pk_test_6cb0fe9ce3124093a9ad906f6c589e2d"
          },
          "returnUrl" : {
            "type" : "string",
            "example" : "https://mypage.com/success"
          }
        }
      },
      "Battery" : {
        "title" : "Battery",
        "type" : "object",
        "properties" : {
          "quantity" : {
            "type" : "number",
            "description" : "The number of batteries within the product.",
            "format" : "integer",
            "example" : 2
          },
          "chemicalSystem" : {
            "type" : "string",
            "description" : "The chemical system of the battery.",
            "example" : "Alkaline"
          },
          "iecCode" : {
            "type" : "string",
            "description" : "An alphanumeric value that describes the electrical and physical attributes of a battery.",
            "example" : "R20"
          }
        },
        "description" : "A battery fee designed to make entities that produce and sell batteries responsible for collecting recycling fees."
      },
      "ShippingMethodQuoteItemRequest" : {
        "title" : "ShippingMethodQuoteItemRequest",
        "required" : [ "amount", "id", "productDetails", "quantity" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The item identifier.",
            "example" : "abc"
          },
          "amount" : {
            "type" : "number",
            "description" : "The price of the product.",
            "format" : "double",
            "example" : 9.99
          },
          "quantity" : {
            "type" : "integer",
            "example" : 1
          },
          "sku" : {
            "$ref" : "#/components/schemas/DropInSku"
          }
        }
      },
      "PayPalToken" : {
        "title" : "PayPalToken",
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string",
            "example" : "EC-53H39048EL439164J"
          }
        }
      },
      "FileLinkRequest" : {
        "title" : "FileLinkRequest",
        "required" : [ "expiresTime", "fileId" ],
        "type" : "object",
        "properties" : {
          "fileId" : {
            "type" : "string",
            "description" : "The identifier of the file to create a link to.",
            "example" : "file_b9bb0bce-c20e-4519-945e-45983a1b239b"
          },
          "expiresTime" : {
            "type" : "string",
            "description" : "A future timestamp, after which the link will no longer be usable.",
            "format" : "date-time",
            "example" : "2020-04-25T20:36:00Z"
          }
        }
      },
      "FulfillmentOrder" : {
        "title" : "FulfillmentOrder",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the Fulfillment.",
            "readOnly" : true,
            "example" : "ful_25c651d0-8079-48d7-b22e-eb1e2f451966"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "The time when the Fulfillment was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "orderId" : {
            "type" : "string",
            "description" : "The unique identifier of the Order associated with this Fulfillment.",
            "readOnly" : true,
            "example" : "ord_5678901234"
          },
          "orderDetails" : {
            "$ref" : "#/components/schemas/OrderDetails"
          },
          "shipmentId" : {
            "type" : "string",
            "description" : "The unique identifier associated to the shipment",
            "example" : "321765"
          },
          "items" : {
            "type" : "array",
            "description" : "An array of line items fulfilled and/or cancelled.",
            "items" : {
              "$ref" : "#/components/schemas/FulfillmentResponseItem"
            }
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value <code>true</code> if the object exists in live mode or the value <code>false</code> if the object exists in test mode.",
            "example" : false
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "trackingCompany" : {
            "type" : "string",
            "description" : "The name of the tracking company.",
            "example" : "Fedex"
          },
          "trackingNumber" : {
            "type" : "string",
            "description" : "A tracking number provided by the shipping company.",
            "example" : "5678901234"
          },
          "trackingUrl" : {
            "type" : "string",
            "description" : "The URL of the tracking page for the Fulfillment.",
            "example" : "http://www.digitalriver.com?code=5678901234"
          }
        }
      },
      "Business" : {
        "title" : "Business",
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "The type of invoice.",
            "example" : "cn_business_general",
            "enum" : [ "cn_business_general", "cn_business_special" ]
          },
          "attributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Attributes"
            }
          }
        }
      },
      "Shipments" : {
        "title" : "Shipments",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the shipment.",
            "example" : "string"
          },
          "labels" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LabelResponse"
            }
          },
          "packages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Packages"
            }
          }
        }
      },
      "WireTransfer" : {
        "title" : "WireTransfer",
        "type" : "object",
        "properties" : {
          "accountHolder" : {
            "type" : "string",
            "description" : ".",
            "example" : "Netgiro Payments AB"
          },
          "bankName" : {
            "type" : "string",
            "description" : ".",
            "example" : "ABN AMRO Bank N.V."
          },
          "city" : {
            "type" : "string",
            "description" : ".",
            "example" : "Prague"
          },
          "country" : {
            "type" : "string",
            "description" : ".",
            "example" : "ES"
          },
          "referenceId" : {
            "type" : "string",
            "description" : ".",
            "example" : "DR1651067521"
          },
          "accountNumber" : {
            "type" : "string",
            "description" : ".",
            "example" : "0100037259"
          },
          "additionalBankInformation" : {
            "type" : "string",
            "description" : ".",
            "example" : "Codigo de oficina: 0001 Codigo de entidad: 0156 Digitos de control: 09"
          },
          "iban" : {
            "type" : "string",
            "description" : ".",
            "example" : "ES35 0156 0001 0901 0003 7259"
          }
        }
      },
      "Redirects" : {
        "title" : "Redirects",
        "type" : "object",
        "properties" : {
          "successUrl" : {
            "type" : "string",
            "example" : "https://digitalriver.com/success"
          },
          "cancelUrl" : {
            "type" : "string",
            "example" : "https://digitalriver.com/cancel"
          }
        }
      },
      "Duties" : {
        "title" : "Duties",
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "description" : "The duty amount for the item.",
            "format" : "double",
            "example" : 12.34
          }
        }
      },
      "TaxIdentifiersInfo" : {
        "title" : "TaxIdentifiersInfo",
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "The type of tax identifier.",
            "example" : "ie"
          },
          "customerType" : {
            "type" : "string",
            "description" : "The type of customer.",
            "example" : "business",
            "enum" : [ "business", "customer" ]
          },
          "isRequired" : {
            "type" : "boolean",
            "description" : "Indicates whether or not tax id is required.",
            "example" : false
          },
          "formatPattern" : {
            "type" : "string",
            "description" : "The format pattern of the tax id.",
            "example" : "^[Ii][Ee]\\\\d\\\\d\\\\d\\\\d\\\\d\\\\d\\\\d[A-Za-z]$|^[Ii][Ee]\\\\d\\\\d\\\\d\\\\d\\\\d\\\\d[A-Za-z]$|^[Ii][Ee]\\\\d\\\\d\\\\d\\\\d\\\\d\\\\d\\\\d[A-Za-z][A-Za-z]$|^[Ii][Ee]\\\\d[A-Za-z]\\\\d\\\\d\\\\d\\\\d\\\\d[A-Za-z]$"
          },
          "locales" : {
            "$ref" : "#/components/schemas/Locale"
          }
        }
      },
      "InternetBankPayment" : {
        "title" : "InternetBankPayment",
        "type" : "object",
        "properties" : {
          "bankCode" : {
            "type" : "string",
            "example" : "86"
          }
        }
      },
      "GlobalFulfillmentReturnResponse" : {
        "title" : "GlobalFulfillmentReturnResponse",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the fulfillment return.",
            "readOnly" : true,
            "example" : "ret_5823594809"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "The time when the fulfillment return was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "fulfillmentOrderId" : {
            "type" : "string",
            "description" : "The unique identifier of the fulfillment order associated with the fulfillment return.",
            "readOnly" : true,
            "example" : "ord_6645940010"
          },
          "upstreamId" : {
            "type" : "string",
            "description" : "The unique identifier of the upstream order.",
            "readOnly" : true,
            "example" : "ord_6645940010"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GlobalFulfillmentReturnItemResponse"
            }
          },
          "reason" : {
            "type" : "string",
            "description" : "The reason for the return.",
            "example" : "requested_by_customer"
          },
          "state" : {
            "type" : "string",
            "description" : "An enumeration indicating the state of the fulfillment return.",
            "example" : "pending",
            "enum" : [ "created", "pending", "accepted", "rejected" ]
          },
          "type" : {
            "type" : "string",
            "description" : "An enumeration indicating the type of the fulfillment return.",
            "example" : "client",
            "enum" : [ "client", "warehouse" ]
          },
          "location" : {
            "$ref" : "#/components/schemas/Location"
          },
          "livemode" : {
            "type" : "boolean",
            "description" : "Has the value true if the object exists in live mode or the value false if the object exists in test mode.",
            "example" : false
          }
        }
      },
      "Shipment" : {
        "title" : "Shipment",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of a shipment.",
            "readOnly" : true,
            "example" : "29016544906"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "Time when the shipment was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "fulfillmentOrderId" : {
            "type" : "string",
            "description" : "The identifier of the fulfillment order.",
            "example" : "5774321009"
          },
          "fulfillmentOrderUpstreamId" : {
            "type" : "string",
            "description" : "The upstream identifier of the fulfillment order."
          },
          "shippingChoiceId" : {
            "type" : "string",
            "description" : "The shipping method.",
            "readOnly" : true,
            "example" : "SG"
          },
          "trackingCompanyId" : {
            "type" : "string",
            "description" : "The unique identifier of the tracking or carrier company.",
            "nullable" : true,
            "readOnly" : true,
            "example" : "0001"
          },
          "trackingCompany" : {
            "type" : "string",
            "description" : "The name of the tracking or carrier company.",
            "example" : "Fedex"
          },
          "trackingNumber" : {
            "type" : "string",
            "description" : "The tracking number provided by the carrier company.",
            "example" : "5678901234"
          },
          "trackingUrl" : {
            "type" : "string",
            "description" : "The URL of the fulfillment tracking page.",
            "example" : "http://www.digitalriver.com?code=5678901234"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ShipmentItem"
            }
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value true if the object exists in live mode or the value false if the object exists in test mode.",
            "example" : false
          }
        }
      },
      "BooleanMetadata" : {
        "title" : "BooleanMetadata",
        "type" : "object",
        "additionalProperties" : {
          "type" : "boolean"
        },
        "example" : {
          "coupon" : true
        }
      },
      "PlanRequest" : {
        "title" : "PlanRequest",
        "required" : [ "billingOffsetDays", "collectionPeriodDays", "contractBindingDays", "interval", "intervalCount", "terms" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of a Plan.",
            "example" : "4a1a1fdd-2f7b-4a4e-92d2-2e843f06e82a"
          },
          "terms" : {
            "type" : "string",
            "description" : "The contractual agreement displayed to the customer during the acquisition process.",
            "example" : "These are the terms..."
          },
          "contractBindingDays" : {
            "type" : "integer",
            "description" : "Indicates the agreed upon length of the contract. For example, an annual subscription should have a value of 365.",
            "example" : 365
          },
          "interval" : {
            "type" : "string",
            "description" : "The supported billing intervals",
            "example" : "month",
            "enum" : [ "year", "month", "week", "day" ]
          },
          "intervalCount" : {
            "type" : "integer",
            "description" : "How often the customer is billed per the unit of time specified by <code>interval</code> (e.g. every 3 months).",
            "example" : 1
          },
          "name" : {
            "type" : "string",
            "description" : "Describes the subscription products or services added to this plan.",
            "nullable" : true,
            "example" : "Womens cotton dresses"
          },
          "reminderOffsetDays" : {
            "type" : "integer",
            "description" : "The number of days before the opening of the invoice that the reminder event is triggered.",
            "nullable" : true,
            "example" : 7
          },
          "billingOffsetDays" : {
            "type" : "integer",
            "description" : "The number of days before the due date that billing is initiated.",
            "nullable" : true,
            "example" : 4
          },
          "collectionPeriodDays" : {
            "type" : "integer",
            "description" : "Represents the number of days that Digital River attempts to collect payment.",
            "nullable" : true,
            "example" : 10
          },
          "state" : {
            "type" : "string",
            "description" : "The valid states of a plan. Setting a plan to <code>deactivated</code> causes all connected subscriptions to end with the current period.",
            "example" : "active",
            "enum" : [ "draft", "active", "discontinued", "deactivated" ]
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "KlarnaAddress" : {
        "title" : "KlarnaAddress",
        "type" : "object",
        "properties" : {
          "line1" : {
            "type" : "string",
            "example" : "10380 Bren Road West"
          },
          "city" : {
            "type" : "string",
            "example" : "Minnetonka"
          },
          "state" : {
            "type" : "string",
            "example" : "MN"
          },
          "country" : {
            "type" : "string",
            "example" : "US"
          },
          "postalCode" : {
            "type" : "string",
            "example" : "55343"
          }
        }
      },
      "Individual" : {
        "title" : "Individual",
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "The type of invoice.",
            "example" : "cn_individual_general",
            "enum" : [ "cn_individual_general", "tw_individual_member_carrier", "tw_individual_mobile_barcode", "tw_individual_citizen_cert", "tw_individual_donate" ]
          },
          "attributes" : {
            "$ref" : "#/components/schemas/Attributes"
          }
        }
      },
      "FileRequest" : {
        "title" : "FileRequest",
        "required" : [ "file", "purpose" ],
        "type" : "object",
        "properties" : {
          "file" : {
            "type" : "string",
            "description" : "A file to upload. The file should follow the specifications of RFC 2388 (which defines file transfers for the multipart/form-data protocol). Alternatively, a base64 encoded string may be sent.",
            "format" : "binary"
          },
          "purpose" : {
            "type" : "string",
            "description" : "The purpose of the uploaded file.",
            "example" : "tax_document_customer_upload",
            "enum" : [ "tax_document_customer_upload", "customer_invoice", "customer_credit_memo" ]
          },
          "fileName" : {
            "type" : "string",
            "description" : "A filename for the file, suitable for saving to a filesystem. fileName is required for a based64 encoded file.",
            "example" : "file.png"
          },
          "title" : {
            "type" : "string",
            "description" : "A user friendly title for the document.",
            "example" : "My 2019 Tax Certificate."
          },
          "linkExpiresTime" : {
            "type" : "string",
            "description" : "Time at which the link expires.",
            "format" : "date-time",
            "example" : "2020-04-25T20:36:00Z"
          }
        }
      },
      "BankTransfer" : {
        "title" : "BankTransfer",
        "type" : "object"
      },
      "Klarna" : {
        "title" : "Klarna",
        "type" : "object",
        "properties" : {
          "shipping" : {
            "$ref" : "#/components/schemas/KlarnaShipping"
          },
          "token" : {
            "type" : "string",
            "example" : "1111222233334444"
          }
        }
      },
      "TaxIdentifierRequest" : {
        "title" : "TaxIdentifierRequest",
        "required" : [ "type", "value" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "The type of tax identifier.",
            "example" : "de"
          },
          "value" : {
            "type" : "string",
            "description" : "The tax identifier.",
            "example" : "DE123456789"
          }
        }
      },
      "Disclosures" : {
        "title" : "Disclosures",
        "type" : "object",
        "properties" : {
          "disclosures" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DisclosureDetails"
            }
          }
        }
      },
      "InventoryItem" : {
        "title" : "InventoryItem",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of an inventory item.",
            "example" : "5823594809"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "Time when the inventory item was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "manufacturerId" : {
            "type" : "string",
            "description" : "Unique Digital River manufacturer identifier.",
            "nullable" : true,
            "example" : "84f18544-e6ab-44bb-b543-56c7b30fb6ca"
          },
          "eccn" : {
            "type" : "string",
            "description" : "Export control classification number.",
            "example" : "EAR99"
          },
          "hsCode" : {
            "type" : "string",
            "description" : "International & US HS Code & Harmonized Tariff Code.",
            "example" : "6404.20"
          },
          "partNumber" : {
            "type" : "string",
            "description" : "Manufacturer part number.",
            "example" : "SWG1224J10L"
          },
          "countryOfOrigin" : {
            "type" : "string",
            "description" : "An ISO 3166-1 alpha-2 country code.",
            "example" : "US"
          },
          "allowOversell" : {
            "type" : "boolean",
            "description" : "If true, customers are allowed to reserve inventory of the item when it is out of stock.",
            "nullable" : true,
            "example" : false
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value true if the object exists in live mode or the value false if the object exists in test mode.",
            "example" : false
          },
          "updatedTime" : {
            "type" : "string",
            "description" : "Time when the inventory item was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          }
        }
      },
      "CreateReturnsResponse" : {
        "title" : "CreateReturnsResponse",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the return.",
            "readOnly" : true,
            "example" : "ret_5823594809"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "Time at which the return was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "orderId" : {
            "type" : "string",
            "description" : "The unique identifier of the order.",
            "readOnly" : true,
            "example" : "ord_6645940010"
          },
          "currency" : {
            "type" : "string",
            "description" : "Three-letter ISO currency code.",
            "example" : "USD"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReturnsItem"
            }
          },
          "reason" : {
            "type" : "string",
            "description" : "The reason for the return.",
            "example" : "requested_by_customer"
          },
          "state" : {
            "type" : "string",
            "description" : "Enumeration indicating the state of the return.",
            "example" : "created",
            "enum" : [ "created", "accepted" ]
          },
          "location" : {
            "$ref" : "#/components/schemas/ReturnsLocation"
          },
          "livemode" : {
            "type" : "boolean",
            "description" : "Has the value true if the object exists in live mode or the value false if the object exists in test mode.",
            "example" : false
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "refundIds" : {
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "type" : "string",
              "description" : "The identifier of a refund requested for this return.",
              "example" : "ref_0848750667"
            }
          }
        }
      },
      "TaxIdentifierStateTransitions" : {
        "title" : "TaxIdentifierStateTransitions",
        "type" : "object",
        "properties" : {
          "pending" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "verified" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "not_valid" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true,
            "example" : "2018-04-25T20:36:00Z"
          }
        },
        "description" : "A timestamp of when the state was updated.",
        "nullable" : true,
        "readOnly" : true
      },
      "SkuRequestItem" : {
        "title" : "SkuRequestItem",
        "type" : "object",
        "properties" : {
          "skuId" : {
            "$ref" : "#/components/schemas/SkuId"
          },
          "productDetails" : {
            "$ref" : "#/components/schemas/ProductDetails"
          },
          "subscriptionInfo" : {
            "$ref" : "#/components/schemas/SubscriptionInfo"
          },
          "price" : {
            "type" : "number",
            "description" : "The price of an item.",
            "format" : "double",
            "example" : 9.99
          },
          "aggregatePrice" : {
            "type" : "number",
            "description" : "The total price of multiple items.",
            "format" : "double",
            "example" : 19.98
          },
          "quantity" : {
            "type" : "integer",
            "description" : "The number of items.",
            "nullable" : true,
            "example" : 2
          },
          "discount" : {
            "$ref" : "#/components/schemas/SkuDiscount"
          },
          "shipFrom" : {
            "$ref" : "#/components/schemas/ShipFrom"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "bPay" : {
        "title" : "bPay",
        "type" : "object",
        "properties" : {
          "accountHolder" : {
            "type" : "string",
            "example" : "Global Collect BV"
          },
          "bankName" : {
            "type" : "string",
            "example" : "Commonwealth Bank"
          },
          "city" : {
            "type" : "string",
            "example" : "Sydney"
          },
          "country" : {
            "type" : "string",
            "example" : "Australia"
          },
          "referenceId" : {
            "type" : "string",
            "example" : "12345678"
          },
          "accountNumber" : {
            "type" : "string",
            "example" : "87654321"
          },
          "billId" : {
            "type" : "string",
            "example" : "112233"
          },
          "customerPaymentReference" : {
            "type" : "string",
            "example" : "443322"
          },
          "swiftCode" : {
            "type" : "string",
            "example" : "CTBAAU2S"
          }
        }
      },
      "Shipping_1" : {
        "title" : "Shipping_1",
        "type" : "object",
        "properties" : {
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "name" : {
            "type" : "string",
            "description" : "The recipient’s name.",
            "nullable" : true,
            "example" : "John Smith"
          },
          "phone" : {
            "type" : "string",
            "description" : "The recipient’s phone number.",
            "nullable" : true,
            "example" : "952-111-1111"
          },
          "email" : {
            "type" : "string",
            "description" : "The recipient’s email address.",
            "format" : "email",
            "nullable" : true,
            "example" : "jsmith@digitalriver.com"
          },
          "organization" : {
            "type" : "string",
            "description" : "The recipient’s organization.",
            "nullable" : true,
            "example" : "Digital River"
          },
          "additionalAddressInfo" : {
            "$ref" : "#/components/schemas/AdditionalAddressInfo"
          }
        }
      },
      "CustomerRequest" : {
        "title" : "CustomerRequest",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of a customer.",
            "example" : "5823594808"
          },
          "email" : {
            "type" : "string",
            "description" : "The customer email address.",
            "format" : "email",
            "example" : "jsmith@digitalriver.com"
          },
          "shipping" : {
            "$ref" : "#/components/schemas/Shipping"
          },
          "defaultSourceId" : {
            "type" : "string",
            "description" : "The identifier of the default source attached to this customer.",
            "example" : "fd74a5c5-0163-469a-ae8e-031f0259b576"
          },
          "taxCertificate" : {
            "$ref" : "#/components/schemas/TaxCertificate"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "locale" : {
            "type" : "string",
            "description" : "A locale designator that combines the two-letter ISO 639-1 language code with the ISO 3166-1 alpha-2 country code.",
            "example" : "en_US"
          },
          "type" : {
            "$ref" : "#/components/schemas/CustomerType"
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "Usually used to disable the customer. The default is <code>true</code>. If <code>false</code>, attempts to create orders for the customer will fail.",
            "example" : true
          }
        }
      },
      "GooglePay" : {
        "title" : "GooglePay",
        "type" : "object",
        "properties" : {
          "lastFourDigits" : {
            "type" : "string",
            "description" : "The last four digits of the card number.",
            "example" : "3119"
          },
          "expirationMonth" : {
            "type" : "number",
            "description" : "One to two digits representing the expiration month.",
            "format" : "integer",
            "example" : 2
          },
          "expirationYear" : {
            "type" : "number",
            "description" : "Four digits representing the expiration year.",
            "format" : "integer",
            "example" : 2022
          },
          "brand" : {
            "type" : "string",
            "description" : "The card brand.",
            "example" : "Visa"
          }
        }
      },
      "Shipping" : {
        "title" : "Shipping",
        "type" : "object",
        "properties" : {
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "name" : {
            "type" : "string",
            "description" : "The recipient’s name.",
            "nullable" : true,
            "example" : "John Smith"
          },
          "phone" : {
            "type" : "string",
            "description" : "The recipient’s phone number.",
            "nullable" : true,
            "example" : "952-111-1111"
          },
          "email" : {
            "type" : "string",
            "description" : "The recipient’s email address.",
            "format" : "email",
            "nullable" : true,
            "example" : "jsmith@digitalriver.com"
          },
          "organization" : {
            "type" : "string",
            "description" : "The recipient’s organization.",
            "nullable" : true,
            "example" : "Digital River"
          },
          "additionalAddressInfo" : {
            "$ref" : "#/components/schemas/AdditionalAddressInfo"
          }
        }
      },
      "UpdateOrderRequest" : {
        "title" : "UpdateOrderRequest",
        "type" : "object",
        "properties" : {
          "requestToBeForgotten" : {
            "type" : "boolean",
            "description" : "If <code>true</code>, indicates the user who placed the order has requested this order be forgotten.",
            "example" : true,
            "default" : false
          },
          "upstreamId" : {
            "type" : "string",
            "description" : "The upstream identifier.",
            "nullable" : true,
            "example" : "0916805858"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "ReturnItemRequest" : {
        "title" : "ReturnItemRequest",
        "required" : [ "itemId", "quantity" ],
        "type" : "object",
        "properties" : {
          "itemId" : {
            "type" : "string",
            "description" : "The identifier of the item.",
            "example" : "99341140336"
          },
          "quantity" : {
            "type" : "integer",
            "description" : "The number of items.",
            "example" : 1
          }
        }
      },
      "ReturnResponse" : {
        "title" : "ReturnResponse",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the return.",
            "readOnly" : true,
            "example" : "ret_5823594809"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "The time at which the return was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "orderId" : {
            "type" : "string",
            "description" : "The unique identifier of the order associated with the return.",
            "example" : "6645940010"
          },
          "rmaNumber" : {
            "type" : "string",
            "description" : "The return merchandise authorization number.",
            "example" : "2343256645940010"
          },
          "reason" : {
            "maxLength" : 64,
            "type" : "string",
            "description" : "The reason for the return.",
            "example" : "requested_by_customer"
          },
          "type" : {
            "type" : "string",
            "example" : "authorized",
            "enum" : [ "authorization", "received", "refused", "undeliverable" ]
          },
          "returnTo" : {
            "$ref" : "#/components/schemas/Shipping"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReturnItem"
            }
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value <code>true</code> if the object exists in live mode or the value <code>false</code> if the object exists in test mode.",
            "example" : false
          }
        }
      },
      "PayPal" : {
        "title" : "PayPal",
        "type" : "object",
        "properties" : {
          "redirect" : {
            "$ref" : "#/components/schemas/Redirect"
          },
          "directDebit" : {
            "$ref" : "#/components/schemas/PayPalToken"
          }
        }
      },
      "CustomerType_1" : {
        "title" : "CustomerType_1",
        "type" : "string",
        "description" : "The type of customer.",
        "example" : "individual",
        "enum" : [ "business", "individual" ]
      },
      "ReservationAddress" : {
        "title" : "ReservationAddress",
        "required" : [ "country" ],
        "type" : "object",
        "properties" : {
          "city" : {
            "type" : "string",
            "nullable" : true,
            "example" : "Minnetonka"
          },
          "postalCode" : {
            "type" : "string",
            "nullable" : true,
            "example" : "55129"
          },
          "state" : {
            "type" : "string",
            "nullable" : true,
            "example" : "MN"
          },
          "country" : {
            "type" : "string",
            "example" : "US"
          }
        },
        "description" : "The customer's shipping address."
      },
      "Charge" : {
        "title" : "Charge",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the charge.",
            "readOnly" : true,
            "example" : "a6809a63-e6a9-4016-abbc-f33d19fccb5b"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "The time when the charge was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "currency" : {
            "type" : "string",
            "description" : "A three-letter ISO 4217 currency code.",
            "example" : "USD"
          },
          "amount" : {
            "type" : "number",
            "description" : "An amount representing how much is to be to charged.",
            "format" : "double",
            "example" : 1180.26
          },
          "state" : {
            "type" : "string",
            "description" : "The state of the charge.",
            "example" : "pending",
            "enum" : [ "pending", "capturable", "processing", "complete", "cancelled", "failed" ]
          },
          "orderId" : {
            "type" : "string",
            "description" : "The identifier of the associated order.",
            "example" : "9986340012"
          },
          "sourceId" : {
            "type" : "string",
            "description" : "The identifier of the source.",
            "example" : "9986340012"
          },
          "failureCode" : {
            "type" : "string",
            "description" : "Error code identifying reason for charge failure.",
            "example" : "a failure code"
          },
          "failureMessage" : {
            "type" : "string",
            "description" : "Error message describing reason for charge failure.",
            "example" : "a failure message"
          },
          "paymentSessionId" : {
            "type" : "string",
            "description" : "Tracks the process of collecting a payment.",
            "example" : "8cecaa32-f692-44cc-b103-4cf24dc93913"
          },
          "cancels" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Cancel"
            }
          },
          "captures" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Capture"
            }
          },
          "captured" : {
            "type" : "boolean",
            "description" : "Indicates if the charge has been captured.",
            "example" : false
          },
          "refunds" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Refund"
            }
          },
          "refunded" : {
            "type" : "boolean",
            "description" : "Indicates if the charge has been refunded.",
            "example" : false
          },
          "type" : {
            "type" : "string",
            "description" : "The type of charge.",
            "enum" : [ "customer_initiated", "merchant_initiated", "moto" ]
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value <code>true</code> if the object exists in live mode and the value <code>false</code> if the object exists in test mode.",
            "example" : true
          }
        }
      },
      "ShippingChoice" : {
        "title" : "ShippingChoice",
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "description" : "The shipping amount.",
            "format" : "double",
            "example" : 5.95
          },
          "taxAmount" : {
            "type" : "number",
            "description" : "The shipping taxable amount.",
            "format" : "double",
            "example" : 0.1
          },
          "description" : {
            "type" : "string",
            "description" : "A description of the shipping choice.",
            "example" : "USPS: Priority (1 day delivery)"
          },
          "serviceLevel" : {
            "type" : "string",
            "description" : "A shipping code that represents the service level.",
            "example" : "Standard Ground"
          },
          "shippingTerms" : {
            "type" : "string",
            "description" : "The terms of shipping.",
            "example" : "DDP",
            "enum" : [ "DDP", "DAP" ]
          }
        },
        "description" : "Represents the shipping amount, description, taxes, and service level.",
        "nullable" : true
      },
      "StoreCreditValidationResponse" : {
        "title" : "StoreCreditValidationResponse",
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "description" : "The store credit amount.",
            "format" : "double",
            "example" : 5
          },
          "upstreamId" : {
            "type" : "string",
            "description" : "The upstream store credit identifier.",
            "example" : "7654-2345-0987-123456"
          },
          "approval" : {
            "type" : "boolean",
            "description" : "Indicates whether the store credit .",
            "example" : true
          }
        }
      },
      "CreditCard" : {
        "title" : "CreditCard",
        "type" : "object",
        "properties" : {
          "lastFourDigits" : {
            "type" : "string",
            "description" : "The last four digits of the card number.",
            "example" : "3119"
          },
          "expirationMonth" : {
            "type" : "number",
            "description" : "One to two digits representing the expiration month.",
            "format" : "integer",
            "example" : 3
          },
          "expirationYear" : {
            "type" : "number",
            "description" : "Four digits representing the expiration year.",
            "format" : "integer",
            "example" : 2023
          },
          "brand" : {
            "type" : "string",
            "description" : "The card brand.",
            "example" : "Visa"
          }
        }
      },
      "FulfillmentRequestItem" : {
        "title" : "FulfillmentRequestItem",
        "type" : "object",
        "properties" : {
          "itemId" : {
            "type" : "string",
            "description" : "The unique identifier of the line item.",
            "example" : "98784590336"
          },
          "skuId" : {
            "type" : "string",
            "description" : "The unique identifier of the aku.",
            "readOnly" : true,
            "example" : "98784590336"
          },
          "shipmentItemId" : {
            "type" : "string",
            "description" : "The unique identifier associated to the shipment item",
            "example" : "321765"
          },
          "quantity" : {
            "type" : "integer",
            "description" : "The number of items fulfilled. You must provide either this value and/or a value for the <code>cancelQuantity</code> attribute.",
            "nullable" : true,
            "example" : 1
          },
          "cancelQuantity" : {
            "type" : "integer",
            "description" : "The number of items cancelled. You must provide either this value and/or a value for the <code>quantity</code> attribute.",
            "nullable" : true,
            "example" : 1
          }
        }
      },
      "GiftCard" : {
        "title" : "GiftCard",
        "type" : "object",
        "properties" : {
          "cardCurrency" : {
            "type" : "string",
            "description" : "The currency used by the card.",
            "example" : "USD"
          },
          "conversionRate" : {
            "type" : "number",
            "description" : "The conversion rate of the currency.",
            "example" : 1.0
          },
          "lastFourDigits" : {
            "type" : "integer",
            "description" : "The last four digits of the card.",
            "example" : 8139
          }
        }
      },
      "InvoiceAttributeInfo" : {
        "title" : "InvoiceAttributeInfo",
        "type" : "object",
        "properties" : {
          "isRequired" : {
            "type" : "boolean",
            "description" : "Designates if the invoice attributes are required.",
            "example" : false
          },
          "individual" : {
            "$ref" : "#/components/schemas/Individual"
          },
          "business" : {
            "$ref" : "#/components/schemas/Business"
          }
        }
      },
      "Billing" : {
        "title" : "Billing",
        "required" : [ "address" ],
        "type" : "object",
        "properties" : {
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "name" : {
            "type" : "string",
            "nullable" : true,
            "example" : "John Smith"
          },
          "phone" : {
            "type" : "string",
            "nullable" : true,
            "example" : "952-111-1111"
          },
          "email" : {
            "type" : "string",
            "format" : "email",
            "nullable" : true,
            "example" : "jsmith@digitalriver.com"
          },
          "organization" : {
            "type" : "string",
            "nullable" : true,
            "example" : "Digital River"
          },
          "additionalAddressInfo" : {
            "$ref" : "#/components/schemas/AdditionalBillingAddressInfo"
          }
        },
        "description" : "Customer billing information."
      },
      "IntegrationShippingMethod" : {
        "title" : "IntegrationShippingMethod",
        "required" : [ "amount", "description", "serviceLevel" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "description" : "The shipping method's cost.",
            "format" : "double",
            "example" : 5.95
          },
          "description" : {
            "type" : "string",
            "description" : "The shipping method's description.",
            "example" : "USPS: Priority (1 day delivery)"
          },
          "serviceLevel" : {
            "type" : "string",
            "example" : "Standard Ground"
          }
        }
      },
      "SalesSummary" : {
        "title" : "SalesSummary",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier for the sales summary",
            "readOnly" : true,
            "example" : "8100000400_1410_2019"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "Time at which the sales summary was created",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-04-25T20:36:00Z"
          },
          "salesClosingTime" : {
            "type" : "string",
            "description" : "Time at which the sales summary was closed",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-04-25T00:00:00Z"
          },
          "currency" : {
            "type" : "string",
            "description" : "Three-letter ISO currency code representing the sales summary currency.",
            "example" : "USD"
          },
          "amount" : {
            "type" : "number",
            "description" : "Represents the total sales summary amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 1180.26
          },
          "payoutId" : {
            "type" : "string",
            "description" : "Payout identifier",
            "readOnly" : true,
            "example" : "2000028600_1410_2019"
          },
          "paid" : {
            "type" : "boolean",
            "description" : "If true, indicates that this sales summary has been paid.",
            "example" : true
          },
          "payerId" : {
            "type" : "string",
            "description" : "The ID of payer.",
            "example" : "1410"
          },
          "payerName" : {
            "type" : "string",
            "description" : "The name of the payer",
            "example" : "DR globalTech, Inc."
          },
          "payeeId" : {
            "type" : "string",
            "description" : "The ID of the payee.",
            "example" : "0013900100"
          },
          "payeeName" : {
            "type" : "string",
            "description" : "The name of the payee.",
            "example" : "ACME, Inc."
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value true if the object exists in live mode or the value false if the object exists in test mode.",
            "example" : true
          }
        }
      },
      "Sku" : {
        "title" : "Sku",
        "type" : "object",
        "properties" : {
          "createdTime" : {
            "type" : "string",
            "description" : "The time when the SKU was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the SKU.",
            "example" : "sku_5823594809"
          },
          "eccn" : {
            "type" : "string",
            "description" : "The export control classification number.",
            "example" : "EAR99"
          },
          "hsCode" : {
            "type" : "string",
            "description" : "The international and US Harmonized System code (sometimes referred to as the Harmonized Tariff Schedule).",
            "example" : "6404.20"
          },
          "skuGroupId" : {
            "type" : "string",
            "description" : "The unique identifier of the Sku Group.",
            "example" : "5823594809"
          },
          "partNumber" : {
            "type" : "string",
            "description" : "The manufacturer's part number.",
            "example" : "SWG1224J10L"
          },
          "manufacturerId" : {
            "type" : "string",
            "description" : "The unique identifier",
            "example" : "654123"
          },
          "managedFulfillment" : {
            "type" : "string",
            "description" : "Signifies the product is physically fulfilled by Digital River.",
            "enum" : [ "DRGlobalFulfillment" ]
          },
          "physical" : {
            "type" : "boolean",
            "description" : "Identifies whether or not a product is  physical, so that the appropriate data requirements are enforced.",
            "example" : true
          },
          "taxCode" : {
            "type" : "string",
            "description" : "The designated tax code.",
            "example" : "4323.310_A"
          },
          "name" : {
            "type" : "string",
            "description" : "The product’s name.",
            "example" : "Athena Womens Running Shoes"
          },
          "description" : {
            "type" : "string",
            "description" : "A description of the product.",
            "example" : "Athena Womens Running Shoes"
          },
          "image" : {
            "type" : "string",
            "description" : "An image of the product.",
            "example" : "https://imageurl.com"
          },
          "url" : {
            "type" : "string",
            "description" : "A product url.",
            "example" : "https://producturl.com"
          },
          "countryOfOrigin" : {
            "type" : "string",
            "description" : "A two-letter Alpha-2 country code as described in the ISO 3166 international standard.",
            "example" : "US"
          },
          "weight" : {
            "type" : "number",
            "description" : "The weight of the product measured in the unit specified by weightUnit.",
            "format" : "double",
            "example" : 20.5
          },
          "weightUnit" : {
            "type" : "string",
            "description" : "The unit of measurement applied to the weight.",
            "example" : "oz",
            "enum" : [ "oz", "lb", "g", "kg" ]
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value <code>true</code> if the object exists in live mode or the value <code>false</code> if the object exists in test mode.",
            "example" : false
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "updatedTime" : {
            "type" : "string",
            "description" : "The time when the SKU was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          }
        }
      },
      "ProductItem" : {
        "title" : "ProductItem",
        "required" : [ "itemId", "quantity" ],
        "type" : "object",
        "properties" : {
          "quantity" : {
            "type" : "integer",
            "example" : 1
          },
          "itemId" : {
            "type" : "string",
            "description" : "Digital River's line item identifier from the order",
            "example" : "SWG1224J10L"
          },
          "productDetails" : {
            "$ref" : "#/components/schemas/ProductDetails"
          }
        }
      },
      "Location" : {
        "title" : "Location",
        "required" : [ "address" ],
        "type" : "object",
        "properties" : {
          "address" : {
            "$ref" : "#/components/schemas/GlobalFulfillmentAddress"
          },
          "name" : {
            "type" : "string",
            "nullable" : true,
            "example" : "John Smith"
          },
          "phone" : {
            "type" : "string",
            "nullable" : true,
            "example" : "952-111-1111"
          },
          "email" : {
            "type" : "string",
            "format" : "email",
            "nullable" : true,
            "example" : "jsmith@digitalriver.com"
          }
        },
        "description" : "The address where the customer should return the products."
      },
      "FeeDetails" : {
        "title" : "FeeDetails",
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "example" : "battery",
            "enum" : [ "battery", "weee", "copyright", "e_waste", "packaging" ]
          },
          "amount" : {
            "type" : "number",
            "description" : "The <code>details[].perUnitAmount</code> multiplied by the <code>quantity</code> of the line item.",
            "format" : "double",
            "example" : 3.0
          },
          "perUnitAmount" : {
            "type" : "number",
            "description" : "The fee amount per unit.",
            "format" : "double",
            "example" : 1.5
          },
          "id" : {
            "type" : "string",
            "description" : "The Fee's unique identifier.",
            "example" : "asdkj1h239lkj123j9123"
          }
        }
      },
      "GlobalFulfillmentReturnRequest" : {
        "title" : "GlobalFulfillmentReturnRequest",
        "required" : [ "fulfillmentOrderId", "items" ],
        "type" : "object",
        "properties" : {
          "fulfillmentOrderId" : {
            "type" : "string",
            "description" : "The unique identifier of the fulfillment order associated with the fulfillment return.",
            "example" : "6645940010"
          },
          "upstreamId" : {
            "type" : "string",
            "description" : "The unique identifier of the upstream order.",
            "example" : "6645940010"
          },
          "reason" : {
            "type" : "string",
            "description" : "The reason for the return.",
            "example" : "requested_by_customer"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GlobalFulfillmentReturnItemRequest"
            }
          }
        }
      },
      "Invoice" : {
        "title" : "Invoice",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the invoice.",
            "readOnly" : true,
            "example" : "co_5823594809"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "The time at which the invoice was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "updatedTime" : {
            "type" : "string",
            "description" : "The time at which the invoice was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "customerId" : {
            "type" : "string",
            "description" : "The identifier of the invoiced customer.",
            "example" : "5774321009"
          },
          "email" : {
            "type" : "string",
            "description" : "The email address of the invoiced customer.",
            "format" : "email",
            "example" : "jsmith@digitalriver.com"
          },
          "currency" : {
            "type" : "string",
            "description" : "A three-letter ISO 4217 currency code.",
            "example" : "USD"
          },
          "description" : {
            "type" : "string",
            "description" : "An arbitrary string attached to the invoice."
          },
          "locale" : {
            "$ref" : "#/components/schemas/Locale"
          },
          "discount" : {
            "$ref" : "#/components/schemas/Discount"
          },
          "customerType" : {
            "$ref" : "#/components/schemas/CustomerType"
          },
          "sellingEntity" : {
            "$ref" : "#/components/schemas/SellingEntity"
          },
          "taxIdentifiers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TaxIdentifier"
            }
          },
          "subtotal" : {
            "type" : "number",
            "description" : "Represents the total amount of the order exclusive of tax.",
            "format" : "double",
            "readOnly" : true,
            "example" : 200.0
          },
          "totalTax" : {
            "type" : "number",
            "description" : "Represents the total tax amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 14.25
          },
          "totalFees" : {
            "type" : "number",
            "description" : "Represents the total fee amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 0
          },
          "totalDuty" : {
            "type" : "number",
            "description" : "Represents the total duty amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 0
          },
          "totalImporterTax" : {
            "type" : "number",
            "description" : "Represents the total tax amount from the importer of record.",
            "format" : "double",
            "example" : 82.76
          },
          "importerOfRecordTax" : {
            "type" : "boolean",
            "description" : "If <code>true</code>, indicates that the tax amount is paid by the importer of record.",
            "nullable" : true,
            "readOnly" : true,
            "example" : true
          },
          "totalDiscount" : {
            "type" : "number",
            "description" : "Represents the total discount amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 0
          },
          "totalShipping" : {
            "type" : "number",
            "description" : "Represents the total shipping amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 5.76
          },
          "totalAmount" : {
            "type" : "number",
            "description" : "Represents the total charge amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 214.25
          },
          "collectionPeriodDays" : {
            "$ref" : "#/components/schemas/CollectionPeriodDays"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceItem"
            }
          },
          "shipTo" : {
            "$ref" : "#/components/schemas/Shipping"
          },
          "billTo" : {
            "$ref" : "#/components/schemas/Billing"
          },
          "state" : {
            "type" : "string",
            "description" : "The current state of the invoice.",
            "example" : "open",
            "enum" : [ "draft", "open", "void", "paid", "uncollectible" ]
          },
          "stateTransitions" : {
            "$ref" : "#/components/schemas/StateTransitions"
          },
          "payment" : {
            "$ref" : "#/components/schemas/Payments"
          },
          "attemptCount" : {
            "type" : "integer",
            "description" : "The number of times Digital River has attempted to collect payment.",
            "example" : 5
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "chargeType" : {
            "$ref" : "#/components/schemas/ChargeType"
          },
          "applicationId" : {
            "type" : "string",
            "description" : "The identifier of the client application that created the checkout.",
            "example" : "5774321009"
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value <code>true</code> if the object exists in live mode or the value <code>false</code> if the object exists in test mode.",
            "example" : false
          },
          "orderId" : {
            "type" : "string",
            "description" : "The unique identifier of the order for this invoice.",
            "readOnly" : true,
            "example" : "5823594809"
          },
          "upstreamId" : {
            "type" : "string",
            "description" : "The upstream identifier.",
            "example" : "7765374748"
          }
        }
      },
      "Address" : {
        "title" : "Address",
        "required" : [ "country" ],
        "type" : "object",
        "properties" : {
          "line1" : {
            "type" : "string",
            "description" : "The first line of the address.",
            "nullable" : true,
            "example" : "10380 Bren Rd W"
          },
          "line2" : {
            "type" : "string",
            "description" : "The second line of the address."
          },
          "city" : {
            "type" : "string",
            "description" : "The city of the address.",
            "nullable" : true,
            "example" : "Minnetonka"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "The postal code of the address.",
            "nullable" : true,
            "example" : "55129"
          },
          "state" : {
            "type" : "string",
            "description" : "The state, county, province, or region.",
            "nullable" : true,
            "example" : "MN"
          },
          "country" : {
            "type" : "string",
            "description" : "A [two-letter Alpha-2 country code](https://www.iban.com/country-codes) as described in the [ISO 3166](https://www.iso.org/iso-3166-country-codes.html) international standard.",
            "example" : "US"
          }
        },
        "description" : "Represents basic address information."
      },
      "Bancontact" : {
        "title" : "Bancontact",
        "type" : "object"
      },
      "CollectionPeriodDays" : {
        "title" : "CollectionPeriodDays",
        "type" : "integer",
        "description" : "The number of days that Digital River attempts to collect payment if <code>billingOptimization</code> is set to <code>true</code>. The default is 30 days.",
        "example" : 30
      },
      "OrderItemStateTransitions" : {
        "title" : "OrderItemStateTransitions",
        "type" : "object",
        "properties" : {
          "created" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "fulfilled" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "paid" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "cancelled" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "blocked" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "returned" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "description" : "Timestamps that indicate when the state transition occurred.",
        "nullable" : true,
        "readOnly" : true
      },
      "TaxIdentifier_1" : {
        "title" : "TaxIdentifier_1",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The identifier of the tax identifier.",
            "readOnly" : true,
            "example" : "5774321009"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "The time when the tax identifier was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "customerId" : {
            "type" : "string",
            "description" : "The identifier of an existing customer.",
            "nullable" : true,
            "example" : "5774321009"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of tax identifier.",
            "readOnly" : true,
            "example" : "de"
          },
          "value" : {
            "type" : "string",
            "description" : "The tax identifier.",
            "example" : "DE123456789"
          },
          "state" : {
            "type" : "string",
            "description" : "The verification state.",
            "readOnly" : true,
            "example" : "pending",
            "enum" : [ "pending", "not_valid", "verified" ]
          },
          "stateTransitions" : {
            "$ref" : "#/components/schemas/TaxIdentifierStateTransitions"
          },
          "verifiedName" : {
            "type" : "string",
            "description" : "The registered name of the customer with this tax identifier.",
            "nullable" : true,
            "example" : "."
          },
          "verifiedAddress" : {
            "type" : "string",
            "description" : "The registered address of the customer with this tax identifier.",
            "nullable" : true,
            "example" : "."
          },
          "updatedTime" : {
            "type" : "string",
            "description" : "The time when the tax identifier was updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          }
        }
      },
      "UpdateReturnsItem" : {
        "title" : "UpdateReturnsItem",
        "required" : [ "quantity", "state" ],
        "type" : "object",
        "properties" : {
          "itemId" : {
            "type" : "string",
            "description" : "The identifier of the item.",
            "example" : "99596460336"
          },
          "skuId" : {
            "type" : "string",
            "description" : "The identifier of the SKU.",
            "example" : "99596460336"
          },
          "quantity" : {
            "type" : "integer",
            "example" : 1
          },
          "state" : {
            "type" : "string",
            "description" : "An enumeration indicating the state of the return item.",
            "example" : "accepted",
            "enum" : [ "accepted" ]
          }
        }
      },
      "Payments" : {
        "title" : "Payments",
        "type" : "object",
        "properties" : {
          "sources" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Source"
            }
          },
          "charges" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Charge"
            }
          },
          "session" : {
            "$ref" : "#/components/schemas/Session"
          }
        }
      },
      "Capture" : {
        "title" : "Capture",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the capture.",
            "readOnly" : true,
            "example" : "a6809a63-e6a9-4016-abbc-f33d19fccb5b"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "The time when the capture was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "updatedTime" : {
            "type" : "string",
            "description" : "The time when the capture was updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "amount" : {
            "type" : "number",
            "description" : "An amount representing how much was captured.",
            "format" : "double",
            "example" : 1180.26
          },
          "state" : {
            "type" : "string",
            "description" : "The state of the capture.",
            "example" : "pending",
            "enum" : [ "pending", "complete", "failed" ]
          },
          "failureCode" : {
            "type" : "string",
            "description" : "An error code that identifies the reason for the capture failure."
          },
          "failureMessage" : {
            "type" : "string",
            "description" : "An error message that describes the reason for the capture failure."
          }
        },
        "description" : "Represents the capture of all or part of the charge."
      },
      "ReturnsItem" : {
        "title" : "ReturnsItem",
        "type" : "object",
        "properties" : {
          "itemId" : {
            "type" : "string",
            "description" : "The identifier of the item.",
            "readOnly" : true,
            "example" : "99341140336"
          },
          "skuId" : {
            "type" : "string",
            "description" : "The identifier of the SKU.",
            "readOnly" : true,
            "example" : "sku_5823594809"
          },
          "amount" : {
            "type" : "number",
            "format" : "double",
            "readOnly" : true,
            "example" : 899.0
          },
          "quantity" : {
            "type" : "integer",
            "readOnly" : true,
            "example" : 1
          },
          "quantityAccepted" : {
            "type" : "integer",
            "readOnly" : true,
            "example" : 1
          },
          "state" : {
            "type" : "string",
            "description" : "The current state of the return item.",
            "readOnly" : true,
            "example" : "created",
            "enum" : [ "created", "accepted" ]
          }
        }
      },
      "KlarnaRecurring" : {
        "title" : "KlarnaRecurring",
        "type" : "object",
        "properties" : {
          "returnUrl" : {
            "type" : "string",
            "example" : "https://example.org/return"
          },
          "cancelUrl" : {
            "type" : "string",
            "example" : "https://example.org/cancel"
          }
        }
      },
      "RequestReturnsItem" : {
        "title" : "RequestReturnsItem",
        "required" : [ "quantity" ],
        "type" : "object",
        "properties" : {
          "itemId" : {
            "type" : "string",
            "description" : "The identifier of the item.",
            "example" : "99341140336"
          },
          "skuId" : {
            "type" : "string",
            "description" : "The identifier of the SKU.",
            "example" : "99341140336"
          },
          "quantity" : {
            "type" : "integer",
            "description" : "The number of items.",
            "example" : 1
          }
        }
      },
      "Subscription" : {
        "title" : "Subscription",
        "required" : [ "currency", "planId" ],
        "type" : "object",
        "properties" : {
          "contractBindingUntil" : {
            "type" : "string",
            "description" : "Represents the date and time when the subscription's contract expires.",
            "format" : "date-time"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "The time when the Subscription was created",
            "format" : "date-time",
            "example" : "2021-06-01T13:15:10.1077785Z"
          },
          "updatedTime" : {
            "type" : "string",
            "description" : "The time when the Subscription was last updated.",
            "format" : "date-time",
            "example" : "2021-06-01T13:17:10.1077788Z"
          },
          "stateTransitions" : {
            "$ref" : "#/components/schemas/SubscriptionStateTransitions"
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value true if the object exists in live mode or the value false if the object exists in test mode.",
            "example" : false
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the Subscription.",
            "example" : "fb941eef-c3bb-42f8-bd47-f6da8bf6245d"
          },
          "billingAgreementId" : {
            "type" : "string",
            "description" : "The billing agreement identifier that is obtained from the subscription's acquisition order.",
            "example" : "24b217a7-79b5-4c84-8cae-34370646092f"
          },
          "customerId" : {
            "type" : "string",
            "description" : "The Customer identifier that is obtained from the subscription's acquisition order.",
            "nullable" : true,
            "example" : "exampleCustomerId"
          },
          "sourceId" : {
            "type" : "string",
            "description" : "The unique identifier of the subscription's reusable payment source.",
            "example" : "exampleSourceId"
          },
          "taxInclusive" : {
            "type" : "boolean",
            "description" : "If true indicates that the prices supplied are tax inclusive.",
            "example" : true
          },
          "currency" : {
            "type" : "string",
            "description" : "Three-letter ISO currency code (e.g. \"USD\" or \"EUR\").",
            "example" : "EUR"
          },
          "planId" : {
            "type" : "string",
            "description" : "The Plan identifier.",
            "example" : "4a1a1fdd-2f7b-4a4e-92d2-2e843f06e82a"
          },
          "applicationId" : {
            "type" : "string",
            "description" : "The identifier of the client application that created the subscription.",
            "nullable" : true,
            "example" : "test"
          },
          "locale" : {
            "type" : "string",
            "description" : "A locale designator that combines a two-letter ISO 639-1 language code with a ISO 3166-1 alpha-2 country code.",
            "nullable" : true,
            "example" : "de_DE"
          },
          "state" : {
            "type" : "string",
            "description" : "The state of the subscription",
            "example" : "active",
            "enum" : [ "draft", "activePendingInvoice", "active", "activeFree", "failed", "cancelled", "ended" ]
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubscriptionItems"
            }
          },
          "currentPeriodEndDate" : {
            "type" : "string",
            "description" : "Represents the date and time when the subscription's current billing period ends.",
            "format" : "date-time"
          },
          "nextInvoiceDate" : {
            "type" : "string",
            "description" : "Represents the date and time when Digital River next opens an invoice and starts the billing process.",
            "format" : "date-time",
            "example" : "2021-07-02T13:15:10.0875833Z"
          },
          "nextReminderDate" : {
            "type" : "string",
            "description" : "Date when the next reminder event will be sent.",
            "format" : "date-time"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "ReturnRequest" : {
        "title" : "ReturnRequest",
        "required" : [ "items", "orderId", "rmaNumber" ],
        "type" : "object",
        "properties" : {
          "orderId" : {
            "type" : "string",
            "description" : "The unique identifier of the order associated with the return.",
            "example" : "6645940010"
          },
          "rmaNumber" : {
            "type" : "string",
            "description" : "The return merchandise authorization number.",
            "example" : "2343256645940010"
          },
          "reason" : {
            "maxLength" : 64,
            "type" : "string",
            "description" : "The reason for the return.",
            "example" : "requested_by_customer"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReturnItemRequest"
            }
          }
        }
      },
      "LabelResponse" : {
        "title" : "LabelResponse",
        "type" : "object",
        "properties" : {
          "height" : {
            "type" : "integer",
            "description" : "The label’s height in inches.",
            "example" : 5
          },
          "width" : {
            "type" : "integer",
            "description" : "The label’s width in inches.",
            "example" : 5
          },
          "format" : {
            "type" : "string",
            "description" : "The format of the label's data file.",
            "example" : "PDF",
            "enum" : [ "PDF" ]
          },
          "file" : {
            "type" : "string",
            "description" : "The shipping label data.",
            "example" : "JVBERi0xLjQKJeLjz9MKNCAwIG9iago8PC9TdWJ0eXBlL0Zvcm0vRmlsdGVyL0ZsYXRlRGVjb2Rl\\nL1R5cGUvWE9iamVjdC9NYXRyaXggWzEgMCAwIDEgMCAwXS9Gb3JtVHlwZSAxL1Jlc291cmNlczw8\\nL1Byb2NTZXQgWy9QREYgL1RleHQgL0ltYWdlQiAvSW1hZ2VDIC9JbWFnZUldPj4vQkJveFswIDAg\\nMjMyIDE0NF0vTGVuZ3RoIDEwNDA+PnN0cmVhbQp4nHWYwY4UMQxE7/0V8wmxO52kfwGJAycOiBsC\\nhAAJLvw+s5uqModCI42lnXHZ5WQ7b/LraI/o/fHjGdvj+5FnKr78/fvx9Xh//Dzi8efIx5vnt74d\\n0R5vjw8f2+PT8es1rT1+f5EO87ZOwzu1Pj+VXl7PhETCwIdjF8Z7JajCQMLCh+v1qwPvpsJCQrB+\\n7HYW3k2NoI3ozOmv30ZqWCv48jOLfcRui8nd1qKhpGiiyGBwY9OgNWnMrDGYWslpJ1vJ3RqT09ai\\nr2QriVXqDK6WfHHEuSfOZO+Lq3XSwAlDi8HUOjkN7VdsYCSfdr1OTuNkK+dujcl2/5301SnaUWQw\\nmFqdHXaK9l0Eyd2uV2eHnSPue+RMtuvVu"
          },
          "fileUrl" : {
            "type" : "string",
            "description" : "The URL of the shipping label file.",
            "example" : "www.sample.com"
          }
        }
      },
      "SkuDiscount" : {
        "title" : "SkuDiscount",
        "type" : "object",
        "properties" : {
          "amountOff" : {
            "type" : "number",
            "description" : "The discount expressed as an amount.",
            "format" : "double",
            "example" : 5.95
          },
          "percentOff" : {
            "maximum" : 100.0,
            "minimum" : 0.01,
            "type" : "number",
            "description" : "The discount expressed as a percentage.",
            "format" : "double",
            "example" : 100.0
          },
          "quantity" : {
            "type" : "number",
            "description" : "The quantity of the item to which the discount applies.",
            "format" : "integer",
            "example" : 1
          }
        }
      },
      "ShipFrom" : {
        "title" : "ShipFrom",
        "type" : "object",
        "properties" : {
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "additionalAddressInfo" : {
            "$ref" : "#/components/schemas/AdditionalAddressInfo"
          }
        },
        "description" : "The address from which a physical product is shipped."
      },
      "GlobalFulfillmentCancellationRequest" : {
        "title" : "GlobalFulfillmentCancellationRequest",
        "required" : [ "fulfillmentOrderId", "items" ],
        "type" : "object",
        "properties" : {
          "fulfillmentOrderId" : {
            "type" : "string",
            "description" : "The unique identifier of the fulfillment order associated with the fulfillment cancellation.",
            "example" : "6645940010"
          },
          "upstreamId" : {
            "type" : "string",
            "description" : "The unique identifier of the upstream order.",
            "example" : "6645940010"
          },
          "reason" : {
            "type" : "string",
            "description" : "The reason for the cancellation.",
            "example" : "requested_by_customer"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GlobalFulfillmentCancellationItemRequest"
            }
          }
        }
      },
      "UpdateSubscriptionRequest" : {
        "title" : "UpdateSubscriptionRequest",
        "required" : [ "planId" ],
        "type" : "object",
        "properties" : {
          "planId" : {
            "type" : "string",
            "description" : "The Plan identifier.",
            "example" : "string"
          },
          "applicationId" : {
            "type" : "string",
            "description" : "The identifier of the client application that created the subscription.",
            "nullable" : true,
            "example" : "test"
          },
          "locale" : {
            "type" : "string",
            "description" : "A locale designator that combines the two-letter ISO 639-1 language code with a ISO 3166-1 alpha-2 country code.",
            "nullable" : true,
            "example" : "de_DE"
          },
          "state" : {
            "type" : "string",
            "description" : "The state of the subscription",
            "example" : "active",
            "enum" : [ "cancelled", "active" ]
          },
          "sourceId" : {
            "type" : "string",
            "description" : "The unique identifier of the subscription's reusable payment source.",
            "example" : "exampleSourceId"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubscriptionItems"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "ShippingMethodQuoteResponse" : {
        "title" : "ShippingMethodQuoteResponse",
        "type" : "object",
        "properties" : {
          "shipments" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ShippingMethodQuoteItemResponse"
            }
          },
          "shippingMethods" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ShippingMethodQuote"
            }
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value true if the object exists in live mode or the value false if the object exists in test mode.",
            "example" : false
          }
        }
      },
      "ApplePay" : {
        "title" : "ApplePay",
        "type" : "object"
      },
      "FileJsonRequest" : {
        "title" : "FileJsonRequest",
        "required" : [ "file", "fileName", "purpose" ],
        "type" : "object",
        "properties" : {
          "file" : {
            "type" : "string",
            "description" : "For application/JSON protocol, a base64 encoded string may be sent.",
            "format" : "binary"
          },
          "purpose" : {
            "type" : "string",
            "description" : "The purpose of the uploaded file.",
            "example" : "tax_document_customer_upload",
            "enum" : [ "tax_document_customer_upload", "customer_invoice", "customer_credit_memo" ]
          },
          "fileName" : {
            "type" : "string",
            "description" : "A filename for the file, suitable for saving to a filesystem.",
            "example" : "demo92340982398490283094890238940829304828092380.pdf"
          },
          "title" : {
            "type" : "string",
            "description" : "A user friendly title for the document.",
            "example" : "Tax Doc Demo"
          },
          "linkExpiresTime" : {
            "type" : "string",
            "description" : "Time at which the link expires.",
            "format" : "date-time",
            "example" : "2020-04-25T20:36:00Z"
          }
        }
      },
      "Billing_1" : {
        "title" : "Billing_1",
        "required" : [ "address" ],
        "type" : "object",
        "properties" : {
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "name" : {
            "type" : "string",
            "nullable" : true,
            "example" : "John Smith"
          },
          "phone" : {
            "type" : "string",
            "nullable" : true,
            "example" : "952-111-1111"
          },
          "email" : {
            "type" : "string",
            "format" : "email",
            "nullable" : true,
            "example" : "jsmith@digitalriver.com"
          },
          "organization" : {
            "type" : "string",
            "nullable" : true,
            "example" : "Digital River"
          },
          "additionalAddressInfo" : {
            "$ref" : "#/components/schemas/AdditionalBillingAddressInfo"
          }
        },
        "description" : "Customer billing information."
      },
      "HTTPAuthorization" : {
        "title" : "HTTPAuthorization",
        "type" : "object",
        "properties" : {
          "userName" : {
            "type" : "string",
            "example" : "some_user_name"
          },
          "password" : {
            "type" : "string",
            "example" : "some_secure_password"
          }
        }
      },
      "CustomerType" : {
        "title" : "CustomerType",
        "type" : "string",
        "description" : "The type of customer.",
        "example" : "individual",
        "enum" : [ "business", "individual" ]
      },
      "DropInCheckoutLink" : {
        "title" : "DropInCheckoutLink",
        "type" : "object",
        "properties" : {
          "sessionId" : {
            "type" : "string",
            "description" : "The session identifier.",
            "example" : "eyJjdHkiOiJKV1QiLCJlbmMiOiJBMTI4R0NNIiw"
          }
        }
      },
      "DisclosureDetails" : {
        "title" : "DisclosureDetails",
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "The type of disclosure.",
            "example" : "termsOfSale",
            "enum" : [ "termsOfSale", "privacyPolicy", "cookiePolicy", "legalNotice", "autoRenewalPlanTerms", "saveCardMandate", "idealRecurringAgreement", "businessEntity", "resellerDisclosure", "confirmDisclosure", "californiaPrivacyRights" ]
          },
          "entityName" : {
            "type" : "string",
            "description" : "The name related to the entity.",
            "example" : "Digital River Inc."
          },
          "entityId" : {
            "type" : "string",
            "description" : "The id associated to the entity.",
            "example" : "DR_INC-ENTITY"
          },
          "localizedText" : {
            "type" : "string",
            "description" : "The translated text of the disclosure.",
            "example" : "Terms of Sale"
          },
          "url" : {
            "type" : "string",
            "description" : "The url related to the disclosure.",
            "example" : "https://store.digitalriver.com/store/defaults/en_US/DisplayDRTermsAndConditionsPage/eCommerceProvider.Digital%20River%20Inc."
          }
        }
      },
      "UpdateSkuRequest" : {
        "title" : "UpdateSkuRequest",
        "type" : "object",
        "properties" : {
          "eccn" : {
            "type" : "string",
            "description" : "The export control classification number.",
            "example" : "EAR99"
          },
          "hsCode" : {
            "type" : "string",
            "description" : "The international and US Harmonized System code (sometimes referred to as the Harmonized Tariff Schedule).",
            "example" : "6404.20"
          },
          "skuGroupId" : {
            "type" : "string",
            "description" : "The unique identifier of the Sku Group.",
            "example" : "5823594809"
          },
          "partNumber" : {
            "type" : "string",
            "description" : "The manufacturer's part number.",
            "example" : "SWG1224J10L"
          },
          "manufacturerId" : {
            "type" : "string",
            "description" : "The unique identifier",
            "example" : "654123"
          },
          "managedFulfillment" : {
            "type" : "string",
            "description" : "Signifies the product is physically fulfilled by Digital River.",
            "enum" : [ "DRGlobalFulfillment" ]
          },
          "taxCode" : {
            "type" : "string",
            "description" : "The designated tax code.",
            "example" : "4323.310_A"
          },
          "name" : {
            "type" : "string",
            "description" : "The product’s name.",
            "example" : "Athena Womens Running Shoes"
          },
          "description" : {
            "type" : "string",
            "description" : "A description of the product.",
            "example" : "Athena Womens Running Shoes"
          },
          "image" : {
            "type" : "string",
            "description" : "An image of the product.",
            "example" : "https://imageurl.com"
          },
          "url" : {
            "type" : "string",
            "description" : "A product url.",
            "example" : "https://producturl.com"
          },
          "countryOfOrigin" : {
            "type" : "string",
            "description" : "A two-letter Alpha-2 country code as described in the ISO 3166 international standard.",
            "example" : "US"
          },
          "weight" : {
            "type" : "number",
            "description" : "The weight of the product measured in the unit specified by weightUnit.",
            "format" : "double",
            "example" : 20.5
          },
          "weightUnit" : {
            "type" : "string",
            "description" : "The unit of measurement applied to the weight.",
            "example" : "oz",
            "enum" : [ "oz", "lb", "g", "kg" ]
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "SkuUpsertRequest" : {
        "title" : "SkuUpsertRequest",
        "required" : [ "countryOfOrigin", "eccn", "name", "taxCode" ],
        "type" : "object",
        "properties" : {
          "eccn" : {
            "type" : "string",
            "description" : "The export control classification number.",
            "example" : "EAR99"
          },
          "hsCode" : {
            "type" : "string",
            "description" : "The international and US Harmonized System code (sometimes referred to as the Harmonized Tariff Schedule).",
            "example" : "6404.20"
          },
          "skuGroupId" : {
            "type" : "string",
            "description" : "The unique identifier of the Sku Group.",
            "example" : "5823594809"
          },
          "partNumber" : {
            "type" : "string",
            "description" : "The manufacturer's part number.",
            "example" : "SWG1224J10L"
          },
          "manufacturerId" : {
            "type" : "string",
            "description" : "The unique identifier",
            "example" : "654123"
          },
          "managedFulfillment" : {
            "type" : "string",
            "description" : "Signifies the product is physically fulfilled by Digital River.",
            "enum" : [ "DRGlobalFulfillment" ]
          },
          "taxCode" : {
            "type" : "string",
            "description" : "The designated tax code.",
            "example" : "4323.310_A"
          },
          "name" : {
            "type" : "string",
            "description" : "The product’s name.",
            "example" : "Athena Womens Running Shoes"
          },
          "description" : {
            "type" : "string",
            "description" : "A description of the product.",
            "example" : "Athena Womens Running Shoes"
          },
          "image" : {
            "type" : "string",
            "description" : "An image of the product.",
            "example" : "https://imageurl.com"
          },
          "url" : {
            "type" : "string",
            "description" : "A product url.",
            "example" : "https://producturl.com"
          },
          "countryOfOrigin" : {
            "type" : "string",
            "description" : "A two-letter Alpha-2 country code as described in the ISO 3166 international standard.",
            "example" : "US"
          },
          "weight" : {
            "type" : "number",
            "description" : "The weight of the product measured in the unit specified by weightUnit.",
            "format" : "double",
            "example" : 20.5
          },
          "weightUnit" : {
            "type" : "string",
            "description" : "The unit of measurement applied to the weight.",
            "example" : "oz",
            "enum" : [ "oz", "lb", "g", "kg" ]
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "InventoryItemRequest" : {
        "title" : "InventoryItemRequest",
        "required" : [ "partNumber" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of an inventory item.",
            "example" : "5823594809"
          },
          "manufacturerId" : {
            "type" : "string",
            "description" : "Unique Digital River manufacturer identifier.",
            "example" : "84f18544-e6ab-44bb-b543-56c7b30fb6ca"
          },
          "partNumber" : {
            "type" : "string",
            "description" : "Manufacturer part number.",
            "example" : "SWG1224J10L"
          },
          "eccn" : {
            "type" : "string",
            "description" : "Export control classification number.",
            "example" : "EAR99"
          },
          "hsCode" : {
            "type" : "string",
            "description" : "International & US HS Code & Harmonized Tariff Code.",
            "example" : "6404.20"
          },
          "countryOfOrigin" : {
            "type" : "string",
            "description" : "An ISO 3166-1 alpha-2 country code.",
            "example" : "US"
          },
          "allowOversell" : {
            "type" : "boolean",
            "description" : "If true, customers are allowed to reserve inventory of the item when it is out of stock.",
            "example" : false
          }
        }
      },
      "FeeRequest" : {
        "title" : "FeeRequest",
        "required" : [ "amount", "category", "country", "currency", "skuId", "type", "value" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "The type of fee.",
            "example" : "weee",
            "enum" : [ "battery", "weee", "copyright", "e_waste", "packaging" ]
          },
          "skuId" : {
            "type" : "string",
            "description" : "The unique identifer of the stock keeping unit associated with the fee.",
            "example" : "sku_7834561209"
          },
          "category" : {
            "type" : "string",
            "description" : "The category of the fee as defined by regulatory law.",
            "example" : "3. IT and Telecommunication Equipment"
          },
          "value" : {
            "type" : "string",
            "description" : "The value of the product.",
            "example" : "85\" Class Q900 QLED Smart 8K UHD TV."
          },
          "amount" : {
            "type" : "number",
            "description" : "The fee amount.",
            "format" : "double",
            "example" : 0.5
          },
          "battery" : {
            "$ref" : "#/components/schemas/Battery"
          },
          "complianceAgency" : {
            "type" : "string",
            "description" : "The unique identifier of the recycling agency associated with the product's jurisdiction.",
            "example" : "WEEE_ecologic"
          },
          "feeExemption" : {
            "type" : "string",
            "description" : "Indicates whether business to business sales are exempt from paying the fee.",
            "example" : "exempt"
          },
          "brandName" : {
            "type" : "string",
            "description" : "The product's brand name.",
            "example" : "Samsung"
          },
          "weee" : {
            "$ref" : "#/components/schemas/WEEE"
          },
          "weightAndUnits" : {
            "type" : "string",
            "description" : "The weight of the unit, minus packaging or batteries, and the unit of measurement applied to the weight.",
            "example" : "3.00 kg"
          },
          "currency" : {
            "type" : "string",
            "description" : "A three-letter ISO 4217 currency code.",
            "example" : "USD"
          },
          "country" : {
            "type" : "string",
            "description" : "A two-letter ISO 3166 country code.",
            "example" : "US"
          },
          "subdivisions" : {
            "type" : "array",
            "description" : "An array of ISO 3166-2 subdivision codes.",
            "example" : [ "CA" ],
            "items" : {
              "type" : "string"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "PayoutAmounts" : {
        "title" : "PayoutAmounts",
        "type" : "object",
        "properties" : {
          "currency" : {
            "type" : "string",
            "description" : "Three-letter ISO currency code representing the payout currency.",
            "example" : "USD"
          },
          "exchangeRate" : {
            "type" : "number",
            "description" : "The exchange rate used to convert the sales amount into the payout currency sales amount.",
            "format" : "double",
            "example" : 1.24535
          },
          "amount" : {
            "type" : "number",
            "description" : "The sales transaction amount.",
            "format" : "double",
            "example" : 551.79
          },
          "tax" : {
            "type" : "number",
            "description" : "Tax amount.",
            "format" : "double",
            "example" : -91.97
          },
          "shipping" : {
            "type" : "number",
            "description" : "Shipping amount.",
            "format" : "double",
            "example" : -14.36
          },
          "regulatoryFees" : {
            "type" : "number",
            "description" : "Regulatory fees amount.",
            "format" : "double",
            "example" : 0
          },
          "landedCost" : {
            "type" : "number",
            "description" : "Landed costs amount.",
            "format" : "double",
            "example" : 0
          },
          "productPrice" : {
            "type" : "number",
            "description" : "Product price.",
            "format" : "double",
            "example" : 445.46
          },
          "digitalRiverShare" : {
            "type" : "number",
            "description" : "Digital River share amount.",
            "format" : "double",
            "example" : -41.38
          },
          "distributorShare" : {
            "type" : "number",
            "description" : "Distributor amount.",
            "format" : "double",
            "example" : -375.61
          },
          "transactionFees" : {
            "type" : "number",
            "description" : "Transaction fees amount.",
            "format" : "double",
            "example" : 0
          },
          "shippingDiscount" : {
            "type" : "number",
            "description" : "Shipping discount amount.",
            "format" : "double",
            "example" : 0
          },
          "regulatoryFeeDiscount" : {
            "type" : "number",
            "description" : "Regulatory fee discount amount.",
            "format" : "double",
            "example" : 0
          },
          "remitShipping" : {
            "type" : "number",
            "description" : "Shipping remittance amount.",
            "format" : "double",
            "example" : 0
          },
          "payoutAmount" : {
            "type" : "number",
            "description" : "Payout amount.",
            "format" : "double",
            "example" : 28.47
          },
          "storeCredit" : {
            "type" : "number",
            "description" : "Store credit.",
            "format" : "double",
            "example" : 23.41
          }
        }
      },
      "TaxDetail" : {
        "title" : "TaxDetail",
        "required" : [ "amount", "authorityType" ],
        "type" : "object",
        "properties" : {
          "authorityType" : {
            "type" : "string",
            "example" : "City"
          },
          "amount" : {
            "type" : "number",
            "description" : "The tax amount.",
            "format" : "double",
            "example" : 9.99
          }
        }
      },
      "ShippingQuotePackages" : {
        "title" : "ShippingQuotePackages",
        "required" : [ "items" ],
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductItemRequest"
            }
          },
          "weight" : {
            "type" : "integer",
            "description" : "The box’s weight.",
            "example" : 5
          },
          "weightUnit" : {
            "type" : "string",
            "description" : "The box’s weight unit.",
            "example" : "oz"
          },
          "height" : {
            "type" : "integer",
            "description" : "The box’s height.",
            "example" : 5
          },
          "width" : {
            "type" : "integer",
            "description" : "The box’s width.",
            "example" : 5
          },
          "length" : {
            "type" : "integer",
            "description" : "The box’s length.",
            "example" : 5
          }
        }
      },
      "UpdateInvoiceRequest" : {
        "title" : "UpdateInvoiceRequest",
        "type" : "object",
        "properties" : {
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "TaxInclusive" : {
        "title" : "TaxInclusive",
        "type" : "boolean",
        "description" : "If <code>true</code>, indicates that the prices supplied are tax inclusive.",
        "example" : true
      },
      "Organization" : {
        "title" : "Organization",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the organization.",
            "example" : "123456789"
          }
        },
        "description" : "Allows for the identification of a specific organization within a B2B transaction."
      },
      "Discount" : {
        "title" : "Discount",
        "type" : "object",
        "properties" : {
          "amountOff" : {
            "type" : "number",
            "description" : "The discount expressed as an amount.",
            "format" : "double",
            "example" : 5.95
          },
          "percentOff" : {
            "maximum" : 100.0,
            "minimum" : 0.01,
            "type" : "number",
            "description" : "The discount expressed as a percentage.",
            "format" : "double",
            "example" : 100.0
          }
        },
        "description" : "The applied discount."
      },
      "InventoryItemUpdateRequest" : {
        "title" : "InventoryItemUpdateRequest",
        "type" : "object",
        "properties" : {
          "manufacturerId" : {
            "type" : "string",
            "description" : "Unique Digital River manufacturer identifier.",
            "example" : "84f18544-e6ab-44bb-b543-56c7b30fb6ca"
          },
          "partNumber" : {
            "type" : "string",
            "description" : "Manufacturer part number.",
            "example" : "SWG1224J10L"
          },
          "eccn" : {
            "type" : "string",
            "description" : "Export control classification number.",
            "example" : "EAR99"
          },
          "hsCode" : {
            "type" : "string",
            "description" : "International & US HS Code & Harmonized Tariff Code.",
            "example" : "6404.20"
          },
          "countryOfOrigin" : {
            "type" : "string",
            "description" : "An ISO 3166-1 alpha-2 country code.",
            "example" : "US"
          },
          "allowOversell" : {
            "type" : "boolean",
            "description" : "If true, customers are allowed to reserve inventory of the item when it is out of stock.",
            "example" : false
          }
        }
      },
      "Tracking" : {
        "title" : "Tracking",
        "type" : "object",
        "properties" : {
          "trackingNumber" : {
            "type" : "string",
            "description" : "The tracking identifier provided by the carrier.",
            "nullable" : true,
            "readOnly" : true,
            "example" : "."
          },
          "trackingUrl" : {
            "type" : "string",
            "description" : "The URL of the tracking page provided by the carrier.",
            "nullable" : true,
            "readOnly" : true,
            "example" : "."
          }
        }
      },
      "Cancel" : {
        "title" : "Cancel",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the cancel.",
            "readOnly" : true,
            "example" : "a6809a63-e6a9-4016-abbc-f33d19fccb5b"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "The time when the cancel was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "updatedTime" : {
            "type" : "string",
            "description" : "The time when the cancel was updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "amount" : {
            "type" : "number",
            "description" : "An amount representing how much was cancelled.",
            "format" : "double",
            "example" : 1180.26
          },
          "state" : {
            "type" : "string",
            "description" : "The state of the cancel.",
            "example" : "pending",
            "enum" : [ "pending", "pending_information", "complete", "failed" ]
          },
          "failureCode" : {
            "type" : "string",
            "description" : "An error code that identifies the reason for the cancel failure."
          },
          "failureMessage" : {
            "type" : "string",
            "description" : "An error message that describes the reason for the cancel failure."
          }
        },
        "description" : "Represents the cancellation of all or part of the charge."
      },
      "ReservationRequest" : {
        "title" : "ReservationRequest",
        "required" : [ "expiresInSeconds", "items", "shipTo", "shippingChoice" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the reservation.",
            "example" : "5678901234"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReservationInventoryItem"
            }
          },
          "shipTo" : {
            "$ref" : "#/components/schemas/ReservationShipping"
          },
          "shippingChoice" : {
            "$ref" : "#/components/schemas/ReservationShippingChoice"
          },
          "expiresInSeconds" : {
            "type" : "integer",
            "description" : "A positive integer that specifies the number of seconds before the reservation expires and is deleted.",
            "nullable" : true,
            "example" : 300
          }
        }
      },
      "SellingEntity" : {
        "title" : "SellingEntity",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The identifier of the selling entity.",
            "example" : "C5_INC-ENTITY"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the selling entity.",
            "example" : "DR globalTech Inc."
          }
        },
        "description" : "Represents the local selling entity.",
        "readOnly" : true
      },
      "ShippingMethodQuoteRequest" : {
        "title" : "ShippingMethodQuoteRequest",
        "required" : [ "currency", "items", "sessionId", "shipTo" ],
        "type" : "object",
        "properties" : {
          "sessionId" : {
            "type" : "string",
            "description" : "The identifier of the checkout session associated with the shipping quotes request.",
            "example" : "7765374748"
          },
          "sessionUpstreamId" : {
            "type" : "string",
            "description" : "The upstream identifier of the checkout session associated with the shipping quotes request.",
            "example" : "8234373746"
          },
          "currency" : {
            "type" : "string",
            "description" : "A three-letter ISO currency code.",
            "example" : "USD"
          },
          "shipTo" : {
            "$ref" : "#/components/schemas/Shipping"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ShippingMethodQuoteItemRequest"
            }
          }
        }
      },
      "JapanCOD" : {
        "title" : "JapanCOD",
        "type" : "object"
      },
      "OrderItem_1" : {
        "title" : "OrderItem_1",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The identifier of the item.",
            "example" : "100067660336"
          },
          "skuId" : {
            "type" : "string",
            "description" : "The identifier of the stock keeping unit (SKU).",
            "example" : "sku_5823594809"
          },
          "productDetails" : {
            "$ref" : "#/components/schemas/ProductDetails"
          },
          "subscriptionInfo" : {
            "$ref" : "#/components/schemas/SubscriptionInfo"
          },
          "fees" : {
            "$ref" : "#/components/schemas/Fees"
          },
          "quantity" : {
            "type" : "integer",
            "description" : "The number of items.",
            "example" : 2
          },
          "state" : {
            "type" : "string",
            "description" : "The current order state.",
            "readOnly" : true,
            "example" : "created",
            "enum" : [ "created", "fulfilled", "paid", "cancelled", "blocked", "returned" ]
          },
          "stateTransitions" : {
            "$ref" : "#/components/schemas/OrderItemStateTransitions"
          },
          "amount" : {
            "type" : "number",
            "description" : "The cost of the items.",
            "format" : "double",
            "example" : 18.58
          },
          "availableToRefundAmount" : {
            "type" : "number",
            "description" : "The available to refund amount.",
            "format" : "double",
            "example" : 18.58
          },
          "sellerTaxIdentifier" : {
            "type" : "string",
            "description" : "The tax identifier of the seller.",
            "example" : "IE6426071C"
          },
          "tax" : {
            "$ref" : "#/components/schemas/Tax"
          },
          "importerTax" : {
            "$ref" : "#/components/schemas/ImporterTax"
          },
          "duties" : {
            "$ref" : "#/components/schemas/Duties"
          },
          "discount" : {
            "$ref" : "#/components/schemas/SkuDiscount"
          },
          "shipFrom" : {
            "$ref" : "#/components/schemas/ShipFrom_1"
          },
          "shipping" : {
            "$ref" : "#/components/schemas/ItemShipping"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "ProductDetails" : {
        "title" : "ProductDetails",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The identifier of the product in the upstream system.",
            "example" : "100067660336"
          },
          "skuGroupId" : {
            "type" : "string",
            "description" : "The identifier of the SKU group.",
            "example" : "wireless-keyboards"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the product.",
            "example" : "Keyboard"
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the product.",
            "example" : "Top rated keyboard"
          },
          "url" : {
            "type" : "string",
            "description" : "The product url.",
            "example" : "https://producturl.com"
          },
          "countryOfOrigin" : {
            "type" : "string",
            "description" : "The country of origin of the product.",
            "example" : "US"
          },
          "image" : {
            "type" : "string",
            "description" : "The image of the product.",
            "example" : "https://imageurl.com"
          },
          "weight" : {
            "type" : "number",
            "description" : "The weight of the product measured in the unit specified by weightUnit.",
            "format" : "double",
            "example" : 20.5
          },
          "weightUnit" : {
            "type" : "string",
            "description" : "The unit of measurement applied to the weight.",
            "example" : "oz",
            "enum" : [ "oz", "lb", "g", "kg" ]
          },
          "partNumber" : {
            "type" : "string",
            "description" : "The manufacturer's part number.",
            "example" : "SWG1224J10L"
          }
        }
      },
      "Charges" : {
        "title" : "Charges",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the charge",
            "example" : "c5b02ace-115d-4433-8841-8165d4c927a8"
          },
          "captured" : {
            "type" : "boolean",
            "description" : "Indicates if the charge has been captured.",
            "example" : false
          },
          "refunded" : {
            "type" : "boolean",
            "description" : "Indicates if the charge has been refunded.",
            "example" : false
          },
          "refunds" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RefundCharges"
            }
          },
          "sourceId" : {
            "type" : "string",
            "description" : "The unique identifier of the source.",
            "example" : "376e6777-d92b-4d35-a460-44f29327a18e"
          }
        }
      },
      "Alipay" : {
        "title" : "Alipay",
        "type" : "object"
      },
      "Fee" : {
        "title" : "Fee",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the fee.",
            "example" : "fee_1971b9b5-7d6b-49d5-b2a6-88ca7e53f750"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "The time when the fee was created.",
            "format" : "date-time",
            "example" : "2018-04-25T20:36:00Z"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of fee.",
            "example" : "weee",
            "enum" : [ "battery", "weee", "copyright", "e_waste", "packaging" ]
          },
          "skuId" : {
            "type" : "string",
            "description" : "The unique identifer of the stock keeping unit associated with the fee.",
            "example" : "sku_7834561209"
          },
          "category" : {
            "type" : "string",
            "description" : "The category of the fee as defined by regulatory law.",
            "example" : "3. IT and Telecommunication Equipment"
          },
          "value" : {
            "type" : "string",
            "description" : "The value of the product.",
            "example" : "85\" Class Q900 QLED Smart 8K UHD TV."
          },
          "amount" : {
            "type" : "number",
            "description" : "The fee amount.",
            "format" : "double",
            "example" : 0.5
          },
          "battery" : {
            "$ref" : "#/components/schemas/Battery"
          },
          "complianceAgency" : {
            "type" : "string",
            "description" : "The unique identifier of the recycling agency associated with the product's jurisdiction."
          },
          "feeExemption" : {
            "type" : "string",
            "description" : "Indicates whether business to business sales are exempt from paying the fee.",
            "example" : "exempt"
          },
          "brandName" : {
            "type" : "string",
            "description" : "The product's brand name.",
            "example" : "Samsung"
          },
          "weee" : {
            "$ref" : "#/components/schemas/WEEE"
          },
          "weightAndUnits" : {
            "type" : "string",
            "description" : "The weight of the unit, minus packaging or batteries, and the unit of measurement applied to the weight.",
            "example" : "3.00 kg"
          },
          "rateAndUnits" : {
            "type" : "string",
            "description" : "The fee amount to be charged per product quantity.",
            "example" : "2.00 EUR"
          },
          "currency" : {
            "type" : "string",
            "description" : "A three-letter ISO 4217 currency code.",
            "example" : "USD"
          },
          "country" : {
            "type" : "string",
            "description" : "A two-letter ISO 3166 country code.",
            "example" : "US"
          },
          "subdivisions" : {
            "type" : "array",
            "description" : "An array of ISO 3166-2 subdivision codes.",
            "example" : [ "CA" ],
            "items" : {
              "type" : "string"
            }
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value <code>true</code> if the object exists in live mode or the value <code>false</code> if the object exists in test mode.",
            "example" : false
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "updatedTime" : {
            "type" : "string",
            "description" : "Time when the fee was last updated.",
            "format" : "date-time",
            "example" : "2018-04-25T20:36:00Z"
          }
        }
      },
      "ReturnsRequest" : {
        "title" : "ReturnsRequest",
        "required" : [ "items", "orderId" ],
        "type" : "object",
        "properties" : {
          "orderId" : {
            "type" : "string",
            "description" : "The unique identifier of the Order associated with the Return.",
            "example" : "ord_6645940010"
          },
          "reason" : {
            "maxLength" : 64,
            "type" : "string",
            "description" : "The reason for the return.",
            "example" : "requested_by_customer"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RequestReturnsItem"
            }
          },
          "location" : {
            "$ref" : "#/components/schemas/ReturnsLocation"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "UpdatePlanRequest" : {
        "title" : "UpdatePlanRequest",
        "required" : [ "billingOffsetDays", "collectionPeriodDays" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Describes the subscription products or services added to this plan.",
            "nullable" : true,
            "example" : "Wireless keyboards"
          },
          "reminderOffsetDays" : {
            "type" : "integer",
            "description" : "The number of days before the opening of the invoice that the reminder event is triggered.",
            "nullable" : true,
            "example" : 7
          },
          "billingOffsetDays" : {
            "type" : "integer",
            "description" : "The number of days before the due date that billing is initiated.",
            "nullable" : true,
            "example" : 4
          },
          "collectionPeriodDays" : {
            "type" : "integer",
            "description" : "Represents the number of days that Digital River attempts to collect payment.",
            "nullable" : true,
            "example" : 10
          },
          "state" : {
            "type" : "string",
            "description" : "The valid states of a plan. Setting a plan to <code>deactivated</code> causes all connected subscriptions to end with the current period.",
            "example" : "active",
            "enum" : [ "draft", "active", "discontinued", "deactivated" ]
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "Disclosure" : {
        "title" : "Disclosure",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier for the disclosure.",
            "example" : "fee_1971b9b5-7d6b-49d5-b2a6-88ca7e53f750"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "Time when the disclosure was created.",
            "format" : "date-time",
            "example" : "2018-04-25T20:36:00Z"
          },
          "termId" : {
            "type" : "string",
            "description" : "Unique identifier of an existing term.",
            "example" : "197195764"
          },
          "locale" : {
            "type" : "string",
            "description" : "Locale code.",
            "example" : "en-GB"
          },
          "description" : {
            "maxLength" : 4000,
            "type" : "string",
            "description" : "An arbitrary string attached to the object.",
            "example" : "<p>Solution de paiement en 3 fois par carte bancaire Visa ou Mastercard* qui permet d'échelonner le paiement de la commande en 3 débits suivant l'échéancier suivant :</p><p><ul><li>1ère échéance le jour de votre commande : 1/3 du montant du panier + frais de dossier de 1,4% du montant de votre commande (frais de dossier plafonnés à 9€)</li><li>2ème échéance : 30 jours après votre commande de 1/3 du montant du panier</li><li>3ème échéance : 60 jours après votre commande de 1/3 du montant du panier</li></ul></p>"
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value true if the object exists in live mode or the value false if the object exists in test mode.",
            "example" : false
          },
          "updatedTime" : {
            "type" : "string",
            "description" : "Time when the fee was last updated.",
            "format" : "date-time",
            "example" : "2018-04-25T20:36:00Z"
          }
        }
      },
      "Plan" : {
        "title" : "Plan",
        "required" : [ "billingOffsetDays", "collectionPeriodDays", "contractBindingDays", "interval", "intervalCount", "terms" ],
        "type" : "object",
        "properties" : {
          "stateTransitions" : {
            "$ref" : "#/components/schemas/StateTransitions"
          },
          "updatedTime:" : {
            "type" : "string",
            "description" : "The time when the Plan was last updated.",
            "format" : "date-time",
            "example" : "2021-06-02T13:15:09.7347766Z"
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value true if the object exists in live mode or the value false if the object exists in test mode.",
            "example" : true
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of a Plan.",
            "example" : "4a1a1fdd-2f7b-4a4e-92d2-2e843f06e82a"
          },
          "terms" : {
            "type" : "string",
            "description" : "The contractual agreement displayed to the customer during the acquisition process.",
            "example" : "These are the terms..."
          },
          "contractBindingDays" : {
            "type" : "integer",
            "description" : "Indicates the agreed upon length of the contract. For example, an annual subscription should have a value of 365.",
            "example" : 365
          },
          "interval" : {
            "type" : "string",
            "description" : "The supported billing intervals",
            "example" : "month",
            "enum" : [ "year", "month", "week", "day" ]
          },
          "intervalCount" : {
            "type" : "integer",
            "description" : "How often the customer is billed per the unit of time specified by <code>interval</code> (e.g. every 3 months).",
            "example" : 1
          },
          "createdTime" : {
            "type" : "string",
            "description" : "The time when the Plan was created.",
            "format" : "date-time"
          },
          "name" : {
            "type" : "string",
            "description" : "Describes the subscription products or services added to this plan.",
            "nullable" : true,
            "example" : "Wireless keyboards"
          },
          "reminderOffsetDays" : {
            "type" : "integer",
            "description" : "How many days before the opening of the invoice should the reminder event be triggered.",
            "nullable" : true,
            "example" : 7
          },
          "billingOptimization" : {
            "type" : "boolean",
            "description" : "Indicates whether billing optimization is activated.",
            "example" : true
          },
          "billingOffsetDays" : {
            "type" : "integer",
            "description" : "The number of days before the opening of the invoice that the reminder event is triggered.",
            "nullable" : true,
            "example" : 4
          },
          "collectionPeriodDays" : {
            "type" : "integer",
            "description" : "Represents the number of days that Digital River attempts to collect payment.",
            "nullable" : true,
            "example" : 10
          },
          "state" : {
            "type" : "string",
            "description" : "The valid states of a plan. Setting a plan to <code>deactivated</code> causes all connected subscriptions to end with the current period.",
            "example" : "active",
            "enum" : [ "draft", "active", "discontinued", "deactivated" ]
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "GlobalFulfillmentReturnItemResponse" : {
        "title" : "GlobalFulfillmentReturnItemResponse",
        "type" : "object",
        "properties" : {
          "fulfillmentOrderItemId" : {
            "type" : "string",
            "description" : "The identifier of the fulfillment order item.",
            "readOnly" : true,
            "example" : "99341140336"
          },
          "inventoryItemId" : {
            "type" : "string",
            "description" : "The identifier of the inventory item.",
            "readOnly" : true,
            "example" : "5823594809"
          },
          "quantity" : {
            "type" : "integer",
            "description" : "The quantity specified in the fulfillment return request.",
            "readOnly" : true,
            "example" : 1
          },
          "quantityAccepted" : {
            "type" : "integer",
            "description" : "The quantity accepted for return by the fulfiller.",
            "readOnly" : true,
            "example" : 1
          },
          "state" : {
            "type" : "string",
            "description" : "The current state of the return item.",
            "readOnly" : true,
            "example" : "accepted",
            "enum" : [ "pending", "accepted", "rejected" ]
          },
          "location" : {
            "$ref" : "#/components/schemas/Location"
          },
          "unitAttributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UnitAttributes"
            }
          },
          "unitAttributesAccepted" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UnitAttributes"
            }
          }
        }
      },
      "UnitAttributes" : {
        "title" : "UnitAttributes",
        "type" : "object",
        "properties" : {
          "serialNumber" : {
            "type" : "string",
            "description" : ".",
            "example" : "."
          },
          "imeiNumber" : {
            "type" : "string",
            "description" : ".",
            "example" : "."
          },
          "simCardNumber" : {
            "type" : "string",
            "description" : ".",
            "example" : "."
          }
        },
        "description" : "Values to describe a smartphone or cellphone."
      },
      "ChargeType" : {
        "title" : "ChargeType",
        "type" : "string",
        "description" : "Represents the charge type.",
        "example" : "merchant_initiated",
        "enum" : [ "customer_initiated", "merchant_initiated", "moto" ]
      },
      "OrderItem" : {
        "title" : "OrderItem",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The identifier of the item.",
            "example" : "100067660336"
          },
          "skuId" : {
            "type" : "string",
            "description" : "The identifier of the stock keeping unit (SKU).",
            "example" : "sku_5823594809"
          },
          "productDetails" : {
            "$ref" : "#/components/schemas/ProductDetails"
          },
          "subscriptionInfo" : {
            "$ref" : "#/components/schemas/SubscriptionInfo"
          },
          "fees" : {
            "$ref" : "#/components/schemas/Fees"
          },
          "quantity" : {
            "type" : "integer",
            "description" : "The number of items.",
            "example" : 2
          },
          "state" : {
            "type" : "string",
            "description" : "The current order state.",
            "readOnly" : true,
            "example" : "created",
            "enum" : [ "created", "fulfilled", "paid", "cancelled", "blocked", "returned" ]
          },
          "stateTransitions" : {
            "$ref" : "#/components/schemas/OrderItemStateTransitions"
          },
          "amount" : {
            "type" : "number",
            "description" : "The cost of the items.",
            "format" : "double",
            "example" : 18.58
          },
          "availableToRefundAmount" : {
            "type" : "number",
            "description" : "The available to refund amount.",
            "format" : "double",
            "example" : 18.58
          },
          "sellerTaxIdentifier" : {
            "type" : "string",
            "description" : "The tax identifier of the seller.",
            "example" : "IE6426071C"
          },
          "tax" : {
            "$ref" : "#/components/schemas/Tax"
          },
          "importerTax" : {
            "$ref" : "#/components/schemas/ImporterTax"
          },
          "duties" : {
            "$ref" : "#/components/schemas/Duties"
          },
          "discount" : {
            "$ref" : "#/components/schemas/SkuDiscount"
          },
          "shipFrom" : {
            "$ref" : "#/components/schemas/ShipFrom"
          },
          "shipping" : {
            "$ref" : "#/components/schemas/ItemShipping"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "GlobalFulfillmentShippingChoice" : {
        "title" : "GlobalFulfillmentShippingChoice",
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "shippingInstructions" : {
            "type" : "string",
            "description" : "Specific shipping instructions.",
            "nullable" : true,
            "example" : "."
          },
          "dutiesPaid" : {
            "type" : "boolean",
            "description" : "Indicates whether the upstream order triggered the landed cost feature.",
            "nullable" : true,
            "example" : false
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the shipping quote.",
            "example" : "SG"
          },
          "signatureRequiredType" : {
            "type" : "string",
            "description" : "Indicates whether a signature is needed upon delivery, and, if it is, what type of signature is required.",
            "nullable" : true,
            "enum" : [ "standard", "adult" ]
          }
        }
      },
      "CheckoutRequest" : {
        "title" : "CheckoutRequest",
        "required" : [ "currency", "items" ],
        "type" : "object",
        "properties" : {
          "customerId" : {
            "type" : "string",
            "description" : "The identifier of the Customer associated with the Checkout.",
            "example" : "5774321009"
          },
          "sourceId" : {
            "type" : "string",
            "description" : "The unique identifier of a Source.",
            "example" : "src_a78cfeae-f7ae-4719-8e1c-d05ec04e4d37"
          },
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "email" : {
            "type" : "string",
            "description" : "The customer's email address.",
            "format" : "email",
            "example" : "jsmith@digitalriver.com"
          },
          "locale" : {
            "$ref" : "#/components/schemas/Locale"
          },
          "invoiceAttributeId" : {
            "type" : "string",
            "description" : "The unique identfier of the invoice attribute.",
            "example" : "95f72e0c-cb7d-48e1-93c8-998668ad0ff4"
          },
          "applicationId" : {
            "type" : "string",
            "description" : "An arbitrary string identifier that can be used to track the application type.",
            "example" : "68f72e0c-cb7d-48e1-93c8-998668ad0ff4"
          },
          "browserIp" : {
            "type" : "string",
            "description" : "The IP address of the browser used by the customer when placing the order.",
            "example" : "111.111.111.111"
          },
          "taxIdentifiers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CheckoutTaxIdentifierRequest"
            }
          },
          "shipFrom" : {
            "$ref" : "#/components/schemas/ShipFrom"
          },
          "shipTo" : {
            "$ref" : "#/components/schemas/Shipping"
          },
          "billTo" : {
            "$ref" : "#/components/schemas/Billing"
          },
          "organization" : {
            "$ref" : "#/components/schemas/Organization"
          },
          "shippingChoice" : {
            "$ref" : "#/components/schemas/ShippingRequest"
          },
          "discount" : {
            "$ref" : "#/components/schemas/Discount"
          },
          "items" : {
            "type" : "array",
            "example" : [ {
              "skuId" : "5823594809",
              "price" : 9.99,
              "discount" : {
                "quantity 1" : null,
                "amountOff" : 10
              }
            }, {
              "skuId" : "5823594809",
              "price" : 9.99,
              "quantity" : 2,
              "discount" : {
                "quantity 2" : null,
                "amountOff" : 10
              }
            }, {
              "skuId" : "9234276173",
              "price" : 9.99,
              "quantity" : 2
            } ],
            "items" : {
              "$ref" : "#/components/schemas/SkuRequestItem"
            }
          },
          "shippingDiscount" : {
            "$ref" : "#/components/schemas/Discount"
          },
          "taxInclusive" : {
            "$ref" : "#/components/schemas/TaxInclusive"
          },
          "chargeType" : {
            "$ref" : "#/components/schemas/ChargeType"
          },
          "customerType" : {
            "$ref" : "#/components/schemas/CustomerType"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "purchaseLocation" : {
            "$ref" : "#/components/schemas/PurchaseLocation"
          },
          "upstreamId" : {
            "type" : "string",
            "description" : "The upstream identifier.",
            "example" : "7765374748"
          },
          "disclosures" : {
            "$ref" : "#/components/schemas/Disclosures"
          }
        }
      },
      "FulfillmentResponseItem" : {
        "title" : "FulfillmentResponseItem",
        "type" : "object",
        "properties" : {
          "itemId" : {
            "type" : "string",
            "description" : "The unique identifier of the line item.",
            "readOnly" : true,
            "example" : "98784590336"
          },
          "skuId" : {
            "type" : "string",
            "description" : "The unique identifier of the sku.",
            "readOnly" : true,
            "example" : "98784590336"
          },
          "shipmentItemId" : {
            "type" : "string",
            "description" : "The unique identifier associated to the shipment item",
            "example" : "321765"
          },
          "quantity" : {
            "type" : "integer",
            "description" : "The number of items fulfilled.",
            "readOnly" : true,
            "example" : 1
          },
          "cancelQuantity" : {
            "type" : "integer",
            "description" : "The number of items cancelled.",
            "readOnly" : true,
            "example" : 1
          }
        }
      },
      "Locale" : {
        "title" : "Locale",
        "type" : "string",
        "description" : "A designator that combines the two-letter ISO 639-1 language code with the ISO 3166-1 alpha-2 country code.",
        "example" : "en-US"
      },
      "IntegrationAddress" : {
        "title" : "IntegrationAddress",
        "type" : "object",
        "properties" : {
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "name" : {
            "type" : "string",
            "description" : "The customer's name.",
            "nullable" : true,
            "example" : "John Smith"
          },
          "phone" : {
            "type" : "string",
            "description" : "The customer's phone number.",
            "nullable" : true,
            "example" : "952-111-1111"
          },
          "email" : {
            "type" : "string",
            "description" : "The customer's email address.",
            "format" : "email",
            "nullable" : true,
            "example" : "jsmith@digitalriver.com"
          },
          "organization" : {
            "type" : "string",
            "description" : "The customer's organization.",
            "nullable" : true,
            "example" : "Digital River"
          },
          "additionalAddressInfo" : {
            "$ref" : "#/components/schemas/AdditionalAddressInfo"
          }
        }
      },
      "SkuGroup" : {
        "title" : "SkuGroup",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The system generated unique identifier of the Sku Group.",
            "example" : "123e4567-e89b-12d3-a456-426614174000"
          },
          "alias" : {
            "type" : "string",
            "description" : "A short usable value that represents the item. This value will be given to the brand.",
            "example" : "wireless keyboards"
          }
        }
      },
      "SkuUpdateRequestItem" : {
        "title" : "SkuUpdateRequestItem",
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The identifier of the line item.",
            "example" : "100067660336"
          },
          "subscriptionInfo" : {
            "$ref" : "#/components/schemas/SubscriptionInfo"
          },
          "shipFrom" : {
            "$ref" : "#/components/schemas/ShipFrom"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "ReturnsAddress" : {
        "title" : "ReturnsAddress",
        "required" : [ "city", "country", "line1", "postalCode", "state" ],
        "type" : "object",
        "properties" : {
          "line1" : {
            "type" : "string",
            "nullable" : true,
            "example" : "10380 Bren Rd W"
          },
          "line2" : {
            "type" : "string"
          },
          "city" : {
            "type" : "string",
            "nullable" : true,
            "example" : "Minnetonka"
          },
          "postalCode" : {
            "type" : "string",
            "nullable" : true,
            "example" : "55129"
          },
          "state" : {
            "type" : "string",
            "nullable" : true,
            "example" : "MN"
          },
          "country" : {
            "type" : "string",
            "example" : "US"
          }
        }
      },
      "CheckoutLinkDetails" : {
        "title" : "CheckoutLinkDetails",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The link identifier.",
            "example" : "894d4fed-1097-4d1e-991a-814069000cb1"
          },
          "link" : {
            "type" : "string",
            "description" : "The domain of the hosted link",
            "example" : "https://store.digitalriver.com/dropin-checkout/v1/modal?linkId=894d4fed-1097-4d1e-991a-814069000cb1&token=pk_45971nf84m0he7792nmgmhi83mhu49sh"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "Time when the link was created.",
            "format" : "date-time",
            "example" : "2018-04-25T20:36:00Z"
          },
          "expired" : {
            "type" : "boolean",
            "description" : "Whether this link has already expired.",
            "example" : false
          },
          "expiresTime" : {
            "type" : "string",
            "description" : "Time at which the link expires.",
            "format" : "date-time",
            "example" : "2020-04-25T20:36:00Z"
          },
          "checkoutSession" : {
            "$ref" : "#/components/schemas/DropInCheckoutSession"
          }
        }
      },
      "ShippingRequest" : {
        "title" : "ShippingRequest",
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "description" : "The shipping amount.",
            "format" : "double",
            "example" : 5.95
          },
          "description" : {
            "type" : "string",
            "description" : "A description of the shipping choice.",
            "example" : "USPS: Priority (1 day delivery)"
          },
          "serviceLevel" : {
            "type" : "string",
            "description" : "A shipping code that represents the service level.",
            "example" : "Standard Ground"
          },
          "shippingTerms" : {
            "type" : "string",
            "description" : "The options for paying a transaction's full landed cost amount. DDP (Delivered Duty Paid) allows customers to pay the full amount during checkout. DAP (Deliverated At Place) allows customers to pay product and shipping costs at checkout, while paying duties, fees, and import fees upon delivery.",
            "example" : "DDP",
            "enum" : [ "DDP", "DAP" ]
          }
        },
        "description" : "Represents the shipping amount, description, taxes, and service level.",
        "nullable" : true
      },
      "Attributes" : {
        "title" : "Attributes",
        "type" : "object",
        "properties" : {
          "invoiceTitle" : {
            "type" : "string",
            "description" : "The title of the invoice.",
            "example" : "Invoice title"
          },
          "regAccount" : {
            "type" : "string",
            "description" : "The identifier for the account.",
            "example" : "87654"
          },
          "regAddress" : {
            "type" : "string",
            "description" : "The address associated to the invoice.",
            "example" : "123 Example st."
          },
          "regBank" : {
            "type" : "string",
            "description" : "The name of the bank.",
            "example" : "Bank"
          },
          "regPhone" : {
            "type" : "string",
            "description" : "The phone number associated to the invoice",
            "example" : "8005551234"
          }
        }
      },
      "DropInOptionsRequest" : {
        "title" : "DropInOptionsRequest",
        "type" : "object",
        "properties" : {
          "addresses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Shipping"
            }
          },
          "shippingMethods" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IntegrationShippingMethod"
            }
          },
          "storeCredits" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IntegrationStoreCreditRequest"
            }
          }
        }
      },
      "DropInCheckoutSession" : {
        "title" : "DropInCheckoutSession",
        "type" : "object",
        "properties" : {
          "upstreamId" : {
            "type" : "string",
            "description" : "The upstream checkout identifier if it is different from the Digital River checkout identifier.",
            "example" : "7765374748"
          },
          "currency" : {
            "type" : "string",
            "description" : "A three-letter ISO currency code.",
            "example" : "USD"
          },
          "taxInclusive" : {
            "type" : "boolean",
            "example" : true
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SkuItemRequest"
            }
          },
          "shipFrom" : {
            "$ref" : "#/components/schemas/ShipFrom"
          },
          "discount" : {
            "$ref" : "#/components/schemas/Discount"
          },
          "shippingDiscount" : {
            "$ref" : "#/components/schemas/Discount"
          },
          "browserIp" : {
            "type" : "string",
            "description" : "The IP address of the browser used by the customer when checking out.",
            "example" : "111.111.111.111"
          },
          "applicationId" : {
            "type" : "string",
            "description" : "An arbitrary identifier that can be used to track the application type.",
            "readOnly" : true,
            "example" : "68f72e0c-cb7d-48e1-93c8-998668ad0ff4"
          },
          "locale" : {
            "type" : "string",
            "description" : "A designator that combines the two-letter ISO 639-1 language code with the ISO 3166-1 alpha-2 country code.",
            "example" : "en_US"
          },
          "customerType" : {
            "$ref" : "#/components/schemas/CustomerType"
          },
          "chargeType" : {
            "$ref" : "#/components/schemas/ChargeType"
          },
          "disclosures" : {
            "$ref" : "#/components/schemas/Disclosures"
          },
          "style" : {
            "type" : "object",
            "description" : "Style for drop-in",
            "example" : {
              "modal" : {
                "borderRadius" : "8px",
                "fontFamily" : "Montserrat, sans-serif",
                "fontVariant" : "normal",
                "letterSpacing" : "1px",
                "logo" : "https://drh.img.digitalriver.com/DRHM/Storefront/Site/drdod15/cm/images/DR-Demo-Store_New.png",
                "themeColor" : {
                  "headerBackground" : "#fff",
                  "highlight" : "#002f57",
                  "mainBackground" : "#fff",
                  "primary" : "#00a7e1",
                  "stepperBorder" : "#00a7e1"
                }
              },
              "textField" : {
                "base" : {
                  "color" : "#000",
                  "fontFamily" : "Arial, Helvetica, sans-serif",
                  "fontSize" : "20px",
                  "fontVariant" : "normal",
                  "letterSpacing" : "1px"
                }
              }
            }
          },
          "options" : {
            "$ref" : "#/components/schemas/DropInOptionsRequest"
          },
          "redirects" : {
            "$ref" : "#/components/schemas/Redirects"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "Tax" : {
        "title" : "Tax",
        "type" : "object",
        "properties" : {
          "rate" : {
            "type" : "number",
            "description" : "The tax rate percentage.",
            "format" : "double",
            "example" : 0.0675
          },
          "amount" : {
            "type" : "number",
            "description" : "The tax amount.",
            "format" : "double",
            "example" : 89.0
          }
        },
        "readOnly" : true
      },
      "GlobalFulfillmentTax" : {
        "title" : "GlobalFulfillmentTax",
        "required" : [ "amount" ],
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TaxDetail"
            }
          },
          "amount" : {
            "type" : "number",
            "description" : "The tax amount.",
            "format" : "double",
            "example" : 9.99
          }
        }
      },
      "Reservation" : {
        "title" : "Reservation",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the reservation.",
            "example" : "5678901234"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "The time when the reservation was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "shipTo" : {
            "$ref" : "#/components/schemas/ReservationShipping"
          },
          "shippingChoice" : {
            "$ref" : "#/components/schemas/ReservationShippingChoice"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReservationInventoryItem"
            }
          },
          "expiresInSeconds" : {
            "type" : "integer",
            "description" : "A positive integer that specifies the number of seconds before the reservation expires and is deleted.",
            "example" : 300
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value true if the object exists in live mode or the value false if the object exists in test mode.",
            "example" : false
          }
        }
      },
      "Packages" : {
        "title" : "Packages",
        "required" : [ "items" ],
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductItem"
            }
          },
          "weight" : {
            "type" : "integer",
            "description" : "The box’s weight.",
            "example" : 5
          },
          "weightUnit" : {
            "type" : "string",
            "description" : "The box’s weight unit.",
            "example" : "oz"
          },
          "height" : {
            "type" : "integer",
            "description" : "The box’s height.",
            "example" : 5
          },
          "width" : {
            "type" : "integer",
            "description" : "The box’s width.",
            "example" : 5
          },
          "length" : {
            "type" : "integer",
            "description" : "The box’s length.",
            "example" : 5
          }
        }
      },
      "NumberMetadata" : {
        "title" : "NumberMetadata",
        "type" : "object",
        "additionalProperties" : {
          "type" : "number"
        },
        "example" : {
          "coupon" : 100.8
        }
      },
      "FileObject" : {
        "title" : "FileObject",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the file.",
            "example" : "09e2464f-9b4f-482b-ae89-732183c705be"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "The time when the file was created.",
            "format" : "date-time",
            "example" : "2018-04-25T20:36:00Z"
          },
          "fileName" : {
            "type" : "string",
            "description" : "A filename for the file, suitable for saving to a filesystem.",
            "example" : "file.png"
          },
          "links" : {
            "type" : "array",
            "description" : "An array of file links.",
            "items" : {
              "$ref" : "#/components/schemas/FileLink"
            }
          },
          "purpose" : {
            "type" : "string",
            "description" : "The purpose of the file.",
            "example" : "tax_document_customer_upload",
            "enum" : [ "tax_document_customer_upload", "customer_invoice", "customer_credit_memo" ]
          },
          "title" : {
            "type" : "string",
            "description" : "A user friendly title for the document.",
            "example" : "My 2019 Tax Certificate."
          },
          "size" : {
            "type" : "number",
            "description" : "The size in bytes of the file object.",
            "format" : "integer",
            "example" : 72334.0
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the file returned (e.g. pdf, jpg, or png).",
            "example" : "png"
          },
          "url" : {
            "type" : "string",
            "description" : "The URL from which the file can be downloaded. To download the file, use your live secret API key.",
            "example" : "https://files.digitalriver.com/files/file_17a0cab7-1ff7-478e-99f9-d4e753dec24d/content"
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value true if the object exists in live mode or the value false if the object exists in test mode.",
            "example" : false
          }
        }
      },
      "FraudStateTransitions" : {
        "title" : "FraudStateTransitions",
        "type" : "object",
        "properties" : {
          "blocked" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "review_opened" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "passed" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "description" : "Timestamps that indicate when the state transition occurred.",
        "nullable" : true,
        "readOnly" : true
      },
      "PayoutTransaction" : {
        "title" : "PayoutTransaction",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier for the payout transaction",
            "example" : "8100000400_1410_2019"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "Time at which the payout transaction was created",
            "format" : "date-time",
            "example" : "2018-04-25T20:36:00Z"
          },
          "currency" : {
            "type" : "string",
            "description" : "Three-letter ISO currency code representing the payout transaction currency.",
            "example" : "USD"
          },
          "amount" : {
            "type" : "number",
            "description" : "Represents the payout transaction amount.",
            "format" : "double",
            "example" : 1180.26
          },
          "payoutId" : {
            "type" : "string",
            "description" : "The payout identifier.",
            "example" : "2000028600_1410_2019"
          },
          "description" : {
            "type" : "string",
            "description" : "A description of the payout transaction.",
            "example" : "Sales for Period Ended 04-25-2020"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of payout transaction.",
            "example" : "sales_summary"
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value true if the object exists in live mode or the value false if the object exists in test mode.",
            "example" : true
          }
        }
      },
      "Order" : {
        "title" : "Order",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the order.",
            "readOnly" : true,
            "example" : "ord_5823594809"
          },
          "checkoutId" : {
            "type" : "string",
            "description" : "The unique identifier of the checkout submitted to create the order.",
            "example" : "5823594809"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "Time at which the order was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "customerId" : {
            "type" : "string",
            "description" : "The identifier of the customer associated with this order.",
            "example" : "cus_5774321009"
          },
          "currency" : {
            "type" : "string",
            "description" : "A three-letter ISO currency code.",
            "example" : "usd"
          },
          "email" : {
            "type" : "string",
            "description" : "The customer's email address.",
            "format" : "email",
            "example" : "jsmith@digitalriver.com"
          },
          "locale" : {
            "type" : "string",
            "description" : "A designator that combines the two-letter ISO 639-1 language code with the ISO 3166-1 alpha-2 country code.",
            "example" : "en_US"
          },
          "browserIp" : {
            "type" : "string",
            "description" : "The IP address of the browser used by the customer when placing the order.",
            "example" : "111.111.111.111"
          },
          "applicationId" : {
            "type" : "string",
            "description" : "An arbitrary string identifier that can be used to track the application type.",
            "readOnly" : true,
            "example" : "68f72e0c-cb7d-48e1-93c8-998668ad0ff4"
          },
          "taxIdentifiers" : {
            "type" : "array",
            "description" : "A list of the tax identifiers applied to this order.",
            "items" : {
              "$ref" : "#/components/schemas/TaxIdentifier"
            }
          },
          "invoiceAttributes" : {
            "$ref" : "#/components/schemas/InvoiceAttributes"
          },
          "shipFrom" : {
            "$ref" : "#/components/schemas/ShipFrom"
          },
          "shipTo" : {
            "$ref" : "#/components/schemas/Shipping"
          },
          "billTo" : {
            "$ref" : "#/components/schemas/Billing"
          },
          "organization" : {
            "$ref" : "#/components/schemas/Organization"
          },
          "subtotal" : {
            "type" : "number",
            "description" : "Represents the total order amount exclusive of tax.",
            "format" : "double",
            "readOnly" : true,
            "example" : 1094.5
          },
          "totalTax" : {
            "type" : "number",
            "description" : "Represents the total tax amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 82.76
          },
          "totalImporterTax" : {
            "type" : "number",
            "description" : "Represents the total tax amount from the importer of record.",
            "format" : "double",
            "example" : 82.76
          },
          "importerOfRecordTax" : {
            "type" : "boolean",
            "description" : "If <code>true</code>, indicates that the tax amount is paid by the importer of record.",
            "nullable" : true,
            "readOnly" : true,
            "example" : true
          },
          "totalFees" : {
            "type" : "number",
            "description" : "Represents the total fee amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 0
          },
          "totalDuty" : {
            "type" : "number",
            "description" : "Represents the total duty amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 0
          },
          "totalDiscount" : {
            "type" : "number",
            "description" : "Represents the total discount amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 0
          },
          "totalShipping" : {
            "type" : "number",
            "description" : "Represents the total shipping amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 5.76
          },
          "totalAmount" : {
            "type" : "number",
            "description" : "Represents the total charge amount.",
            "format" : "double",
            "readOnly" : true,
            "example" : 1180.26
          },
          "discount" : {
            "$ref" : "#/components/schemas/Discount"
          },
          "availableToRefundAmount" : {
            "type" : "number",
            "description" : "The available to refund amount at the order-level.",
            "format" : "double",
            "nullable" : true,
            "example" : 18.58
          },
          "refundedAmount" : {
            "type" : "number",
            "description" : "Represents the total payment amount refunded.",
            "format" : "double",
            "readOnly" : true
          },
          "cancelledAmount" : {
            "type" : "number",
            "description" : "Represents the total payment amount cancelled.",
            "format" : "double",
            "readOnly" : true
          },
          "capturedAmount" : {
            "type" : "number",
            "description" : "Represents the total payment amount captured.",
            "format" : "double",
            "readOnly" : true
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderItem"
            }
          },
          "invoicePDFs" : {
            "type" : "array",
            "description" : "An array of links to downloadable PDF invoices. If no invoices exist yet, the array is null.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/File"
            }
          },
          "creditMemoPDFs" : {
            "type" : "array",
            "description" : "An array of links to downloadable PDF credit memos. If no credit memos exist yet, the array is null.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/File"
            }
          },
          "requestToBeForgotten" : {
            "type" : "boolean",
            "description" : "If <code>true</code> indicates a user placing an order has requested this order be forgotten.",
            "example" : true,
            "default" : false
          },
          "shippingChoice" : {
            "$ref" : "#/components/schemas/ShippingChoice"
          },
          "state" : {
            "type" : "string",
            "description" : "The current order state.",
            "readOnly" : true,
            "example" : "created",
            "enum" : [ "accepted", "blocked", "pending_payment", "in_review", "dispute", "cancelled", "fulfilled", "complete", "returned" ]
          },
          "stateTransitions" : {
            "$ref" : "#/components/schemas/OrderStateTransitions"
          },
          "fraudState" : {
            "type" : "string",
            "description" : "The fraud review state.",
            "readOnly" : true,
            "example" : "passed",
            "enum" : [ "blocked", "review_opened", "passed" ]
          },
          "fraudStateTransitions" : {
            "$ref" : "#/components/schemas/FraudStateTransitions"
          },
          "cancelReason" : {
            "maxLength" : 64,
            "type" : "string",
            "description" : "Indicates the reason for the cancellation.",
            "example" : "fraud"
          },
          "payment" : {
            "$ref" : "#/components/schemas/Payments"
          },
          "disclosures" : {
            "$ref" : "#/components/schemas/Disclosures"
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value <code>true</code> if the object exists in live mode or the value <code>false</code> if the object exists in test mode."
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "sellingEntity" : {
            "$ref" : "#/components/schemas/SellingEntity"
          },
          "purchaseLocation" : {
            "$ref" : "#/components/schemas/PurchaseLocation"
          },
          "customerType" : {
            "$ref" : "#/components/schemas/CustomerType"
          },
          "upstreamId" : {
            "type" : "string",
            "description" : "The upstream identifier.",
            "nullable" : true,
            "example" : "0916805858"
          },
          "updatedTime" : {
            "type" : "string",
            "description" : "Time at which the order was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:37:00Z"
          }
        }
      },
      "ShippingMethodQuoteItemResponse" : {
        "title" : "ShippingMethodQuoteItemResponse",
        "type" : "object",
        "properties" : {
          "itemIds" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "example" : "1234-4567-7890-12345"
            }
          },
          "shipFrom" : {
            "$ref" : "#/components/schemas/ShipFrom"
          }
        }
      },
      "OrderRequest" : {
        "title" : "OrderRequest",
        "type" : "object",
        "properties" : {
          "checkoutId" : {
            "type" : "string",
            "description" : "The unique identifier of a Checkout.",
            "example" : "5823594809"
          },
          "customerId" : {
            "type" : "string",
            "description" : "The identifier of the Customer associated with the Checkout.",
            "example" : "5774321009"
          },
          "sourceId" : {
            "type" : "string",
            "description" : "The unique identifier of a Source.",
            "example" : "src_a78cfeae-f7ae-4719-8e1c-d05ec04e4d37"
          },
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "email" : {
            "type" : "string",
            "description" : "The customer's email address.",
            "format" : "email",
            "example" : "jsmith@digitalriver.com"
          },
          "locale" : {
            "$ref" : "#/components/schemas/Locale"
          },
          "invoiceAttributeId" : {
            "type" : "string",
            "description" : "The unique identfier of the invoice attribute.",
            "example" : "95f72e0c-cb7d-48e1-93c8-998668ad0ff4"
          },
          "applicationId" : {
            "type" : "string",
            "description" : "An arbitrary string identifier that can be used to track the application type.",
            "example" : "68f72e0c-cb7d-48e1-93c8-998668ad0ff4"
          },
          "browserIp" : {
            "type" : "string",
            "description" : "The IP address of the browser used by the customer when placing the order.",
            "example" : "111.111.111.111"
          },
          "shipFrom" : {
            "$ref" : "#/components/schemas/ShipFrom"
          },
          "shipTo" : {
            "$ref" : "#/components/schemas/Shipping"
          },
          "billTo" : {
            "$ref" : "#/components/schemas/Billing"
          },
          "organization" : {
            "$ref" : "#/components/schemas/Organization"
          },
          "shippingChoice" : {
            "$ref" : "#/components/schemas/ShippingRequest"
          },
          "discount" : {
            "$ref" : "#/components/schemas/Discount"
          },
          "items" : {
            "type" : "array",
            "example" : [ {
              "skuId" : "5823594809",
              "price" : 9.99,
              "discount" : {
                "quantity 1" : null,
                "amountOff" : 10
              }
            }, {
              "skuId" : "5823594809",
              "price" : 9.99,
              "quantity" : 2,
              "discount" : {
                "quantity 2" : null,
                "amountOff" : 10
              }
            }, {
              "skuId" : "9234276173",
              "price" : 9.99,
              "quantity" : 2
            } ],
            "items" : {
              "$ref" : "#/components/schemas/SkuRequestItem"
            }
          },
          "shippingDiscount" : {
            "$ref" : "#/components/schemas/Discount"
          },
          "taxInclusive" : {
            "$ref" : "#/components/schemas/TaxInclusive"
          },
          "taxIdentifiers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CheckoutTaxIdentifierRequest"
            }
          },
          "chargeType" : {
            "$ref" : "#/components/schemas/ChargeType"
          },
          "customerType" : {
            "$ref" : "#/components/schemas/CustomerType"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "purchaseLocation" : {
            "$ref" : "#/components/schemas/PurchaseLocation"
          },
          "disclosures" : {
            "$ref" : "#/components/schemas/Disclosures"
          },
          "upstreamId" : {
            "type" : "string",
            "description" : "The upstream identifier.",
            "example" : "7765374748"
          }
        }
      },
      "UpdateFileLinkRequest" : {
        "title" : "UpdateFileLinkRequest",
        "required" : [ "expiresTime" ],
        "type" : "object",
        "properties" : {
          "expiresTime" : {
            "type" : "string",
            "description" : "A future timestamp, after which the link will no longer be usable.",
            "format" : "date-time",
            "example" : "2020-04-25T20:36:00Z"
          }
        }
      },
      "PaycoResponse" : {
        "title" : "PaycoResponse",
        "type" : "object",
        "properties" : {
          "redirectUrl" : {
            "type" : "string",
            "example" : "https://api.digitalriver.com:443/payments/redirects/75743f60-1023-470e-be48-b761260317af?apiKey=pk_test_6cb0fe9ce3124093a9ad906f6c589e2d"
          },
          "returnUrl" : {
            "type" : "string",
            "example" : "https://mypage.com/success"
          },
          "payCo" : {
            "$ref" : "#/components/schemas/Payco"
          }
        }
      },
      "IntegrationStoreCreditRequest" : {
        "title" : "IntegrationStoreCreditRequest",
        "required" : [ "amount", "upstreamId" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "description" : "The store credit amount.",
            "format" : "double",
            "example" : 5
          },
          "name" : {
            "type" : "string",
            "description" : "The store credit name.",
            "example" : "Gift card"
          },
          "upstreamId" : {
            "type" : "string",
            "description" : "The upstream store credit identifier.",
            "example" : "7654-2345-0987-123456"
          },
          "iconUrl" : {
            "type" : "string",
            "description" : "The store credit image url.",
            "example" : "https://test.com/logo.png"
          },
          "lastFour" : {
            "type" : "string",
            "description" : "The last four digits of the store credit.",
            "example" : "7831"
          }
        }
      },
      "PurchaseLocation" : {
        "title" : "PurchaseLocation",
        "required" : [ "country" ],
        "type" : "object",
        "properties" : {
          "country" : {
            "type" : "string",
            "description" : "The ISO 3166-1 alpha-2 country code.",
            "example" : "US"
          },
          "state" : {
            "type" : "string",
            "description" : "The state,county,province, or region.",
            "example" : "MN"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "The ZIP or postal code.",
            "example" : "55364"
          }
        },
        "description" : "Used to create a tax estimate for the customer."
      },
      "Errors" : {
        "title" : "Errors",
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "example" : "bad_request",
            "enum" : [ "bad_request", "not_found", "request_timeout", "unauthorized", "conflict", "internal_server_error", "too_many_requests", "method_not_allowed", "not_acceptable", "forbidden", "bad_gateway", "service_unavailable", "gateway_timeout" ]
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "Konbini" : {
        "title" : "Konbini",
        "type" : "object",
        "properties" : {
          "storeId" : {
            "type" : "string",
            "example" : "33334444"
          },
          "receiptNumber" : {
            "type" : "string",
            "example" : "8675309"
          },
          "printableInvoiceUrl" : {
            "type" : "string",
            "example" : "https://printableinvoice.com"
          },
          "storeName" : {
            "type" : "string",
            "example" : "Seven Eleven"
          },
          "localizedStoreName" : {
            "type" : "string",
            "example" : "セブン‐イレブン"
          },
          "storeLogoUrl" : {
            "type" : "string",
            "example" : "https://storelogo.com"
          }
        }
      },
      "SubscriptionItems" : {
        "title" : "SubscriptionItems",
        "type" : "object",
        "properties" : {
          "aggregatePrice" : {
            "type" : "number",
            "description" : "Gets or sets the aggregate price",
            "format" : "double",
            "nullable" : true,
            "example" : 20.0
          },
          "price" : {
            "type" : "number",
            "description" : "Gets or sets the price",
            "format" : "double",
            "nullable" : true,
            "example" : 9.99
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "skuId" : {
            "type" : "string",
            "description" : "The identifier of the SKU.",
            "nullable" : true,
            "example" : "1db7a3d6-1f4d-4d13-8ddc-ef4eccc6bd93"
          },
          "productDetails" : {
            "$ref" : "#/components/schemas/ProductDetails"
          },
          "quantity" : {
            "type" : "integer",
            "description" : "Gets or sets the quantity",
            "nullable" : true,
            "example" : 1
          }
        }
      },
      "SubscriptionStateTransitions" : {
        "title" : "SubscriptionStateTransitions",
        "type" : "object",
        "properties" : {
          "activated" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "activatedFree" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "failed" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "cancelled" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "ended" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true,
            "example" : "2018-04-25T20:36:00Z"
          }
        }
      },
      "GLShipFrom" : {
        "title" : "GLShipFrom",
        "type" : "object",
        "properties" : {
          "address" : {
            "$ref" : "#/components/schemas/GLAddress"
          },
          "additionalAddressInfo" : {
            "$ref" : "#/components/schemas/AdditionalAddressInfo"
          }
        },
        "description" : "The address from which a physical product is shipped."
      },
      "File" : {
        "title" : "File",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string"
          }
        },
        "description" : "."
      },
      "UpdateReturnsRequest" : {
        "title" : "UpdateReturnsRequest",
        "type" : "object",
        "properties" : {
          "location" : {
            "$ref" : "#/components/schemas/ReturnsLocation"
          },
          "state" : {
            "type" : "string",
            "description" : "Enumeration indicating the state of the return.",
            "example" : "accepted",
            "enum" : [ "accepted" ]
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UpdateReturnsItem"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "CustomerTaxIdentifier" : {
        "title" : "CustomerTaxIdentifier",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The identifier of the tax identifier.",
            "readOnly" : true,
            "example" : "5774321009"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "The time when the tax identifier was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "customerId" : {
            "type" : "string",
            "description" : "The identifier of an existing customer.",
            "nullable" : true,
            "example" : "5774321009"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of tax identifier.",
            "readOnly" : true,
            "example" : "de"
          },
          "value" : {
            "type" : "string",
            "description" : "The tax identifier.",
            "example" : "DE123456789"
          },
          "state" : {
            "type" : "string",
            "description" : "The verification state.",
            "readOnly" : true,
            "example" : "pending",
            "enum" : [ "pending", "not_valid", "verified" ]
          },
          "stateTransitions" : {
            "$ref" : "#/components/schemas/TaxIdentifierStateTransitions"
          },
          "verifiedName" : {
            "type" : "string",
            "description" : "The registered name of the customer with this tax identifier.",
            "nullable" : true,
            "example" : "."
          },
          "verifiedAddress" : {
            "type" : "string",
            "description" : "The registered address of the customer with this tax identifier.",
            "nullable" : true,
            "example" : "."
          },
          "updatedTime" : {
            "type" : "string",
            "description" : "The time when the tax identifier was updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "applicability" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Applicability"
            }
          }
        }
      },
      "InvoiceItem" : {
        "title" : "InvoiceItem",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The identifier of the item."
          },
          "skuId" : {
            "type" : "string",
            "description" : "The identifier of the stock keeping unit (SKU).",
            "example" : "sku_5823594809"
          },
          "productDetails" : {
            "$ref" : "#/components/schemas/ProductDetails"
          },
          "subscriptionInfo" : {
            "$ref" : "#/components/schemas/SubscriptionInfo"
          },
          "fees" : {
            "$ref" : "#/components/schemas/Fees"
          },
          "quantity" : {
            "type" : "integer",
            "description" : "The number of items.",
            "example" : 2
          },
          "amount" : {
            "type" : "number",
            "format" : "double",
            "example" : 18.58
          },
          "duties" : {
            "$ref" : "#/components/schemas/Duties"
          },
          "importerTax" : {
            "$ref" : "#/components/schemas/ImporterTax"
          },
          "discount" : {
            "$ref" : "#/components/schemas/Discount"
          },
          "tax" : {
            "$ref" : "#/components/schemas/Tax"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "WEEE" : {
        "title" : "WEEE",
        "type" : "object",
        "properties" : {
          "weeeRegistrationId" : {
            "type" : "string",
            "description" : "The unique identifier assigned to a reseller of record by a country where a fee is required and collected"
          }
        },
        "description" : "Fees that represent waste electrical and electronic equipment."
      },
      "ShipFrom_1" : {
        "title" : "ShipFrom_1",
        "type" : "object",
        "properties" : {
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "additionalAddressInfo" : {
            "$ref" : "#/components/schemas/AdditionalAddressInfo"
          }
        },
        "description" : "The address from which a physical product is shipped."
      },
      "ShippingLabelResponse" : {
        "title" : "ShippingLabelResponse",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The shipping label identifier",
            "example" : "sdfg-r6w7-hbem-ju764"
          },
          "orderId" : {
            "type" : "string",
            "description" : "The identifier of the order in Digital River's system.",
            "example" : "sdfg-r6w7-hbem-ju764"
          },
          "shipments" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Shipments"
            }
          },
          "returnTo" : {
            "$ref" : "#/components/schemas/Shipping"
          }
        }
      },
      "Source" : {
        "title" : "Source",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier for the source.",
            "readOnly" : true,
            "example" : "a6809a63-e6a9-4016-abbc-f33d19fccb5b"
          },
          "clientSecret" : {
            "type" : "string",
            "description" : "Used for client-side retrieval using a public key.",
            "example" : "52199c06-b261-4786-8609-d0a84185a0d2_2b72614b-77f6-4801-bd48-8982e314fdd5"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "Time when the source was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-04-25T20:36:00Z"
          },
          "type" : {
            "type" : "string",
            "description" : "The payment type of the source. The payment type will correspond to another element in the source response that contains detailed information specific to the type. For example, a type of creditCard indicates that there is an object in the response named creditCard.",
            "example" : "creditCard",
            "enum" : [ "creditCard", "directDebit", "googlePay", "applePay", "payPal", "payPalBilling", "payPalCredit", "wireTransfer", "customerCredit", "alipay", "bPay", "onlineBanking", "codJapan", "klarnaCredit", "klarnaCreditRecurring", "konbini", "bankTransfer", "msts", "bancontact", "giftCard", "ideal" ]
          },
          "currency" : {
            "type" : "string",
            "description" : "Three-letter ISO currency code.",
            "example" : "USD"
          },
          "amount" : {
            "type" : "number",
            "description" : "Amount associated with the source. Once ready, the source will be charged this amount. Required for single_use sources.",
            "format" : "double",
            "example" : 1180.26
          },
          "reusable" : {
            "type" : "boolean",
            "description" : "If true, you can reuse this source, if false, only once.",
            "example" : true
          },
          "owner" : {
            "$ref" : "#/components/schemas/Owner"
          },
          "creditCard" : {
            "$ref" : "#/components/schemas/CreditCard"
          },
          "googlePay" : {
            "$ref" : "#/components/schemas/GooglePay"
          },
          "payPal" : {
            "$ref" : "#/components/schemas/PayPal"
          },
          "payPalBilling" : {
            "$ref" : "#/components/schemas/PayPal"
          },
          "payPalCredit" : {
            "$ref" : "#/components/schemas/PayPal"
          },
          "directDebit" : {
            "$ref" : "#/components/schemas/DirectDebit"
          },
          "wireTransfer" : {
            "$ref" : "#/components/schemas/WireTransfer"
          },
          "payCo" : {
            "$ref" : "#/components/schemas/PaycoResponse"
          },
          "alipay" : {
            "$ref" : "#/components/schemas/Alipay"
          },
          "applePay" : {
            "$ref" : "#/components/schemas/ApplePay"
          },
          "bPay" : {
            "$ref" : "#/components/schemas/bPay"
          },
          "onlineBanking" : {
            "$ref" : "#/components/schemas/InternetBankPayment"
          },
          "codJapan" : {
            "$ref" : "#/components/schemas/JapanCOD"
          },
          "klarnaCredit" : {
            "$ref" : "#/components/schemas/Klarna"
          },
          "klarnaCreditRecurring" : {
            "$ref" : "#/components/schemas/KlarnaRecurring"
          },
          "konbini" : {
            "$ref" : "#/components/schemas/Konbini"
          },
          "bankTransfer" : {
            "$ref" : "#/components/schemas/BankTransfer"
          },
          "msts" : {
            "$ref" : "#/components/schemas/MSTS"
          },
          "bancontact" : {
            "$ref" : "#/components/schemas/Bancontact"
          },
          "ideal" : {
            "$ref" : "#/components/schemas/Ideal"
          },
          "giftCard" : {
            "$ref" : "#/components/schemas/GiftCard"
          },
          "flow" : {
            "type" : "string",
            "description" : "The authentication flow of the source.",
            "example" : "standard",
            "enum" : [ "standard", "redirect", "receiver" ]
          },
          "state" : {
            "type" : "string",
            "description" : "The status of the source, one of pending_funds, pending_redirect, requires_action, cancelled, chargeable, consumed or failed. You can only use chargeable sources to create a charge.",
            "example" : "chargeable",
            "enum" : [ "pending_funds", "pending_redirect", "requires_action", "chargeable", "consumed", "cancelled", "failed" ]
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "customerId" : {
            "type" : "string",
            "description" : "Unique identifier of a customer.",
            "readOnly" : true,
            "example" : "5823594809"
          },
          "paymentSessionId" : {
            "type" : "string",
            "description" : "Tracks the process of collecting a payment.",
            "example" : "8cecaa32-f692-44cc-b103-4cf24dc93913"
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value true if the object exists in live mode or the value false if the object exists in test mode.",
            "example" : false
          }
        }
      },
      "StringMetadata" : {
        "title" : "StringMetadata",
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "example" : {
          "coupon" : "iOS"
        }
      },
      "OAUTHTokenInfo" : {
        "title" : "OAUTHTokenInfo",
        "required" : [ "clientID", "clientSecret", "tokenEndPoint" ],
        "type" : "object",
        "properties" : {
          "tokenEndPoint" : {
            "type" : "string",
            "description" : "The token endpoint"
          },
          "userName" : {
            "type" : "string",
            "description" : "The user name to access token endpoint."
          },
          "password" : {
            "type" : "string",
            "description" : "The password to access token endpoint."
          },
          "clientID" : {
            "type" : "string",
            "description" : "The client identifier issued to the client during the  registration process. https://tools.ietf.org/html/rfc6749#section-2.3.1"
          },
          "clientSecret" : {
            "type" : "string",
            "description" : "The client secret. https://tools.ietf.org/html/rfc6749#section-2.3.1"
          },
          "grantType" : {
            "type" : "string",
            "description" : "OAUTH grant type",
            "default" : "password",
            "enum" : [ "password" ]
          }
        }
      },
      "Payout" : {
        "title" : "Payout",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier for the payout",
            "example" : "2000028600_1410_2019"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "Time at which the payout was created",
            "format" : "date-time",
            "example" : "2019-04-25T20:36:00Z"
          },
          "payoutTime" : {
            "type" : "string",
            "description" : "Time at which the payout was issued",
            "format" : "date-time",
            "example" : "2019-04-25T00:00:00Z"
          },
          "currency" : {
            "type" : "string",
            "description" : "Three-letter ISO currency code representing the payout currency.",
            "example" : "USD"
          },
          "amount" : {
            "type" : "number",
            "description" : "Represents the total payout amount.",
            "format" : "double",
            "example" : 1180.26
          },
          "payerId" : {
            "type" : "string",
            "description" : "The ID of payer.",
            "example" : "1410"
          },
          "payerName" : {
            "type" : "string",
            "description" : "The name of the payer",
            "example" : "DR globalTech, Inc."
          },
          "payeeId" : {
            "type" : "string",
            "description" : "The ID of the payee.",
            "example" : "0013900100"
          },
          "payeeName" : {
            "type" : "string",
            "description" : "The name of the payee.",
            "example" : "ACME, Inc."
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value true if the object exists in live mode or the value false if the object exists in test mode.",
            "example" : true
          }
        }
      },
      "SalesTransaction" : {
        "title" : "SalesTransaction",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique identifier for the sales transaction",
            "example" : "0206802584_000010_3700005504"
          },
          "createdTime" : {
            "type" : "string",
            "description" : "Time at which the sales transaction was created",
            "format" : "date-time",
            "example" : "2019-04-25T20:36:00Z"
          },
          "saleTime" : {
            "type" : "string",
            "description" : "Time at which the sales occurred.",
            "format" : "date-time",
            "example" : "2019-04-25T00:00:00Z"
          },
          "salesSummaryId" : {
            "type" : "string",
            "description" : "Unique identifier of a Digital River sales summary, if any.",
            "example" : "8100000400_1410_2019"
          },
          "currency" : {
            "type" : "string",
            "description" : "Three-letter ISO currency code representing the sale currency.",
            "example" : "GBP"
          },
          "amount" : {
            "type" : "number",
            "description" : "The sales transaction amount.",
            "format" : "double",
            "example" : 443.08
          },
          "type" : {
            "type" : "string",
            "description" : "Sales transaction type.",
            "example" : "sale",
            "enum" : [ "sale", "replacement", "replacement_refund", "replacement_return", "fraud_chargeback", "non_fraud_chargeback", "refund", "return", "fraud_detection", "declined_settlement" ]
          },
          "orderId" : {
            "type" : "string",
            "description" : "Order identifier.",
            "example" : "37031462099"
          },
          "skuId" : {
            "type" : "string",
            "description" : "SKU identifier.",
            "example" : "945-0198"
          },
          "quantity" : {
            "type" : "number",
            "description" : "The quantity of the SKU.",
            "format" : "double",
            "example" : 1.0
          },
          "payoutAmounts" : {
            "$ref" : "#/components/schemas/PayoutAmounts"
          },
          "payerId" : {
            "type" : "string",
            "description" : "The ID of payer.",
            "example" : "1410"
          },
          "payerName" : {
            "type" : "string",
            "description" : "The name of the payer",
            "example" : "DR globalTech, Inc."
          },
          "payeeId" : {
            "type" : "string",
            "description" : "The ID of the payee.",
            "example" : "0013900100"
          },
          "payeeName" : {
            "type" : "string",
            "description" : "The name of the payee.",
            "example" : "ACME, Inc."
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value true if the object exists in live mode or the value false if the object exists in test mode.",
            "example" : true
          },
          "orderUpstreamID" : {
            "type" : "string",
            "description" : "Unique upstream ID for the order.",
            "example" : "fe18c37b-f76b-4eaa-892a-b1aca88cf46d"
          },
          "skuTaxCode" : {
            "type" : "string",
            "description" : "The sku tax code.",
            "example" : "4323.310_A"
          },
          "shipFromCountry" : {
            "type" : "string",
            "description" : "Country being shipped from.",
            "example" : "US"
          },
          "shipToCountry" : {
            "type" : "string",
            "description" : "Country being shipped to.",
            "example" : "NL"
          },
          "billToCountry" : {
            "type" : "string",
            "description" : "Country listed on shopper's billing address.",
            "example" : "US"
          },
          "paymentType" : {
            "type" : "string",
            "description" : "Type of payment used.",
            "example" : "creditCard"
          },
          "lineItemId" : {
            "type" : "string",
            "description" : "The unique identiier of the line item.",
            "example" : "51885630082"
          },
          "orderMetadata" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "lineItemMetadata" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        }
      },
      "RefundCharges" : {
        "title" : "RefundCharges",
        "type" : "object",
        "properties" : {
          "createdTime" : {
            "type" : "string",
            "description" : "The time that the refund was created.",
            "format" : "date-time",
            "example" : "2018-04-25T20:36:00Z"
          },
          "amount" : {
            "type" : "number",
            "description" : "The amount of the refund.",
            "format" : "double",
            "example" : 42.95
          },
          "state" : {
            "type" : "string",
            "description" : "The state of the refund.",
            "example" : "complete",
            "enum" : [ "pending", "complete", "failed" ]
          }
        }
      },
      "CustomerCredit" : {
        "title" : "CustomerCredit",
        "type" : "object"
      },
      "Error" : {
        "title" : "Error",
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "parameter" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "LineItem" : {
        "title" : "LineItem",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "number",
            "format" : "integer",
            "readOnly" : true,
            "example" : 449838789
          },
          "upstreamId" : {
            "type" : "string",
            "description" : "The upstream line item identifier.",
            "example" : "123"
          },
          "inventoryItemId" : {
            "type" : "string",
            "description" : "The inventory item identifier.",
            "example" : "abc"
          },
          "subtotal" : {
            "type" : "number",
            "description" : ".",
            "format" : "double",
            "example" : 9.99
          },
          "total" : {
            "type" : "number",
            "description" : "The aggregate price of the product inclusive of taxes, discounts, fees, shipping, handling and duties.",
            "format" : "double",
            "example" : 9.99
          },
          "name" : {
            "type" : "string",
            "description" : "The product name.",
            "example" : "."
          },
          "quantity" : {
            "type" : "integer",
            "description" : "The item quantity.",
            "example" : 1
          },
          "pending" : {
            "type" : "integer",
            "description" : "The pending shipment quantity.",
            "example" : 1
          },
          "backordered" : {
            "type" : "integer",
            "description" : "The backordered quantity.",
            "example" : 0
          },
          "shipped" : {
            "type" : "integer",
            "description" : "The shipped quantity.",
            "example" : 0
          },
          "cancelled" : {
            "type" : "integer",
            "description" : "The cancelled quantity.",
            "example" : 0
          },
          "returned" : {
            "type" : "integer",
            "description" : "The returned quantity.",
            "example" : 0
          },
          "giftMessage" : {
            "type" : "string",
            "description" : "The gift message on the package of the product.",
            "nullable" : true,
            "example" : "."
          },
          "giftWrap" : {
            "type" : "boolean",
            "description" : "Has the value true if the item should be gift wrapped.",
            "example" : false
          },
          "tax" : {
            "$ref" : "#/components/schemas/GlobalFulfillmentTax"
          },
          "state" : {
            "type" : "string",
            "description" : "Current line item state.",
            "readOnly" : true,
            "example" : "pending",
            "enum" : [ "pending", "backordered", "cancelled", "shipped" ]
          }
        },
        "example" : [ {
          "id" : "449838789",
          "upstreamId" : "123",
          "inventoryItemId" : "abc",
          "name" : ".",
          "quantity" : 1
        } ]
      },
      "TokenInformation" : {
        "title" : "TokenInformation",
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string",
            "description" : "Token to use with digitalriver.js to obtain customer information required to refund charge.",
            "example" : "bb3f0f17-567a-4c87-8cbd-76d93a750709"
          },
          "expiresTime" : {
            "type" : "string",
            "description" : "Time at which the information token expires.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-12-25T20:36:00Z"
          }
        }
      },
      "GLAddress" : {
        "title" : "GLAddress",
        "type" : "object",
        "properties" : {
          "line1" : {
            "type" : "string",
            "description" : "The first line of the address.",
            "nullable" : true,
            "example" : "10380 Bren Rd W"
          },
          "line2" : {
            "type" : "string",
            "description" : "The second line of the address."
          },
          "city" : {
            "type" : "string",
            "description" : "The city of the address.",
            "nullable" : true,
            "example" : "Minnetonka"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "The postal code of the address.",
            "nullable" : true,
            "example" : "55129"
          },
          "state" : {
            "type" : "string",
            "description" : "The state, county, province, or region.",
            "nullable" : true,
            "example" : "MN"
          },
          "country" : {
            "type" : "string",
            "description" : "A [two-letter Alpha-2 country code](https://www.iban.com/country-codes) as described in the [ISO 3166](https://www.iso.org/iso-3166-country-codes.html) international standard.",
            "example" : "US"
          }
        },
        "description" : "Represents basic address information."
      },
      "Fees" : {
        "title" : "Fees",
        "type" : "object",
        "properties" : {
          "details" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FeeDetails"
            }
          },
          "amount" : {
            "type" : "number",
            "description" : "Total fee amount.",
            "format" : "double",
            "example" : 4.5
          },
          "taxAmount" : {
            "type" : "number",
            "description" : "Total fee tax amount",
            "format" : "double",
            "example" : 1.2
          }
        }
      },
      "GlobalFulfillmentCancellationItemResponse" : {
        "title" : "GlobalFulfillmentCancellationItemResponse",
        "type" : "object",
        "properties" : {
          "fulfillmentOrderItemId" : {
            "type" : "string",
            "description" : "The identifier of the fulfillment order item.",
            "readOnly" : true,
            "example" : "99341140336"
          },
          "fulfillmentOrderItemUpstreamId" : {
            "type" : "string",
            "description" : "The identifier of the item in the upstream fulfillment order",
            "readOnly" : true,
            "example" : "99341140336"
          },
          "inventoryItemId" : {
            "type" : "string",
            "description" : "The identifier of the inventory item.",
            "readOnly" : true,
            "example" : "5823594809"
          },
          "quantity" : {
            "type" : "integer",
            "description" : "The quantity specified in the fulfillment cancellation request.",
            "readOnly" : true,
            "example" : 1
          },
          "quantityAccepted" : {
            "type" : "integer",
            "description" : "The quantity accepted for cancellation by the fulfiller.",
            "readOnly" : true,
            "example" : 1
          },
          "state" : {
            "type" : "string",
            "description" : "An enumeration indicating the current state of the item in the fulfillment cancellation.",
            "readOnly" : true,
            "example" : "accepted",
            "enum" : [ "pending", "accepted", "rejected" ]
          }
        }
      },
      "GlobalFulfillmentOrderRequest" : {
        "title" : "GlobalFulfillmentOrderRequest",
        "required" : [ "currency", "items", "shipTo", "shippingChoice", "upstreamOrderTime" ],
        "type" : "object",
        "properties" : {
          "currency" : {
            "type" : "string",
            "description" : "A three-letter ISO currency code.",
            "example" : "USD"
          },
          "locale" : {
            "type" : "string",
            "description" : "A locale designator that combines a two-letter ISO 639-1 language code with a ISO 3166-1 alpha-2 country code.",
            "example" : "en_US"
          },
          "upstreamOrderTime" : {
            "type" : "string",
            "description" : "The date and time at which the upstream order was created. The specified value should be in ISO-8601 UTC format.",
            "format" : "date-time",
            "example" : "2018-04-25T20:36:00Z"
          },
          "name" : {
            "type" : "string",
            "description" : "The customer's name.",
            "example" : "John Smith"
          },
          "email" : {
            "type" : "string",
            "description" : "The customer's email address.",
            "format" : "email",
            "example" : "jsmith@digitalriver.com"
          },
          "phone" : {
            "type" : "string",
            "description" : "The customer's phone number.",
            "example" : "612-258-1966"
          },
          "reservationId" : {
            "type" : "string",
            "description" : "An inventory reservation identifier.",
            "example" : "7765374748"
          },
          "upstreamId" : {
            "type" : "string",
            "description" : "The upstream order identifier.",
            "example" : "7765374748"
          },
          "shipTo" : {
            "$ref" : "#/components/schemas/Shipping"
          },
          "shippingChoice" : {
            "$ref" : "#/components/schemas/GlobalFulfillmentShippingChoice"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LineItemRequest"
            }
          }
        }
      },
      "ShippingQuoteResponse" : {
        "title" : "ShippingQuoteResponse",
        "type" : "object",
        "properties" : {
          "currency" : {
            "type" : "string",
            "description" : "A three-letter ISO currency code.",
            "example" : "USD"
          },
          "quotes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ShippingQuote"
            }
          },
          "liveMode" : {
            "type" : "boolean",
            "description" : "Has the value true if the object exists in live mode or the value false if the object exists in test mode.",
            "example" : false
          }
        }
      },
      "UpdateCustomerRequest" : {
        "title" : "UpdateCustomerRequest",
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "The customer email address.",
            "format" : "email",
            "example" : "jsmith@digitalriver.com"
          },
          "shipping" : {
            "$ref" : "#/components/schemas/Shipping"
          },
          "defaultSourceId" : {
            "type" : "string",
            "description" : "The identifier of the default source attached to this customer.",
            "example" : "fd74a5c5-0163-469a-ae8e-031f0259b576"
          },
          "taxCertificate" : {
            "$ref" : "#/components/schemas/TaxCertificate"
          },
          "requestToBeForgotten" : {
            "type" : "boolean",
            "description" : "If <code>true</code>, indicates this customer has submitted a request to be forgotten.",
            "example" : true
          },
          "type" : {
            "$ref" : "#/components/schemas/CustomerType"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/Metadata"
          },
          "locale" : {
            "type" : "string",
            "description" : "A locale designator that combines the two-letter ISO 639-1 language code with the ISO 3166-1 alpha-2 country code.",
            "example" : "en_US"
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "Usually used to disable the customer. The default is <code>true</code>. If <code>false</code>, attempts to create orders for the customer will fail.",
            "example" : true
          }
        }
      },
      "UpdateTaxIdentifierRequest" : {
        "title" : "UpdateTaxIdentifierRequest",
        "required" : [ "customerId" ],
        "type" : "object",
        "properties" : {
          "customerId" : {
            "type" : "string",
            "description" : "The ID of an existing customer.",
            "example" : "5774321009"
          }
        }
      },
      "Session" : {
        "title" : "Session",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the session",
            "readOnly" : true,
            "example" : "5823594809"
          },
          "amountContributed" : {
            "type" : "number",
            "description" : "Represents the amount contributed for the transaction",
            "format" : "double",
            "readOnly" : true,
            "example" : 10.5
          },
          "amountRemainingToBeContributed" : {
            "type" : "number",
            "description" : "Represents the amount needed to fully fund the transaction",
            "format" : "double",
            "readOnly" : true,
            "example" : 5.5
          },
          "clientSecret" : {
            "type" : "string",
            "description" : "The client secret to be used by DR.js",
            "readOnly" : true,
            "example" : "f93b4a5a-6971-4a50-b752-58636f9cfa07_35436acd-7d47-41df-8e5"
          },
          "state" : {
            "type" : "string",
            "description" : "The state of session.",
            "readOnly" : true,
            "example" : "requires_confirmation",
            "enum" : [ "requires_source", "requires_confirmation", "confirmed", "pending", "pending_funds", "pending_redirect", "chargeable", "complete", "cancelled", "processing", "failed", "requires_action" ]
          }
        }
      },
      "ShippingQuoteRequest" : {
        "title" : "ShippingQuoteRequest",
        "required" : [ "currency", "packages", "shipFrom", "shipTo" ],
        "type" : "object",
        "properties" : {
          "currency" : {
            "type" : "string",
            "description" : "A three-letter ISO currency code.",
            "example" : "USD"
          },
          "shipTo" : {
            "$ref" : "#/components/schemas/Shipping"
          },
          "shipFrom" : {
            "$ref" : "#/components/schemas/GLShipFrom"
          },
          "packages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ShippingQuotePackages"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "apiKey" : {
        "type" : "apiKey",
        "name" : "X-API-KEY",
        "in" : "header"
      },
      "bearerAuth" : {
        "type" : "http",
        "scheme" : "bearer"
      },
      "basicAuth" : {
        "type" : "http",
        "scheme" : "basic"
      }
    }
  }
}