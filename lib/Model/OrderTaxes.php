<?php
/**
 * OrderTaxes
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DigitalRiver\ApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Digital River API Reference
 *
 * removed by liao, too long
 *
 * The version of the OpenAPI document: 2024
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DigitalRiver\ApiSdk\Model;

use \ArrayAccess;
use \DigitalRiver\ApiSdk\ObjectSerializer;

/**
 * OrderTaxes Class Doc Comment
 *
 * @category Class
 * @description The tax details of a line item
 * @package  DigitalRiver\ApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderTaxes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderTaxes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'country' => 'string',
        'region' => 'string',
        'jurisdiction_type' => 'string',
        'jurisdiction_name' => 'string',
        'tax_type' => 'string',
        'tax_sub_type' => 'string',
        'tax_name' => 'string',
        'exempt_unit' => 'float',
        'non_taxable_unit' => 'float',
        'unit_of_basis' => 'string',
        'rate' => 'float',
        'effective_rate' => 'float',
        'tax_amount' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'country' => null,
        'region' => null,
        'jurisdiction_type' => null,
        'jurisdiction_name' => null,
        'tax_type' => null,
        'tax_sub_type' => null,
        'tax_name' => null,
        'exempt_unit' => null,
        'non_taxable_unit' => null,
        'unit_of_basis' => null,
        'rate' => 'double',
        'effective_rate' => 'double',
        'tax_amount' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'country' => false,
        'region' => false,
        'jurisdiction_type' => false,
        'jurisdiction_name' => false,
        'tax_type' => false,
        'tax_sub_type' => false,
        'tax_name' => false,
        'exempt_unit' => false,
        'non_taxable_unit' => false,
        'unit_of_basis' => false,
        'rate' => false,
        'effective_rate' => false,
        'tax_amount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'country' => 'country',
        'region' => 'region',
        'jurisdiction_type' => 'jurisdictionType',
        'jurisdiction_name' => 'jurisdictionName',
        'tax_type' => 'taxType',
        'tax_sub_type' => 'taxSubType',
        'tax_name' => 'taxName',
        'exempt_unit' => 'exemptUnit',
        'non_taxable_unit' => 'nonTaxableUnit',
        'unit_of_basis' => 'unitOfBasis',
        'rate' => 'rate',
        'effective_rate' => 'effectiveRate',
        'tax_amount' => 'taxAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'country' => 'setCountry',
        'region' => 'setRegion',
        'jurisdiction_type' => 'setJurisdictionType',
        'jurisdiction_name' => 'setJurisdictionName',
        'tax_type' => 'setTaxType',
        'tax_sub_type' => 'setTaxSubType',
        'tax_name' => 'setTaxName',
        'exempt_unit' => 'setExemptUnit',
        'non_taxable_unit' => 'setNonTaxableUnit',
        'unit_of_basis' => 'setUnitOfBasis',
        'rate' => 'setRate',
        'effective_rate' => 'setEffectiveRate',
        'tax_amount' => 'setTaxAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'country' => 'getCountry',
        'region' => 'getRegion',
        'jurisdiction_type' => 'getJurisdictionType',
        'jurisdiction_name' => 'getJurisdictionName',
        'tax_type' => 'getTaxType',
        'tax_sub_type' => 'getTaxSubType',
        'tax_name' => 'getTaxName',
        'exempt_unit' => 'getExemptUnit',
        'non_taxable_unit' => 'getNonTaxableUnit',
        'unit_of_basis' => 'getUnitOfBasis',
        'rate' => 'getRate',
        'effective_rate' => 'getEffectiveRate',
        'tax_amount' => 'getTaxAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('jurisdiction_type', $data ?? [], null);
        $this->setIfExists('jurisdiction_name', $data ?? [], null);
        $this->setIfExists('tax_type', $data ?? [], null);
        $this->setIfExists('tax_sub_type', $data ?? [], null);
        $this->setIfExists('tax_name', $data ?? [], null);
        $this->setIfExists('exempt_unit', $data ?? [], null);
        $this->setIfExists('non_taxable_unit', $data ?? [], null);
        $this->setIfExists('unit_of_basis', $data ?? [], null);
        $this->setIfExists('rate', $data ?? [], null);
        $this->setIfExists('effective_rate', $data ?? [], null);
        $this->setIfExists('tax_amount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country The country where taxes are assessed.
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region The region where taxes are assessed. This is typically a state or province.
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            throw new \InvalidArgumentException('non-nullable region cannot be null');
        }
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets jurisdiction_type
     *
     * @return string|null
     */
    public function getJurisdictionType()
    {
        return $this->container['jurisdiction_type'];
    }

    /**
     * Sets jurisdiction_type
     *
     * @param string|null $jurisdiction_type The type of jurisdiction that assessed the tax. This is often a country, state, province, county, city, or district but can also be a special jurisdiction that collects a tax for a specific purpose, such as housing or transportation.
     *
     * @return self
     */
    public function setJurisdictionType($jurisdiction_type)
    {
        if (is_null($jurisdiction_type)) {
            throw new \InvalidArgumentException('non-nullable jurisdiction_type cannot be null');
        }
        $this->container['jurisdiction_type'] = $jurisdiction_type;

        return $this;
    }

    /**
     * Gets jurisdiction_name
     *
     * @return string|null
     */
    public function getJurisdictionName()
    {
        return $this->container['jurisdiction_name'];
    }

    /**
     * Sets jurisdiction_name
     *
     * @param string|null $jurisdiction_name The name of the jurisdiction that assessed the tax.
     *
     * @return self
     */
    public function setJurisdictionName($jurisdiction_name)
    {
        if (is_null($jurisdiction_name)) {
            throw new \InvalidArgumentException('non-nullable jurisdiction_name cannot be null');
        }
        $this->container['jurisdiction_name'] = $jurisdiction_name;

        return $this;
    }

    /**
     * Gets tax_type
     *
     * @return string|null
     */
    public function getTaxType()
    {
        return $this->container['tax_type'];
    }

    /**
     * Sets tax_type
     *
     * @param string|null $tax_type The type of tax.
     *
     * @return self
     */
    public function setTaxType($tax_type)
    {
        if (is_null($tax_type)) {
            throw new \InvalidArgumentException('non-nullable tax_type cannot be null');
        }
        $this->container['tax_type'] = $tax_type;

        return $this;
    }

    /**
     * Gets tax_sub_type
     *
     * @return string|null
     */
    public function getTaxSubType()
    {
        return $this->container['tax_sub_type'];
    }

    /**
     * Sets tax_sub_type
     *
     * @param string|null $tax_sub_type The subtype of tax.
     *
     * @return self
     */
    public function setTaxSubType($tax_sub_type)
    {
        if (is_null($tax_sub_type)) {
            throw new \InvalidArgumentException('non-nullable tax_sub_type cannot be null');
        }
        $this->container['tax_sub_type'] = $tax_sub_type;

        return $this;
    }

    /**
     * Gets tax_name
     *
     * @return string|null
     */
    public function getTaxName()
    {
        return $this->container['tax_name'];
    }

    /**
     * Sets tax_name
     *
     * @param string|null $tax_name The name of the tax.
     *
     * @return self
     */
    public function setTaxName($tax_name)
    {
        if (is_null($tax_name)) {
            throw new \InvalidArgumentException('non-nullable tax_name cannot be null');
        }
        $this->container['tax_name'] = $tax_name;

        return $this;
    }

    /**
     * Gets exempt_unit
     *
     * @return float|null
     */
    public function getExemptUnit()
    {
        return $this->container['exempt_unit'];
    }

    /**
     * Sets exempt_unit
     *
     * @param float|null $exempt_unit The number of units that are exempt.
     *
     * @return self
     */
    public function setExemptUnit($exempt_unit)
    {
        if (is_null($exempt_unit)) {
            throw new \InvalidArgumentException('non-nullable exempt_unit cannot be null');
        }
        $this->container['exempt_unit'] = $exempt_unit;

        return $this;
    }

    /**
     * Gets non_taxable_unit
     *
     * @return float|null
     */
    public function getNonTaxableUnit()
    {
        return $this->container['non_taxable_unit'];
    }

    /**
     * Sets non_taxable_unit
     *
     * @param float|null $non_taxable_unit The number of units that are nontaxable.
     *
     * @return self
     */
    public function setNonTaxableUnit($non_taxable_unit)
    {
        if (is_null($non_taxable_unit)) {
            throw new \InvalidArgumentException('non-nullable non_taxable_unit cannot be null');
        }
        $this->container['non_taxable_unit'] = $non_taxable_unit;

        return $this;
    }

    /**
     * Gets unit_of_basis
     *
     * @return string|null
     */
    public function getUnitOfBasis()
    {
        return $this->container['unit_of_basis'];
    }

    /**
     * Sets unit_of_basis
     *
     * @param string|null $unit_of_basis The units the tax is based upon.
     *
     * @return self
     */
    public function setUnitOfBasis($unit_of_basis)
    {
        if (is_null($unit_of_basis)) {
            throw new \InvalidArgumentException('non-nullable unit_of_basis cannot be null');
        }
        $this->container['unit_of_basis'] = $unit_of_basis;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return float|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param float|null $rate The tax rate percentage.
     *
     * @return self
     */
    public function setRate($rate)
    {
        if (is_null($rate)) {
            throw new \InvalidArgumentException('non-nullable rate cannot be null');
        }
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets effective_rate
     *
     * @return float|null
     */
    public function getEffectiveRate()
    {
        return $this->container['effective_rate'];
    }

    /**
     * Sets effective_rate
     *
     * @param float|null $effective_rate The effective tax rate percentage.
     *
     * @return self
     */
    public function setEffectiveRate($effective_rate)
    {
        if (is_null($effective_rate)) {
            throw new \InvalidArgumentException('non-nullable effective_rate cannot be null');
        }
        $this->container['effective_rate'] = $effective_rate;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return float|null
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param float|null $tax_amount The amount of tax.
     *
     * @return self
     */
    public function setTaxAmount($tax_amount)
    {
        if (is_null($tax_amount)) {
            throw new \InvalidArgumentException('non-nullable tax_amount cannot be null');
        }
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


