<?php
/**
 * DeliveryInformation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DigitalRiver\ApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Digital River API Reference
 *
 * removed by liao, too long
 *
 * The version of the OpenAPI document: 2024
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DigitalRiver\ApiSdk\Model;

use \ArrayAccess;
use \DigitalRiver\ApiSdk\ObjectSerializer;

/**
 * DeliveryInformation Class Doc Comment
 *
 * @category Class
 * @description Represents a shipping option&#39;s delivery information. The &lt;code&gt;estimatedArrival&lt;/code&gt; is conditional on &lt;code&gt;pickupDate&lt;/code&gt; and &lt;code&gt;supportCutoffTime&lt;/code&gt;. If the final mile carrier collects the shipment by &lt;code&gt;supportCutoffTime&lt;/code&gt; on &lt;code&gt;pickupDate&lt;/code&gt;, then it should be at its destination by &lt;code&gt;estimatedArrival.date&lt;/code&gt;.
 * @package  DigitalRiver\ApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DeliveryInformation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DeliveryInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'business_days_in_transit' => 'string',
        'estimated_arrival' => '\DigitalRiver\ApiSdk\Model\EstimatedArrival',
        'pickup_date' => '\DateTime',
        'weekend_service' => '\DigitalRiver\ApiSdk\Model\WeekendService',
        'support_cutoff_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'business_days_in_transit' => null,
        'estimated_arrival' => null,
        'pickup_date' => 'date-time',
        'weekend_service' => null,
        'support_cutoff_time' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'business_days_in_transit' => false,
        'estimated_arrival' => false,
        'pickup_date' => false,
        'weekend_service' => false,
        'support_cutoff_time' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'business_days_in_transit' => 'businessDaysInTransit',
        'estimated_arrival' => 'estimatedArrival',
        'pickup_date' => 'pickupDate',
        'weekend_service' => 'weekendService',
        'support_cutoff_time' => 'supportCutoffTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'business_days_in_transit' => 'setBusinessDaysInTransit',
        'estimated_arrival' => 'setEstimatedArrival',
        'pickup_date' => 'setPickupDate',
        'weekend_service' => 'setWeekendService',
        'support_cutoff_time' => 'setSupportCutoffTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'business_days_in_transit' => 'getBusinessDaysInTransit',
        'estimated_arrival' => 'getEstimatedArrival',
        'pickup_date' => 'getPickupDate',
        'weekend_service' => 'getWeekendService',
        'support_cutoff_time' => 'getSupportCutoffTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('business_days_in_transit', $data ?? [], null);
        $this->setIfExists('estimated_arrival', $data ?? [], null);
        $this->setIfExists('pickup_date', $data ?? [], null);
        $this->setIfExists('weekend_service', $data ?? [], null);
        $this->setIfExists('support_cutoff_time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets business_days_in_transit
     *
     * @return string|null
     */
    public function getBusinessDaysInTransit()
    {
        return $this->container['business_days_in_transit'];
    }

    /**
     * Sets business_days_in_transit
     *
     * @param string|null $business_days_in_transit The estimated number of business days that the shipment will take to arrive at its final destination. Its value might be a single day or a range of days.
     *
     * @return self
     */
    public function setBusinessDaysInTransit($business_days_in_transit)
    {
        if (is_null($business_days_in_transit)) {
            throw new \InvalidArgumentException('non-nullable business_days_in_transit cannot be null');
        }
        $this->container['business_days_in_transit'] = $business_days_in_transit;

        return $this;
    }

    /**
     * Gets estimated_arrival
     *
     * @return \DigitalRiver\ApiSdk\Model\EstimatedArrival|null
     */
    public function getEstimatedArrival()
    {
        return $this->container['estimated_arrival'];
    }

    /**
     * Sets estimated_arrival
     *
     * @param \DigitalRiver\ApiSdk\Model\EstimatedArrival|null $estimated_arrival estimated_arrival
     *
     * @return self
     */
    public function setEstimatedArrival($estimated_arrival)
    {
        if (is_null($estimated_arrival)) {
            throw new \InvalidArgumentException('non-nullable estimated_arrival cannot be null');
        }
        $this->container['estimated_arrival'] = $estimated_arrival;

        return $this;
    }

    /**
     * Gets pickup_date
     *
     * @return \DateTime|null
     */
    public function getPickupDate()
    {
        return $this->container['pickup_date'];
    }

    /**
     * Sets pickup_date
     *
     * @param \DateTime|null $pickup_date The estimated time and date that the carrier will take possession of the packages in the shipment.
     *
     * @return self
     */
    public function setPickupDate($pickup_date)
    {
        if (is_null($pickup_date)) {
            throw new \InvalidArgumentException('non-nullable pickup_date cannot be null');
        }
        $this->container['pickup_date'] = $pickup_date;

        return $this;
    }

    /**
     * Gets weekend_service
     *
     * @return \DigitalRiver\ApiSdk\Model\WeekendService|null
     */
    public function getWeekendService()
    {
        return $this->container['weekend_service'];
    }

    /**
     * Sets weekend_service
     *
     * @param \DigitalRiver\ApiSdk\Model\WeekendService|null $weekend_service weekend_service
     *
     * @return self
     */
    public function setWeekendService($weekend_service)
    {
        if (is_null($weekend_service)) {
            throw new \InvalidArgumentException('non-nullable weekend_service cannot be null');
        }
        $this->container['weekend_service'] = $weekend_service;

        return $this;
    }

    /**
     * Gets support_cutoff_time
     *
     * @return string|null
     */
    public function getSupportCutoffTime()
    {
        return $this->container['support_cutoff_time'];
    }

    /**
     * Sets support_cutoff_time
     *
     * @param string|null $support_cutoff_time The time of day by which the carrier must take possession of the shipment on <code>pickUpDate</code> for it to get to its final destination by <code>estimatedArrival.date</code>.
     *
     * @return self
     */
    public function setSupportCutoffTime($support_cutoff_time)
    {
        if (is_null($support_cutoff_time)) {
            throw new \InvalidArgumentException('non-nullable support_cutoff_time cannot be null');
        }
        $this->container['support_cutoff_time'] = $support_cutoff_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


