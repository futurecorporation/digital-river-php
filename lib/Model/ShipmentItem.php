<?php
/**
 * ShipmentItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DigitalRiver\ApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Digital River API Reference
 *
 * removed by liao, too long
 *
 * The version of the OpenAPI document: 2023
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DigitalRiver\ApiSdk\Model;

use \ArrayAccess;
use \DigitalRiver\ApiSdk\ObjectSerializer;

/**
 * ShipmentItem Class Doc Comment
 *
 * @category Class
 * @package  DigitalRiver\ApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShipmentItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'fulfillment_order_item_id' => 'string',
        'fulfillment_order_item_upstream_id' => 'string',
        'inventory_item_id' => 'string',
        'part_number' => 'string',
        'quantity' => 'float',
        'tracking_urls' => '\DigitalRiver\ApiSdk\Model\Tracking[]',
        'unit_attributes' => '\DigitalRiver\ApiSdk\Model\ShipmentUnitAttributes[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'fulfillment_order_item_id' => null,
        'fulfillment_order_item_upstream_id' => null,
        'inventory_item_id' => null,
        'part_number' => null,
        'quantity' => 'integer',
        'tracking_urls' => null,
        'unit_attributes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'fulfillment_order_item_id' => false,
		'fulfillment_order_item_upstream_id' => false,
		'inventory_item_id' => false,
		'part_number' => false,
		'quantity' => false,
		'tracking_urls' => false,
		'unit_attributes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'fulfillment_order_item_id' => 'fulfillmentOrderItemId',
        'fulfillment_order_item_upstream_id' => 'fulfillmentOrderItemUpstreamId',
        'inventory_item_id' => 'inventoryItemId',
        'part_number' => 'partNumber',
        'quantity' => 'quantity',
        'tracking_urls' => 'trackingUrls',
        'unit_attributes' => 'unitAttributes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'fulfillment_order_item_id' => 'setFulfillmentOrderItemId',
        'fulfillment_order_item_upstream_id' => 'setFulfillmentOrderItemUpstreamId',
        'inventory_item_id' => 'setInventoryItemId',
        'part_number' => 'setPartNumber',
        'quantity' => 'setQuantity',
        'tracking_urls' => 'setTrackingUrls',
        'unit_attributes' => 'setUnitAttributes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'fulfillment_order_item_id' => 'getFulfillmentOrderItemId',
        'fulfillment_order_item_upstream_id' => 'getFulfillmentOrderItemUpstreamId',
        'inventory_item_id' => 'getInventoryItemId',
        'part_number' => 'getPartNumber',
        'quantity' => 'getQuantity',
        'tracking_urls' => 'getTrackingUrls',
        'unit_attributes' => 'getUnitAttributes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('fulfillment_order_item_id', $data ?? [], null);
        $this->setIfExists('fulfillment_order_item_upstream_id', $data ?? [], null);
        $this->setIfExists('inventory_item_id', $data ?? [], null);
        $this->setIfExists('part_number', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('tracking_urls', $data ?? [], null);
        $this->setIfExists('unit_attributes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier of a shipment item.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets fulfillment_order_item_id
     *
     * @return string|null
     */
    public function getFulfillmentOrderItemId()
    {
        return $this->container['fulfillment_order_item_id'];
    }

    /**
     * Sets fulfillment_order_item_id
     *
     * @param string|null $fulfillment_order_item_id The identifier of the line item.
     *
     * @return self
     */
    public function setFulfillmentOrderItemId($fulfillment_order_item_id)
    {
        if (is_null($fulfillment_order_item_id)) {
            throw new \InvalidArgumentException('non-nullable fulfillment_order_item_id cannot be null');
        }
        $this->container['fulfillment_order_item_id'] = $fulfillment_order_item_id;

        return $this;
    }

    /**
     * Gets fulfillment_order_item_upstream_id
     *
     * @return string|null
     */
    public function getFulfillmentOrderItemUpstreamId()
    {
        return $this->container['fulfillment_order_item_upstream_id'];
    }

    /**
     * Sets fulfillment_order_item_upstream_id
     *
     * @param string|null $fulfillment_order_item_upstream_id The upstream identifier of the line item.
     *
     * @return self
     */
    public function setFulfillmentOrderItemUpstreamId($fulfillment_order_item_upstream_id)
    {
        if (is_null($fulfillment_order_item_upstream_id)) {
            throw new \InvalidArgumentException('non-nullable fulfillment_order_item_upstream_id cannot be null');
        }
        $this->container['fulfillment_order_item_upstream_id'] = $fulfillment_order_item_upstream_id;

        return $this;
    }

    /**
     * Gets inventory_item_id
     *
     * @return string|null
     */
    public function getInventoryItemId()
    {
        return $this->container['inventory_item_id'];
    }

    /**
     * Sets inventory_item_id
     *
     * @param string|null $inventory_item_id The identifier of the inventory item.
     *
     * @return self
     */
    public function setInventoryItemId($inventory_item_id)
    {
        if (is_null($inventory_item_id)) {
            throw new \InvalidArgumentException('non-nullable inventory_item_id cannot be null');
        }
        $this->container['inventory_item_id'] = $inventory_item_id;

        return $this;
    }

    /**
     * Gets part_number
     *
     * @return string|null
     */
    public function getPartNumber()
    {
        return $this->container['part_number'];
    }

    /**
     * Sets part_number
     *
     * @param string|null $part_number The manufacturer part number.
     *
     * @return self
     */
    public function setPartNumber($part_number)
    {
        if (is_null($part_number)) {
            throw new \InvalidArgumentException('non-nullable part_number cannot be null');
        }
        $this->container['part_number'] = $part_number;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity The quantity of this item.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets tracking_urls
     *
     * @return \DigitalRiver\ApiSdk\Model\Tracking[]|null
     */
    public function getTrackingUrls()
    {
        return $this->container['tracking_urls'];
    }

    /**
     * Sets tracking_urls
     *
     * @param \DigitalRiver\ApiSdk\Model\Tracking[]|null $tracking_urls tracking_urls
     *
     * @return self
     */
    public function setTrackingUrls($tracking_urls)
    {
        if (is_null($tracking_urls)) {
            throw new \InvalidArgumentException('non-nullable tracking_urls cannot be null');
        }
        $this->container['tracking_urls'] = $tracking_urls;

        return $this;
    }

    /**
     * Gets unit_attributes
     *
     * @return \DigitalRiver\ApiSdk\Model\ShipmentUnitAttributes[]|null
     */
    public function getUnitAttributes()
    {
        return $this->container['unit_attributes'];
    }

    /**
     * Sets unit_attributes
     *
     * @param \DigitalRiver\ApiSdk\Model\ShipmentUnitAttributes[]|null $unit_attributes unit_attributes
     *
     * @return self
     */
    public function setUnitAttributes($unit_attributes)
    {
        if (is_null($unit_attributes)) {
            throw new \InvalidArgumentException('non-nullable unit_attributes cannot be null');
        }
        $this->container['unit_attributes'] = $unit_attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


